<doxygen><compounddef id="dml-module" kind="module"><detaileddescription><para><h3>Content of dml module</h3><programlisting type="module">xquery version "3.0";

(:
 : Copyright 2006-2013 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)

(:~
 : This module defines a set of functions to probe and refresh indexes which are
 : declared in the prolog of a module.
 : &amp;lt;p/&amp;gt;
 : This module is part of
 : &amp;lt;a href="http://zorba.io/documentation/latest/zorba/specifications/xqddf"&amp;gt;Zorba's XQuery Data Definition Facility&amp;lt;/a&amp;gt;.
 : All the indexes managed by this module have to be pre-declared in the prolog
 : of a library module.
 : Please refer to the
 : &amp;lt;a href="http://zorba.io/documentation/latest/zorba/architecture/data_lifecycle"&amp;gt;general documentation&amp;lt;/a&amp;gt;
 : for more information and examples.
 :
 : @see &amp;lt;a href="http://zorba.io/documentation/latest/zorba/architecture/data_lifecycle"&amp;gt;Data Lifecycle&amp;lt;/a&amp;gt;
 : @see &amp;lt;a href="http://zorba.io/documentation/latest/zorba/specifications/xqddf"&amp;gt;XQuery Data Definition Facility&amp;lt;/a&amp;gt;
 : @see http://zorba.io/modules/latest/zorba.io/modules/store/static/indexes/ddl
 : @see http://zorba.io/modules/latest/zorba.io/modules/store/static/collections/dml
 : @see http://zorba.io/modules/latest/zorba.io/modules/store/static/collections/ddl
 : @see http://zorba.io/modules/latest/zorba.io/modules/store/static/integrity-constraints/ddl
 : @see http://zorba.io/modules/latest/zorba.io/modules/store/static/integrity-constraints/dml
 : @see http://zorba.io/modules/latest/zorba.io/errors
 :
 : @author Zorba Team
 : @project Zorba/Data Store/Indexes/Static Data Manipulation
 :)
module namespace idml = "http://zorba.io/modules/store/static/indexes/dml";

declare namespace an = "http://zorba.io/annotations";
declare namespace zerr = "http://zorba.io/errors";

declare namespace ver = "http://zorba.io/options/versioning";
declare option ver:module-version "2.0";

(:===========================================================================:)

(:~
 : Gets the domain nodes from an index associated by value equality with a
 : given &amp;lt;em&amp;gt;search tuple&amp;lt;/em&amp;gt;.
 : &amp;lt;p/&amp;gt;
 : The search tuple consists of a number of &amp;lt;em&amp;gt;search keys&amp;lt;/em&amp;gt; where each
 : search key is either an atomic item or the empty sequence.  The number of
 : search keys given must be equal to the number of keys declared for the
 : index. Since the number of keys differs from one index to another, this
 : function is variadic.
 : @param $name The of the index to probe.
 : @param $key_i A search key used to probe the index with. The i-th search key
 : corresponds to the i-th key expression in the index declaration.
 : @return The set of domain nodes for which the following XQuery expression
 : returns true:
 :  &amp;lt;pre&amp;gt;
 :    $key1 eq $node/keyExpr1 and ... and $keyM eq $node/keyExprM
 :  &amp;lt;/pre&amp;gt;
 : where &amp;lt;i&amp;gt;keyExpr&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt;&amp;lt;/i&amp;gt; is the expression specified in the i-th
 : keyspec of the index.
 : @error zerr:ZDDY0021 if the index is not declared.
 : @error zerr:ZDDY0023 if the index does not exist.
 : @error zerr:ZDDY0025 if the number of search keys passed as arguments is not
 : the same as the number of keys declared for the index.
 : @error err:XPTY0004 if a non-empty seach key is given whose type does not
 : match the sequence type specified in the corresponding keyspec.
 :)
declare %an:variadic function
idml:probe-index-point-value( $name as xs:QName, $key_i as xs:anyAtomicType? )
  as node()* external;

(:~
 : This is an extension of the &amp;lt;code&amp;gt;probe-index-point-value()&amp;lt;/code&amp;gt; function
 : in that it allows index items to be skipped.
 :
 : @param $name The name of the index to probe.
 : @param $skip The number of index items to skip.
 : @param $key_i The search keys used to probe the index with. The i-th search
 : key corresponds to the i-th key expression in the index declaration.
 : @return The set of domain nodes that satisfy the search condition.
 : @error zerr:ZDDY0021 if the index is not declared.
 : @error zerr:ZDDY0023 if the index does not exist.
 : @error zerr:ZDDY0025 if the number of search keys passed as arguments is not
 : the same as the number of keys declared for the index.
 : @error err:XPTY0004 if a non-empty seach key is given whose type does not
 : match the sequence type specified in the corresponding keyspec.
 :)
declare %an:variadic function
idml:probe-index-point-value-skip( $name as xs:QName,
                                   $skip as xs:integer,
                                   $key_i as xs:anyAtomicType? )
  as node()* external;

(:~
 : Gets from an index the domain nodes associated by general equality with a
 : given &amp;lt;em&amp;gt;search sequence &amp;lt;/em&amp;gt;.
 : The search sequence consists of an arbitrary number of &amp;lt;em&amp;gt;search keys&amp;lt;/em&amp;gt;
 : where each search key is an atomic item.
 : The function is supported by general indexes only.
 :
 : @param $name The name of the index to probe.
 : @param $key The search sequence.
 : @return The set of domain nodes for which the following XQuery expression
 : returns true:
 :  &amp;lt;pre&amp;gt;
 :    $keys = $node/keyExpr
 :  &amp;lt;/pre&amp;gt;
 : where keyExpr is the expression specified in the keyspec of the index
 : (remember that for general indexes, there can be only one keyspec).
 : @error err:XPTY0004 if the search sequence contains a search key whose type
 : does not match the sequence type specified in the keyspec of the index.
 : @error zerr:ZDDY0021 if the index with name $name is not declared.
 : @error zerr:ZDDY0023 if the index with name $name does not exist.
 : @error zerr:ZDDY0029 if the index is not general.
 :)
declare function idml:probe-index-point-general( $name as xs:QName,
                                                 $key  as xs:anyAtomicType* )
  as node()* external;

(:~
 : Gets the domain nodes associated by value order-comparison (operators
 : &amp;lt;code&amp;gt;le&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;lt&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;ge&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;gt&amp;lt;/code&amp;gt;) with a
 : given &amp;lt;em&amp;gt;search box&amp;lt;/em&amp;gt;.
 : &amp;lt;p/&amp;gt;
 : The search box is specified as a number &amp;lt;i&amp;gt;M&amp;lt;/i&amp;gt; of &amp;lt;em&amp;gt;rangespecs&amp;lt;/em&amp;gt;
 : where each rangespec consists of six values.
 : The number &amp;lt;i&amp;gt;M&amp;lt;/i&amp;gt; must be greater than 0 and less than or equal to the
 : number &amp;lt;i&amp;gt;N&amp;lt;/i&amp;gt; of keyspecs found in the index declaration.
 : If &amp;lt;i&amp;gt;M&amp;lt;/i&amp;gt; &amp;amp;lt; &amp;lt;i&amp;gt;N&amp;lt;/i&amp;gt;, then the "missing" rangespecs are assumed to have
 : the following value: [(), (), false, false, false, false].
 : As a result, we can assume that &amp;lt;i&amp;gt;M&amp;lt;/i&amp;gt; = &amp;lt;i&amp;gt;N&amp;lt;/i&amp;gt;.
 : Remember that for general indexes, there can be only one IndexKeySpec and,
 : as a result for general indexes, &amp;lt;i&amp;gt;M&amp;lt;/i&amp;gt; = &amp;lt;i&amp;gt;N&amp;lt;/i&amp;gt; = 1.
 : Since the number of keys differs from one index to another,
 : this function is variadic.
 : &amp;lt;p/&amp;gt;
 : The i&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; rangespec corresponds to the i&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; keyspec, and
 : specifies a search condition on the key values that are produced by
 : evaluating that keyspec for every domain node.
 : Specifically, we define the i&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; &amp;lt;em&amp;gt;rangespec result&amp;lt;/em&amp;gt; as the
 : set of domain nodes for which the following XQuery expression returns
 : true:
 :  &amp;lt;pre&amp;gt;
 :    if ( $haveLowerBound-i and $haveUpperBound-i ) then
 :      $lowerBound-i lop $node/keyExpr-i and $node/keyExpr-i uop $upperBound-i
 :    else if ( $haveLowerBound-i ) then
 :      $lowerBound-i lop $node/keyExpr-i
 :    else if ( $haveUpperBound-i ) then
 :      $node/keyExpr-i uop $upperBound-i
 :    else
 :      fn:true()
 :  &amp;lt;/pre&amp;gt;
 : where &amp;lt;i&amp;gt;keyExpr-i&amp;lt;/i&amp;gt; is the expression specified by the i&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt;
 : keyspec of the index, &amp;lt;i&amp;gt;lop&amp;lt;/i&amp;gt; is either the &amp;lt;code&amp;gt;le&amp;lt;/code&amp;gt; or the
 : &amp;lt;code&amp;gt;lt&amp;lt;/code&amp;gt; operator depending on whether
 : &amp;lt;code&amp;gt;$lowerBoundsIncluded-i&amp;lt;/code&amp;gt; is true or false, and &amp;lt;i&amp;gt;uop&amp;lt;/i&amp;gt; is
 : either the &amp;lt;i&amp;gt;le&amp;lt;/i&amp;gt; or the &amp;lt;i&amp;gt;lt&amp;lt;/i&amp;gt; operator depending on whether
 : &amp;lt;code&amp;gt;$upperBoundsIncluded-i&amp;lt;/code&amp;gt; is true or false.
 :
 : @param $name The name of the index to probe.
 : @param $lowerBound-i The lower bound in a range of key values.
 : @param $upperBound-i The upper bound in a range of key values.
 : @param $haveLowerBound-i If false, then there is no lower bound, or
 : equivalently, the lower bound is -INFINITY. Otherwise, the lower bound is
 : the one given by the &amp;lt;code&amp;gt;$lowerBound-i&amp;lt;/code&amp;gt; value.
 : @param $haveUpperBound-i If false, then there is no upper bound, or
 : equivalently, the upper bound is +INFINITY. Otherwise, the upper bound is
 : the one given by the &amp;lt;code&amp;gt;$upperBound-i&amp;lt;/code&amp;gt; value.
 : @param $lowerBoundIncluded-i If false, then the range is open from below,
 : i.e., the &amp;lt;code&amp;gt;$lowerBound-i&amp;lt;/code&amp;gt; value is not considered part of the
 : range. Otherwise, the range is closed from below, i.e., the
 : &amp;lt;code&amp;gt;$lowerBound-i&amp;lt;/code&amp;gt; value is part of the range.
 : @param $upperBoundIncluded-i If false, then the range is open from above,
 : i.e., the &amp;lt;code&amp;gt;$upperBound-i&amp;lt;/code&amp;gt; value is not considered part of the
 : range. Otherwise, the range is closed from above, i.e., the
 : &amp;lt;code&amp;gt;$upperBound-i&amp;lt;/code&amp;gt; value is part of the range.
 : @return The intersection of all the rangespec results.
 : @error zerr:ZDDY0021 if the index is not declared.
 : @error zerr:ZDDY0023 if the index does not exist.
 : @error zerr:ZDDY0025 if the number of rangespecs passed as arguments is zero
 : or greater than the number of keys declared for the index.
 : @error zerr:ZDDY0026 if the index is not a range index.
 : @error err:XPTY0004 if &amp;lt;code&amp;gt;$haveLowerBound-i&amp;lt;/code&amp;gt; is true and
 : &amp;lt;code&amp;gt;$lowerBound-i&amp;lt;/code&amp;gt; is an atomic item whose type does not match the
 : sequence type specified by the i&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; keyspec, or
 : &amp;lt;code&amp;gt;$haveUpperBound-i&amp;lt;/code&amp;gt; is true and &amp;lt;code&amp;gt;$upperBound-i&amp;lt;/code&amp;gt; is an
 : atomic item whose type does not match the sequence type specified by the
 : i&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; keyspec.
 : @error zerr:ZDDY0034 if (a) the index is general (in which case there is
 : only one rangespac), (b) the index is untyped, (c) there is both a lower and
 : an upper bound, and (d) if T1 and T2 are the types of the lower and upper
 : bound, neither T1 is a subtype of T2 nor T2 is a subtype of T1.
 :)
declare %an:variadic function
idml:probe-index-range-value( $name                 as xs:QName,
                              $lowerBound-i         as xs:anyAtomicType?,
                              $upperBound-i         as xs:anyAtomicType?,
                              $haveLowerBound-i     as xs:boolean,
                              $haveUpperBound-i     as xs:boolean,
                              $lowerBoundIncluded-i as xs:boolean,
                              $upperBoundIncluded-i as xs:boolean )
  as node()* external;

(:~
 : This function is an extension of the &amp;lt;code&amp;gt;probe-index-range-value()&amp;lt;/code&amp;gt;
 : function that index items to be skipped.
 :
 : @param $name The QName of the index to probe
 : @param $skip The number of index items to skip.
 : @param $lowerBound-i The lower bound in a range of key values.
 : @param $upperBound-i The upper bound in a range of key values.
 : @param $haveLowerBound-i If false, then there is no lower bound, or
 : equivalently, the lower bound is -INFINITY. Otherwise, the lower bound is
 : the one given by the &amp;lt;code&amp;gt;$lowerBound-i&amp;lt;/code&amp;gt; value.
 : @param $haveUpperBound-i If false, then there is no upper bound, or
 : equivalently, the upper bound is +INFINITY. Otherwise, the upper bound is
 : the one given by the &amp;lt;code&amp;gt;$upperBound-i&amp;lt;/code&amp;gt; value.
 : @param $lowerBoundIncluded-i If false, then the range is open from below,
 : i.e., the lowerBound-i value is not considered part of the range. Otherwise,
 : the range is closed from below, i.e., the &amp;lt;code&amp;gt;$lowerBound-i&amp;lt;/code&amp;gt; value
 : is part of the range.
 : @param $upperBoundIncluded-i If false, then the range is open from above,
 : i.e., the upperBound-i value is not considered part of the range. Otherwise,
 : the range is closed from above, i.e., the &amp;lt;code&amp;gt;$upperBound-i&amp;lt;/code&amp;gt; value
 : is part of the range.
 : @return The set of domain nodes that satisfy the search condition.
 : @error zerr:ZDDY0021 if the index with name $name is not declared.
 : @error zerr:ZDDY0023 if the index with name $name does not exist.
 : @error zerr:ZDDY0025 if the number of rangespecs passed as arguments is zero
 : or greater than the number of keys declared for the index.
 : @error zerr:ZDDY0026 if the index is not a range index.
 : @error err:XPTY0004 if &amp;lt;code&amp;gt;$haveLowerBound-i&amp;lt;/code&amp;gt; is true and
 : &amp;lt;code&amp;gt;$lowerBound-i&amp;lt;/code&amp;gt; is an atomic item whose type does not match the
 : sequence type specified by the i&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; keyspec, or
 : &amp;lt;code&amp;gt;$haveUpperBound-i&amp;lt;/code&amp;gt; is true and &amp;lt;code&amp;gt;$upperBound-i&amp;lt;/code&amp;gt; is an
 : atomic item whose type does not match the sequence type specified by the
 : i&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; keyspec.
 : @error zerr:ZDDY0034 if (a) the index is general (in which case there is
 : only one rangespac), (b) the index is untyped, (c) there is both a lower and
 : an upper bound, and (d) if T1 and T2 are the types of the lower and upper
 : bound, neither T1 is a subtype of T2 nor T2 is a subtype of T1.
 :)
declare %an:variadic function
idml:probe-index-range-value-skip( $name                 as xs:QName,
                                   $skip                 as xs:integer,
                                   $lowerBound-i         as xs:anyAtomicType?,
                                   $upperBound-i         as xs:anyAtomicType?,
                                   $haveLowerBound-i     as xs:boolean,
                                   $haveUpperBound-i     as xs:boolean,
                                   $lowerBoundIncluded-i as xs:boolean,
                                   $upperBoundIncluded-i as xs:boolean )
  as node()* external;

(:~
 : Gets the domain nodes associated by general order-comparison (operators
 : &amp;lt;code&amp;gt;&amp;amp;lt;=&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;&amp;amp;lt;&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;&amp;amp;gt;=&amp;lt;/code&amp;gt;,
 : &amp;lt;code&amp;gt;&amp;amp;gt;&amp;lt;/code&amp;gt;) with one or two &amp;lt;em&amp;gt;search sequences&amp;lt;/em&amp;gt;.
 : &amp;lt;p/&amp;gt;
 : Each search sequence consists of an arbitrary number of
 : &amp;lt;em&amp;gt;search keys&amp;lt;/em&amp;gt; where each search key is an atomic item.
 : This method is supported by general range indexes only.
 : Its result is either an error or the set of domain nodes for which the
 : following XQuery expression returns true:
 :  &amp;lt;pre&amp;gt;
 :    if ( $haveLowerBound and $haveUpperBound ) then
 :      $lowerBoundKeys lop $node/keyExpr and $node/keyExpr uop $upperBoundKeys
 :    else if ( $haveLowerBound ) then
 :      $lowerBoundKeys lop $node/keyExpr
 :    else if ( $haveUpperBound ) then
 :      $node/keyExpr uop $upperBoundKeys
 :    else
 :      fn:true()
 :  &amp;lt;/pre&amp;gt;
 : where &amp;lt;i&amp;gt;keyExpr&amp;lt;/i&amp;gt; is the expression specified in the keyspec of the
 : index, &amp;lt;i&amp;gt;lop&amp;lt;/i&amp;gt; is either the &amp;lt;code&amp;gt;&amp;amp;lt;=&amp;lt;/code&amp;gt; or the &amp;lt;code&amp;gt;&amp;amp;lt;&amp;lt;/code&amp;gt;
 : operator depending on whether &amp;lt;code&amp;gt;$lowerBoundsIncluded&amp;lt;/code&amp;gt; is true or
 : false, and &amp;lt;i&amp;gt;uop&amp;lt;/i&amp;gt; is either the &amp;lt;code&amp;gt;&amp;amp;lt;=&amp;lt;/code&amp;gt; or the
 : &amp;lt;code&amp;gt;&amp;amp;lt;&amp;lt;/code&amp;gt; operator depending on whether
 : &amp;lt;code&amp;gt;$upperBoundsIncluded&amp;lt;/code&amp;gt; is true or false.
 :
 : @param $name The of the index to probe.
 : @param $lowerBound The lower bound search sequence.
 : @param $upperBound The upper bound search sequence.
 : @param $haveLowerBound Whether a lower bound search sequence exists or not.
 : @param $haveUpperBound Whether an upper bound search sequence exists or not.
 : @param $lowerBoundIncluded Whether to use the &amp;lt;code&amp;gt;&amp;amp;lt;=&amp;lt;/code&amp;gt; or the
 : &amp;lt;code&amp;gt;&amp;amp;lt;&amp;lt;/code&amp;gt; operator when comparing a search key from
 : &amp;lt;code&amp;gt;$lowerBound&amp;lt;/code&amp;gt; with an index key.
 : @param $upperBoundIncluded Whether to use the &amp;lt;code&amp;gt;&amp;amp;lt;=&amp;lt;/code&amp;gt; or the
 : &amp;lt;code&amp;gt;&amp;amp;lt;&amp;lt;/code&amp;gt; operator when comparing an index key with a search key
 : from &amp;lt;code&amp;gt;$upperBound&amp;lt;/code&amp;gt;.
 : @return The set of domain nodes that satisfy the search condition.
 : @error zerr:ZDDY0021 if the index was not declared.
 : @error zerr:ZDDY0023 if the index does not exist.
 : @error zerr:ZDDY0030 if the index is not a general range index.
 : @error err:XPTY0004 if &amp;lt;code&amp;gt;$haveLowerBound&amp;lt;/code&amp;gt; is true and
 : &amp;lt;code&amp;gt;$lowerBoundKeys&amp;lt;/code&amp;gt; contains an atomic item whose type does not
 : match the sequence type specified by the index keyspec, or
 : &amp;lt;code&amp;gt;$haveUpperBound&amp;lt;/code&amp;gt; is true and &amp;lt;code&amp;gt;$upperBoundKeys&amp;lt;/code&amp;gt;
 : contains an atomic item whose type does not match the sequence type
 : specified by the index keyspec.
 :)
declare function
idml:probe-index-range-general( $name               as xs:QName,
                                $lowerBound         as xs:anyAtomicType*,
                                $upperBound         as xs:anyAtomicType*,
                                $haveLowerBound     as xs:boolean,
                                $haveUpperBound     as xs:boolean,
                                $lowerBoundIncluded as xs:boolean,
                                $upperBoundIncluded as xs:boolean )
  as node()* external;

(:~
 : Updates the index with the given name.  Note that if the maintenance
 : property of the index is automatic, this function does nothing.
 :
 : @param $name The name of the index to refresh.
 : @return An empty XDM instance and a pending update list that, when applied,
 : refreshes the contents of the index.
 : @error zerr:ZDDY0021 if the index is not declared.
 : @error zerr:ZDDY0023 if the index does not exist.
 :)
declare updating function idml:refresh-index( $name as xs:QName )
  external;

(:~
 : Gets a sequence of all keys contained in the index with the given name.
 : Each element has the following structure:
 :  &amp;lt;pre class="brush: xml;"&amp;gt;
 :   &amp;amp;lt;key xmlns="http://zorba.io/modules/store/static/indexes/dml"&amp;amp;gt;
 :     &amp;amp;lt;attribute value="key1_value"/&amp;amp;gt;
 :     &amp;amp;lt;attribute value="key2_value"/&amp;amp;gt;
 :     &amp;amp;lt;attribute value="key3_value"/&amp;amp;gt;
 :   &amp;amp;lt;/key&amp;amp;gt;
 :  &amp;lt;/pre&amp;gt;
 : Note that the order of the attribute elements reflects the order of
 : the keys in the index specification. Also note that the values in
 : these attributes have the type that is declared in the corresponding
 : index specification.
 :
 : @param $name The name of the index to get the keys for.
 : @return A sequence of elements comprising the keys in the index.
 : @error zerr:ZDDY0021 if the index was not declared.
 : @error zerr:ZDDY0023 if the index does not exist.
 :)
declare function idml:keys( $name as xs:QName )
  as node()* external;

(:===========================================================================:)

(: vim:set et sw=2 ts=2: :)
</programlisting></para></detaileddescription></compounddef></doxygen>