<doxygen><compounddef id="paint-module" kind="module"><detaileddescription><para><h3>Content of paint module</h3><programlisting type="module">xquery version "3.0";

(:
 : Copyright 2006-2009 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)

(:~
 : &amp;lt;p&amp;gt;This module provides a function to extend an image with additional shapes.&amp;lt;/p&amp;gt; 
 : &amp;lt;p/&amp;gt; 
 : &amp;lt;p&amp;gt;Fully supported image formats are:&amp;lt;/p&amp;gt;
 : &amp;lt;ul&amp;gt;
 :   &amp;lt;li&amp;gt;GIF&amp;lt;/li&amp;gt;
 :   &amp;lt;li&amp;gt;JPEG&amp;lt;/li&amp;gt;
 :   &amp;lt;li&amp;gt;PNG&amp;lt;/li&amp;gt;
 :   &amp;lt;li&amp;gt;TIFF&amp;lt;/li&amp;gt;
 :   &amp;lt;li&amp;gt;BMP&amp;lt;/li&amp;gt;
 : &amp;lt;/ul&amp;gt;
 :
 : &amp;lt;p&amp;gt;The errors raised by functions of this module have the namespace
 : &amp;lt;tt&amp;gt;http://zorba.io/modules/image/error&amp;lt;/tt&amp;gt; (associated with prefix ierr).&amp;lt;/p&amp;gt;
 :
 : @author Daniel Thomas
 : @library &amp;lt;a href="http://www.imagemagick.org/Magick++/"&amp;gt;Magick++ C++ Library&amp;lt;/a&amp;gt;
 : @project Zorba/Image/Paint
 :
 :)
module namespace paint = 'http://zorba.io/modules/image/paint';

import schema namespace img = 'http://zorba.io/modules/image/image';

declare namespace err = "http://www.w3.org/2005/xqt-errors";
declare namespace ierr = "http://zorba.io/modules/image/error";
declare namespace ver = "http://zorba.io/options/versioning";
declare option ver:module-version "1.0";


(:~
 : &amp;lt;p&amp;gt;Extends the passed image with a sequence of shapes.&amp;lt;/p&amp;gt; 
 : &amp;lt;p&amp;gt;The shapes are passed as a sequence of elements.&amp;lt;/p&amp;gt;
 : &amp;lt;p&amp;gt;The possibilities for shape elements are:&amp;lt;/p&amp;gt;
 :    &amp;lt;ul&amp;gt;
 :      &amp;lt;li&amp;gt; line: 
 :        &amp;lt;pre class="brush: json"&amp;gt;
 :          { 
 :            "line" : 
 :            {      
 :              "start" : [0, 0],
 :              "end" : [80, 80] 
 :            } 
 :          }
 :          &amp;lt;/pre&amp;gt;
 :      &amp;lt;/li&amp;gt; 
 :       &amp;lt;li&amp;gt; polyline: 
 :         &amp;lt;pre class=""&amp;gt;
 :           { 
 :             "polyLine" : 
 :             {
 :               "points" : [ [10, 10], [30, 10], [30, 30], [10, 30] ] 
 :             } 
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt; stroked polyline: 
 :         &amp;lt;pre class="brush: xml"&amp;gt;
 :           { 
 :             "strokedPolyLine" : 
 :             {
 :               "points" : [ [10, 10], [40, 80], [50, 30] ], 
 :               "strokeLength" : 10,
 :               "gapLength" : 2
 :             } 
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt; rectangle:
 :         &amp;lt;pre class="brush: xml"&amp;gt;
 :           { 
 :             "rectangle" :
 :             {
 :               "upperLeft" : [ 20, 20 ],
 :               "lowerRight" : [ 50, 50 ]
 :             }
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt; rounded rectangle: 
 :         &amp;lt;pre class="brush: json"&amp;gt;
 :           { "roundedRectangle" :
 :             {
 :               "upperLeft" : [ 20, 20 ],
 :               "lowerRight" : [ 50, 50 ],
 :               "cornerWidth" : 10,
 :               "cornerHeight" : 10
 :             }
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt; circle: 
 :         &amp;lt;pre class="brush: json"&amp;gt;
 :           { 
 :             "circle" :
 :             {
 :               "origin" : [ 50, 50 ],
 :               "radius" : 5 
 :             }
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt; ellipse: 
 :         &amp;lt;pre class="brush: json"&amp;gt;
 :           { 
 :             "ellipse" :
 :             {
 :               "origin" : [ 50, 50 ],
 :               "radiusX" : 30,
 :               "radiusY" : 20 
 :             }
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt; arc: 
 :         &amp;lt;pre class="brush: json"&amp;gt;
 :           { 
 :             "arc" :
 :             {
 :               "origin" : [ 50, 50 ],
 :               "radiusX" : 10,
 :               "radiusY" : 20,
 :               "startDegrees" : 180,
 :               "endDegrees" : 270 
 :             }
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt; polygon: 
 :         &amp;lt;pre class="brush: json"&amp;gt;
 :           { 
 :             "polygon" : 
 :             {
 :               "points" : [ [10, 10], [30, 10], [30, 30] ] 
 :             } 
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt; text: 
 :         &amp;lt;pre class="brush: json"&amp;gt;
 :           { 
 :             "text" :
 :             {
 :               "origin" : [ 50, 50 ],
 :               "text" : "Hello World!",
 :               "font" : "Arial",
 :               "font-size" : 12 
 :             }
 :           }
 :         &amp;lt;/pre&amp;gt;
 :       &amp;lt;/li&amp;gt;
 :     &amp;lt;/ul&amp;gt;
 : &amp;lt;p/&amp;gt;
 : &amp;lt;p&amp;gt;Optionally, each of the shape elements can contain elements to define the stroke with, stroke color, fill color, and anti-aliasing.&amp;lt;/p&amp;gt;
 : &amp;lt;p&amp;gt;E.g.:&amp;lt;/p&amp;gt;
 : &amp;lt;p&amp;gt;
 :   &amp;lt;pre class="brush: json"&amp;gt;
 :     { 
 :       "polygon" : 
 :       {
 :         "strokeWidth" : 3,
 :         "strokeColor" : "#FF0000",
 :         "fillColor" : "#00FF00",
 :         "antiAliasing" : fn:true(),
 :         "points" : [ [ 10, 10 ], [ 40, 80 ], [ 50, 30 ] ]
 :       }
 :     }
 :   &amp;lt;/pre&amp;gt;
 :  &amp;lt;/p&amp;gt;
 : 
 : @param $image the passed image
 : @param $shapes the shapes
 : @return image with additional shapes 
 : @error ierr:INVALID_IMAGE the passed image is invalid.
 : @error err::XPTY0004 empty sequence not allowed.
 : @error err:FORG0001 one of the passed shape objects is invalid. 
 : @example test/Queries/image/paint_different_lines.xq
 : @example test/Queries/image/paint_polyline.xq
 : @example test/Queries/image/paint_stroked_polyline.xq
 : @example test/Queries/image/paint_polygon.xq
 : @example test/Queries/image/paint_rectangles.xq
 : @example test/Queries/image/paint_circles.xq
 : @example test/Queries/image/paint_text.xq
 :)
declare function paint:paint($image as xs:base64Binary, $shapes as object()*) as xs:base64Binary  {
  (: missing json validation :)
  paint:paint-impl($image, for $x in $shapes return $x)
};

declare %private function paint:paint-impl($image as xs:base64Binary, $shapes as object()*) as xs:base64Binary external; 

</programlisting></para></detaileddescription></compounddef></doxygen>