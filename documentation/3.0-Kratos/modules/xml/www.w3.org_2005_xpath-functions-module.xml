<doxygen><compounddef id="xpath-functions-module" kind="module"><detaileddescription><para><h3>Content of xpath-functions module</h3><programlisting type="module">xquery version "1.0";

(:
 : Copyright 2006-2009 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)

(:~
 : This module contains all the functions specified in the
 : W3C XPath and XQuery Functions and Operators 3.0.
 :
 :
 : @author www.w3c.org
 : @see http://www.w3.org/TR/xpath-functions-30/
 : @project W3C/XPath Functions
 :
 :)
module namespace fn = "http://www.w3.org/2005/xpath-functions";

(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Constructs an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt; value given a namespace URI and a lexical
 :             QName.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="QName" return-type="xs:QName" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="paramURI" type="xs:string?"/&amp;gt;&amp;lt;arg name="paramQName" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The namespace URI in the returned QName is taken from &amp;lt;code&amp;gt;$paramURI&amp;lt;/code&amp;gt;. If
 :                &amp;lt;code&amp;gt;$paramURI&amp;lt;/code&amp;gt; is the zero-length string or the empty sequence, it represents
 :             "no namespace".&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The prefix (or absence of a prefix) in &amp;lt;code&amp;gt;$paramQName&amp;lt;/code&amp;gt; is retained in the
 :             returned &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt; value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The local name in the result is taken from the local part of
 :             &amp;lt;code&amp;gt;$paramQName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="CA" code="0002"/&amp;gt; if &amp;lt;code&amp;gt;$paramQName&amp;lt;/code&amp;gt; does
 :             not have the correct lexical form for an instance of &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="CA" code="0002"/&amp;gt; if &amp;lt;code&amp;gt;$paramURI&amp;lt;/code&amp;gt; is the
 :             zero-length string or the empty sequence, and the value of &amp;lt;code&amp;gt;$paramQName&amp;lt;/code&amp;gt;
 :             contains a colon (&amp;lt;code&amp;gt;:&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="G"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CA" code="0002"/&amp;gt; if &amp;lt;code&amp;gt;$paramURI&amp;lt;/code&amp;gt; is not a valid URI (XML Namespaces 1.0) or
 :             IRI (XML Namespaces 1.1). &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-QName
 :)
declare function fn:QName($paramURI as xs:string?,  $paramQName as xs:string) as  xs:QName external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the absolute value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="abs" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;General rules: see &amp;lt;specref ref="numeric-value-functions"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is negative the function returns &amp;lt;code&amp;gt;-$arg&amp;lt;/code&amp;gt;, otherwise it
 :             returns &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is one of the four numeric types &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; the type
 :             of the result is the same as the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. If the type of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a type derived from one of the numeric types, the result is an
 :             instance of the base numeric type.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; arguments, if the argument is
 :             positive zero or negative zero, then positive zero is returned. If the argument is
 :             positive or negative infinity, positive infinity is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:abs(10.5)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;10.5&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:abs(-10.5)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;10.5&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-abs
 :)
declare function fn:abs($arg as numeric?) as  numeric? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Adjusts an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; value to a specific timezone, or to no timezone
 :             at all; the result is the date in the target timezone that contains the starting instant
 :             of the supplied date.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-date-to-timezone" return-type="xs:date?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:date?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-date-to-timezone" return-type="xs:date?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:date?"/&amp;gt;&amp;lt;arg name="timezone" type="xs:dayTimeDuration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not specified, then the effective value of
 :                &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the value of the implicit timezone in the dynamic
 :             context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, then the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             the empty sequence, then the result is the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             not the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt;
 :             as the timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the empty
 :             sequence, then the result is the local value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; without its timezone
 :             component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not the
 :             empty sequence, then the function returns the value of the expression:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Let &amp;lt;code&amp;gt;$dt&amp;lt;/code&amp;gt; be the value of &amp;lt;code&amp;gt;fn:dateTime($arg,
 :                      xs:time('00:00:00'))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Let &amp;lt;code&amp;gt;$adt&amp;lt;/code&amp;gt; be the value of &amp;lt;code&amp;gt;fn:adjust-dateTime-to-timezone($dt,
 :                      $timezone)&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The function returns the value of &amp;lt;code&amp;gt;xs:date($adt)&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DT" code="0003"/&amp;gt; if &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is less
 :             than &amp;lt;code&amp;gt;-PT14H&amp;lt;/code&amp;gt; or greater than &amp;lt;code&amp;gt;PT14H&amp;lt;/code&amp;gt; or is not an integral number
 :             of minutes.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-adjust-date-to-timezone
 :)
declare function fn:adjust-date-to-timezone($arg as xs:date?) as  xs:date? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Adjusts an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; value to a specific timezone, or to no timezone
 :             at all; the result is the date in the target timezone that contains the starting instant
 :             of the supplied date.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-date-to-timezone" return-type="xs:date?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:date?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-date-to-timezone" return-type="xs:date?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:date?"/&amp;gt;&amp;lt;arg name="timezone" type="xs:dayTimeDuration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not specified, then the effective value of
 :                &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the value of the implicit timezone in the dynamic
 :             context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, then the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             the empty sequence, then the result is the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             not the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt;
 :             as the timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the empty
 :             sequence, then the result is the local value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; without its timezone
 :             component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not the
 :             empty sequence, then the function returns the value of the expression:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Let &amp;lt;code&amp;gt;$dt&amp;lt;/code&amp;gt; be the value of &amp;lt;code&amp;gt;fn:dateTime($arg,
 :                      xs:time('00:00:00'))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Let &amp;lt;code&amp;gt;$adt&amp;lt;/code&amp;gt; be the value of &amp;lt;code&amp;gt;fn:adjust-dateTime-to-timezone($dt,
 :                      $timezone)&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The function returns the value of &amp;lt;code&amp;gt;xs:date($adt)&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DT" code="0003"/&amp;gt; if &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is less
 :             than &amp;lt;code&amp;gt;-PT14H&amp;lt;/code&amp;gt; or greater than &amp;lt;code&amp;gt;PT14H&amp;lt;/code&amp;gt; or is not an integral number
 :             of minutes.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-adjust-date-to-timezone
 :)
declare function fn:adjust-date-to-timezone( $arg as xs:date?,  $timezone as xs:dayTimeDuration?) as  xs:date? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Adjusts an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value to a specific timezone, or to no
 :             timezone at all.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-dateTime-to-timezone" return-type="xs:dateTime?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:dateTime?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-dateTime-to-timezone" return-type="xs:dateTime?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:dateTime?"/&amp;gt;&amp;lt;arg name="timezone" type="xs:dayTimeDuration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not specified, then the effective value of
 :                &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the value of the implicit timezone in the dynamic
 :             context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, then the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             not the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt;
 :             as the timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the empty
 :             sequence, then the result is the local value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; without its timezone
 :             component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not the
 :             empty sequence, then the result is the &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value that is equal to
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; and that has a timezone component equal to
 :             &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DT" code="0003"/&amp;gt; if &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is less
 :             than &amp;lt;code&amp;gt;-PT14H&amp;lt;/code&amp;gt; or greater than &amp;lt;code&amp;gt;PT14H&amp;lt;/code&amp;gt; or is not an integral number
 :             of minutes.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-adjust-dateTime-to-timezone
 :)
declare function fn:adjust-dateTime-to-timezone($arg as xs:dateTime?) as  xs:dateTime external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Adjusts an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value to a specific timezone, or to no
 :             timezone at all.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-dateTime-to-timezone" return-type="xs:dateTime?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:dateTime?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-dateTime-to-timezone" return-type="xs:dateTime?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:dateTime?"/&amp;gt;&amp;lt;arg name="timezone" type="xs:dayTimeDuration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not specified, then the effective value of
 :                &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the value of the implicit timezone in the dynamic
 :             context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, then the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             not the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt;
 :             as the timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the empty
 :             sequence, then the result is the local value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; without its timezone
 :             component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not the
 :             empty sequence, then the result is the &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value that is equal to
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; and that has a timezone component equal to
 :             &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DT" code="0003"/&amp;gt; if &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is less
 :             than &amp;lt;code&amp;gt;-PT14H&amp;lt;/code&amp;gt; or greater than &amp;lt;code&amp;gt;PT14H&amp;lt;/code&amp;gt; or is not an integral number
 :             of minutes.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-adjust-dateTime-to-timezone
 :)
declare function fn:adjust-dateTime-to-timezone( $arg as xs:dateTime?,  $timezone as xs:dayTimeDuration?) as  xs:dateTime external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Adjusts an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; value to a specific timezone, or to no timezone
 :             at all.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-time-to-timezone" return-type="xs:time?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:time?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-time-to-timezone" return-type="xs:time?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:time?"/&amp;gt;&amp;lt;arg name="timezone" type="xs:dayTimeDuration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not specified, then the effective value of
 :                &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the value of the implicit timezone in the dynamic
 :             context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, then the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             not the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt;
 :             as the timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the empty
 :             sequence, then the result is the localized value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; without its
 :             timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not the
 :             empty sequence, then:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Let &amp;lt;code&amp;gt;$dt&amp;lt;/code&amp;gt; be the &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value
 :                      &amp;lt;code&amp;gt;fn:dateTime(xs:date('1972-12-31'), $arg)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Let &amp;lt;code&amp;gt;$adt&amp;lt;/code&amp;gt; be the value of &amp;lt;code&amp;gt;fn:adjust-dateTime-to-timezone($dt,
 :                      $timezone)&amp;lt;/code&amp;gt;
 :                &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The function returns the &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; value
 :                   &amp;lt;code&amp;gt;xs:time($adt)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DT" code="0003"/&amp;gt; if &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is less
 :             than &amp;lt;code&amp;gt;-PT14H&amp;lt;/code&amp;gt; or greater than &amp;lt;code&amp;gt;PT14H&amp;lt;/code&amp;gt; or if does not contain an
 :             integral number of minutes.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-adjust-time-to-timezone
 :)
declare function fn:adjust-time-to-timezone($arg as xs:time?) as  xs:time? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Adjusts an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; value to a specific timezone, or to no timezone
 :             at all.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-time-to-timezone" return-type="xs:time?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:time?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="adjust-time-to-timezone" return-type="xs:time?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:time?"/&amp;gt;&amp;lt;arg name="timezone" type="xs:dayTimeDuration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not specified, then the effective value of
 :                &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the value of the implicit timezone in the dynamic
 :             context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, then the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; does not have a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is
 :             not the empty sequence, then the result is &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt;
 :             as the timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is the empty
 :             sequence, then the result is the localized value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; without its
 :             timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component and &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is not the
 :             empty sequence, then:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Let &amp;lt;code&amp;gt;$dt&amp;lt;/code&amp;gt; be the &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value
 :                      &amp;lt;code&amp;gt;fn:dateTime(xs:date('1972-12-31'), $arg)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Let &amp;lt;code&amp;gt;$adt&amp;lt;/code&amp;gt; be the value of &amp;lt;code&amp;gt;fn:adjust-dateTime-to-timezone($dt,
 :                      $timezone)&amp;lt;/code&amp;gt;
 :                &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The function returns the &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; value
 :                   &amp;lt;code&amp;gt;xs:time($adt)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DT" code="0003"/&amp;gt; if &amp;lt;code&amp;gt;$timezone&amp;lt;/code&amp;gt; is less
 :             than &amp;lt;code&amp;gt;-PT14H&amp;lt;/code&amp;gt; or greater than &amp;lt;code&amp;gt;PT14H&amp;lt;/code&amp;gt; or if does not contain an
 :             integral number of minutes.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-adjust-time-to-timezone
 :)
declare function fn:adjust-time-to-timezone( $arg as xs:time?,  $timezone as xs:dayTimeDuration?) as  xs:time? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Analyzes a string using a regular expression, returning an XML structure that
 :             identifies which parts of the input string matched or failed to match the regular
 :             expression, and in the case of matched substrings, which substrings matched each
 :             capturing group in the regular expression.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="analyze-string" return-type="element(fn:analyze-string-result)" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="analyze-string" return-type="element(fn:analyze-string-result)" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="flags" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of calling the first version of this function (omitting the argument
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt;) is the same as the effect of calling the second version with the
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument set to a zero-length string. Flags are defined in
 :                &amp;lt;specref ref="flags"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument is interpreted in the same way as for the
 :                &amp;lt;code&amp;gt;fn:matches&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the empty sequence the function behaves as if
 :                &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; were the zero-length string. In this situation the result will be
 :             an element node with no children.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an element node whose local name is
 :                &amp;lt;code&amp;gt;analyze-string-result&amp;lt;/code&amp;gt;. This element and all its descendant elements have
 :             the namespace URI &amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions&amp;lt;/code&amp;gt;. The namespace
 :             prefix is &amp;lt;termref def="implementation-dependent"/&amp;gt;. The children of this element are a
 :             sequence of &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:non-match&amp;lt;/code&amp;gt; elements. This sequence
 :             is formed by breaking the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string into a sequence of strings,
 :             returning any substring that matches &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; as the content of a
 :                &amp;lt;code&amp;gt;match&amp;lt;/code&amp;gt; element, and any intervening substring as the content of a
 :                &amp;lt;code&amp;gt;non-match&amp;lt;/code&amp;gt; element.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;More specifically, the function starts at the beginning of the input string and attempts
 :             to find the first substring that matches the regular expression. If there are several
 :             matches, the first match is defined to be the one whose starting position comes first in
 :             the string. If several alternatives within the regular expression both match at the same
 :             position in the input string, then the match that is chosen is the first alternative
 :             that matches. For example, if the input string is &amp;lt;code&amp;gt;The quick brown fox jumps&amp;lt;/code&amp;gt;
 :             and the regular expression is &amp;lt;code&amp;gt;jump|jumps&amp;lt;/code&amp;gt;, then the match that is chosen is
 :                &amp;lt;code&amp;gt;jump&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Having found the first match, the instruction proceeds to find the second and subsequent
 :             matches by repeating the search, starting at the first &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; that was not included in the previous match.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The input string is thus partitioned into a sequence of substrings, some of which match
 :             the regular expression, others which do not match it. Each substring will contain at
 :             least one character. This sequence is represented in the result by the sequence of
 :                &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:non-match&amp;lt;/code&amp;gt; children of the returned element
 :             node; the string value of the &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;fn:non-match&amp;lt;/code&amp;gt; element
 :             will be the corresponding substring of &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt;, and the string value of the
 :             returned element node will therefore be the same as &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The content of an &amp;lt;code&amp;gt;fn:non-match&amp;lt;/code&amp;gt; element is always a single text node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The content of a &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; element, however, is in general a sequence of
 :             text nodes and &amp;lt;code&amp;gt;fn:group&amp;lt;/code&amp;gt; element children. An &amp;lt;code&amp;gt;fn:group&amp;lt;/code&amp;gt; element
 :             with a &amp;lt;code&amp;gt;nr&amp;lt;/code&amp;gt; attribute having the integer value &amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt; identifies the
 :             substring captured by the &amp;lt;var&amp;gt;Nth&amp;lt;/var&amp;gt; parenthesized sub-expression in the regular
 :             expression. For each capturing subexpression there will be at most one corresponding
 :                &amp;lt;code&amp;gt;fn:group&amp;lt;/code&amp;gt; element in each &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; element in the
 :             result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the function is called twice with the same arguments, it is &amp;lt;termref def="implementation-dependent"/&amp;gt; whether the two calls return the same element node
 :             or distinct (but deep equal) element nodes. In this respect it is
 :             &amp;lt;termref def="nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="J"&amp;gt;The base URI of the element nodes in the result is
 :          &amp;lt;termref def="implementation-dependent"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A schema is defined for the structure of the returned element, containing the
 :             definitions below. The returned element and its descendants will have type annotations
 :             obtained by validating the returned element against this schema, unless the function is
 :             used in an environment where type annotations are not supported (for example, a Basic
 :             XSLT Processor), in which case the elements will all be annotated as
 :                &amp;lt;code&amp;gt;xs:untyped&amp;lt;/code&amp;gt; and the attributes as &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p diff="add" at="M"&amp;gt;A free-standing copy of this schema can be found at &amp;lt;loc xmlns:xlink="http://www.w3.org/1999/xlink" href="analyze-string.xsd" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"&amp;gt;analyze-string.xsd&amp;lt;/loc&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;
 :             &amp;lt;eg xml:space="preserve"&amp;gt;&amp;amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;amp;gt;
 : &amp;amp;lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
 :     targetNamespace="http://www.w3.org/2005/xpath-functions"
 :     xmlns:fn="http://www.w3.org/2005/xpath-functions"
 :     elementFormDefault="qualified"&amp;amp;gt; 
 : 
 :     &amp;amp;lt;xs:element name="analyze-string-result" type="fn:analyze-string-result-type"/&amp;amp;gt;
 :     &amp;amp;lt;xs:element name="match" type="fn:match-type"/&amp;amp;gt;
 :     &amp;amp;lt;xs:element name="non-match" type="xs:string"/&amp;amp;gt;
 :     &amp;amp;lt;xs:element name="group" type="fn:group-type"/&amp;amp;gt;
 :     
 :     &amp;amp;lt;xs:complexType name="analyze-string-result-type" mixed="true"&amp;amp;gt;
 :         &amp;amp;lt;xs:choice minOccurs="0" maxOccurs="unbounded"&amp;amp;gt;
 :             &amp;amp;lt;xs:element ref="fn:match"/&amp;amp;gt;
 :             &amp;amp;lt;xs:element ref="fn:non-match"/&amp;amp;gt;
 :         &amp;amp;lt;/xs:choice&amp;amp;gt;
 :     &amp;amp;lt;/xs:complexType&amp;amp;gt;
 :         
 :     &amp;amp;lt;xs:complexType name="match-type" mixed="true"&amp;amp;gt;
 :         &amp;amp;lt;xs:sequence&amp;amp;gt;
 :             &amp;amp;lt;xs:element ref="fn:group" minOccurs="0" maxOccurs="unbounded"/&amp;amp;gt;
 :         &amp;amp;lt;/xs:sequence&amp;amp;gt;
 :     &amp;amp;lt;/xs:complexType&amp;amp;gt;
 :     
 :     &amp;amp;lt;xs:complexType name="group-type" mixed="true"&amp;amp;gt;
 :         &amp;amp;lt;xs:sequence&amp;amp;gt;
 :             &amp;amp;lt;xs:element ref="fn:group" minOccurs="0" maxOccurs="unbounded"/&amp;amp;gt;
 :         &amp;amp;lt;/xs:sequence&amp;amp;gt;
 :         &amp;amp;lt;xs:attribute name="nr" type="xs:positiveInteger"/&amp;amp;gt;
 :     &amp;amp;lt;/xs:complexType&amp;amp;gt;    
 :  
 : &amp;amp;lt;/xs:schema&amp;amp;gt;
 : &amp;lt;/eg&amp;gt;
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0002"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0001"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0003"/&amp;gt; if the supplied
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; matches a zero-length string, that is, if &amp;lt;code&amp;gt;fn:matches("",
 :                $pattern, $flags)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-analyze-string
 :)
declare function fn:analyze-string( $input as xs:string?,  $pattern as xs:string) as  element(fn:analyze-string-result) external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Analyzes a string using a regular expression, returning an XML structure that
 :             identifies which parts of the input string matched or failed to match the regular
 :             expression, and in the case of matched substrings, which substrings matched each
 :             capturing group in the regular expression.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="analyze-string" return-type="element(fn:analyze-string-result)" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="analyze-string" return-type="element(fn:analyze-string-result)" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="flags" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of calling the first version of this function (omitting the argument
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt;) is the same as the effect of calling the second version with the
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument set to a zero-length string. Flags are defined in
 :                &amp;lt;specref ref="flags"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument is interpreted in the same way as for the
 :                &amp;lt;code&amp;gt;fn:matches&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the empty sequence the function behaves as if
 :                &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; were the zero-length string. In this situation the result will be
 :             an element node with no children.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an element node whose local name is
 :                &amp;lt;code&amp;gt;analyze-string-result&amp;lt;/code&amp;gt;. This element and all its descendant elements have
 :             the namespace URI &amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions&amp;lt;/code&amp;gt;. The namespace
 :             prefix is &amp;lt;termref def="implementation-dependent"/&amp;gt;. The children of this element are a
 :             sequence of &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:non-match&amp;lt;/code&amp;gt; elements. This sequence
 :             is formed by breaking the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string into a sequence of strings,
 :             returning any substring that matches &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; as the content of a
 :                &amp;lt;code&amp;gt;match&amp;lt;/code&amp;gt; element, and any intervening substring as the content of a
 :                &amp;lt;code&amp;gt;non-match&amp;lt;/code&amp;gt; element.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;More specifically, the function starts at the beginning of the input string and attempts
 :             to find the first substring that matches the regular expression. If there are several
 :             matches, the first match is defined to be the one whose starting position comes first in
 :             the string. If several alternatives within the regular expression both match at the same
 :             position in the input string, then the match that is chosen is the first alternative
 :             that matches. For example, if the input string is &amp;lt;code&amp;gt;The quick brown fox jumps&amp;lt;/code&amp;gt;
 :             and the regular expression is &amp;lt;code&amp;gt;jump|jumps&amp;lt;/code&amp;gt;, then the match that is chosen is
 :                &amp;lt;code&amp;gt;jump&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Having found the first match, the instruction proceeds to find the second and subsequent
 :             matches by repeating the search, starting at the first &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; that was not included in the previous match.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The input string is thus partitioned into a sequence of substrings, some of which match
 :             the regular expression, others which do not match it. Each substring will contain at
 :             least one character. This sequence is represented in the result by the sequence of
 :                &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:non-match&amp;lt;/code&amp;gt; children of the returned element
 :             node; the string value of the &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;fn:non-match&amp;lt;/code&amp;gt; element
 :             will be the corresponding substring of &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt;, and the string value of the
 :             returned element node will therefore be the same as &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The content of an &amp;lt;code&amp;gt;fn:non-match&amp;lt;/code&amp;gt; element is always a single text node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The content of a &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; element, however, is in general a sequence of
 :             text nodes and &amp;lt;code&amp;gt;fn:group&amp;lt;/code&amp;gt; element children. An &amp;lt;code&amp;gt;fn:group&amp;lt;/code&amp;gt; element
 :             with a &amp;lt;code&amp;gt;nr&amp;lt;/code&amp;gt; attribute having the integer value &amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt; identifies the
 :             substring captured by the &amp;lt;var&amp;gt;Nth&amp;lt;/var&amp;gt; parenthesized sub-expression in the regular
 :             expression. For each capturing subexpression there will be at most one corresponding
 :                &amp;lt;code&amp;gt;fn:group&amp;lt;/code&amp;gt; element in each &amp;lt;code&amp;gt;fn:match&amp;lt;/code&amp;gt; element in the
 :             result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the function is called twice with the same arguments, it is &amp;lt;termref def="implementation-dependent"/&amp;gt; whether the two calls return the same element node
 :             or distinct (but deep equal) element nodes. In this respect it is
 :             &amp;lt;termref def="nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="J"&amp;gt;The base URI of the element nodes in the result is
 :          &amp;lt;termref def="implementation-dependent"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A schema is defined for the structure of the returned element, containing the
 :             definitions below. The returned element and its descendants will have type annotations
 :             obtained by validating the returned element against this schema, unless the function is
 :             used in an environment where type annotations are not supported (for example, a Basic
 :             XSLT Processor), in which case the elements will all be annotated as
 :                &amp;lt;code&amp;gt;xs:untyped&amp;lt;/code&amp;gt; and the attributes as &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p diff="add" at="M"&amp;gt;A free-standing copy of this schema can be found at &amp;lt;loc xmlns:xlink="http://www.w3.org/1999/xlink" href="analyze-string.xsd" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"&amp;gt;analyze-string.xsd&amp;lt;/loc&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;
 :             &amp;lt;eg xml:space="preserve"&amp;gt;&amp;amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;amp;gt;
 : &amp;amp;lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
 :     targetNamespace="http://www.w3.org/2005/xpath-functions"
 :     xmlns:fn="http://www.w3.org/2005/xpath-functions"
 :     elementFormDefault="qualified"&amp;amp;gt; 
 : 
 :     &amp;amp;lt;xs:element name="analyze-string-result" type="fn:analyze-string-result-type"/&amp;amp;gt;
 :     &amp;amp;lt;xs:element name="match" type="fn:match-type"/&amp;amp;gt;
 :     &amp;amp;lt;xs:element name="non-match" type="xs:string"/&amp;amp;gt;
 :     &amp;amp;lt;xs:element name="group" type="fn:group-type"/&amp;amp;gt;
 :     
 :     &amp;amp;lt;xs:complexType name="analyze-string-result-type" mixed="true"&amp;amp;gt;
 :         &amp;amp;lt;xs:choice minOccurs="0" maxOccurs="unbounded"&amp;amp;gt;
 :             &amp;amp;lt;xs:element ref="fn:match"/&amp;amp;gt;
 :             &amp;amp;lt;xs:element ref="fn:non-match"/&amp;amp;gt;
 :         &amp;amp;lt;/xs:choice&amp;amp;gt;
 :     &amp;amp;lt;/xs:complexType&amp;amp;gt;
 :         
 :     &amp;amp;lt;xs:complexType name="match-type" mixed="true"&amp;amp;gt;
 :         &amp;amp;lt;xs:sequence&amp;amp;gt;
 :             &amp;amp;lt;xs:element ref="fn:group" minOccurs="0" maxOccurs="unbounded"/&amp;amp;gt;
 :         &amp;amp;lt;/xs:sequence&amp;amp;gt;
 :     &amp;amp;lt;/xs:complexType&amp;amp;gt;
 :     
 :     &amp;amp;lt;xs:complexType name="group-type" mixed="true"&amp;amp;gt;
 :         &amp;amp;lt;xs:sequence&amp;amp;gt;
 :             &amp;amp;lt;xs:element ref="fn:group" minOccurs="0" maxOccurs="unbounded"/&amp;amp;gt;
 :         &amp;amp;lt;/xs:sequence&amp;amp;gt;
 :         &amp;amp;lt;xs:attribute name="nr" type="xs:positiveInteger"/&amp;amp;gt;
 :     &amp;amp;lt;/xs:complexType&amp;amp;gt;    
 :  
 : &amp;amp;lt;/xs:schema&amp;amp;gt;
 : &amp;lt;/eg&amp;gt;
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0002"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0001"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0003"/&amp;gt; if the supplied
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; matches a zero-length string, that is, if &amp;lt;code&amp;gt;fn:matches("",
 :                $pattern, $flags)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-analyze-string
 :)
declare function fn:analyze-string( $input as xs:string?,  $pattern as xs:string,  $flags as xs:string) as  element(fn:analyze-string-result) external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a list of environment variable names that are suitable for passing to
 :                &amp;lt;code&amp;gt;fn:environment-variable&amp;lt;/code&amp;gt;, as a (possibly empty) sequence of strings.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="available-environment-variables" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		environment variables.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of strings, being the names of the environment variables
 :             in the dynamic context in some &amp;lt;termref def="implementation-dependent"&amp;gt;implementation-dependent&amp;lt;/termref&amp;gt; order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;: that is, the
 :             set of available environment variables does not vary during evaluation.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a list of strings, containing no duplicates.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;It is intended that the strings in this list should be suitable for passing to
 :                &amp;lt;code&amp;gt;fn:environment-variable&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See also the note on security under the definition of the
 :                &amp;lt;code&amp;gt;fn:environment-variable&amp;lt;/code&amp;gt; function. If access to environment variables has
 :             been disabled, &amp;lt;code&amp;gt;fn:available-environment-variables&amp;lt;/code&amp;gt; always returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-available-environment-variables
 :)
declare function fn:available-environment-variables() as  xs:string* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the average of the values in the input sequence &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, that
 :             is, the sum of the values divided by the number of values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="avg" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; contains values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; they are cast
 :             to &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Duration values must either all be &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; values or must all
 :             be &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; values. For numeric values, the numeric promotion
 :             rules defined in &amp;lt;specref ref="op.numeric"/&amp;gt; are used to promote all values to a single
 :             common type. After these operations, &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; must contain items of a single
 :             type, which must be one of the four numeric types, &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; or
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; or one if its subtypes.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the average of the values as &amp;lt;code&amp;gt;sum($arg) div
 :             count($arg)&amp;lt;/code&amp;gt;; but the implementation may use an otherwise equivalent algorithm
 :             that avoids arithmetic overflow.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A type error is raised &amp;lt;errorref class="RG" code="0006"/&amp;gt; if the input sequence contains
 :             items of incompatible types, as described above.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-avg
 :)
declare function fn:avg($arg as xs:anyAtomicType*) as  xs:anyAtomicType? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Computes the effective boolean value of the sequence &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="boolean" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function computes the effective boolean value of a sequence, defined according to
 :             the following rules. See also &amp;lt;xspecref spec="XP30" ref="id-ebv"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, &amp;lt;code&amp;gt;fn:boolean&amp;lt;/code&amp;gt; returns
 :                      &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a sequence whose first item is a node,
 :                      &amp;lt;code&amp;gt;fn:boolean&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a singleton value of type &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; or a
 :                   derived from &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;fn:boolean&amp;lt;/code&amp;gt; returns
 :                      &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a singleton value of type &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; or a type
 :                   derived from &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; or a type derived from
 :                      &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt;,
 :                      &amp;lt;code&amp;gt;fn:boolean&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt; if the operand value has
 :                   zero length; otherwise it returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a singleton value of any numeric type or a type derived
 :                   from a numeric type, &amp;lt;code&amp;gt;fn:boolean&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt; if the
 :                   operand value is &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; or is numerically equal to zero; otherwise it
 :                   returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;In all other cases, &amp;lt;code&amp;gt;fn:boolean&amp;lt;/code&amp;gt; raises a type error &amp;lt;errorref class="RG" code="0006"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;The static semantics of this function are described in [Formal
 :             Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of this function is not necessarily the same as &amp;lt;code&amp;gt;$arg cast as
 :                xs:boolean&amp;lt;/code&amp;gt;. For example, &amp;lt;code&amp;gt;fn:boolean("false")&amp;lt;/code&amp;gt; returns the value
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; whereas &amp;lt;code&amp;gt;"false" cast as xs:boolean&amp;lt;/code&amp;gt; (which can also be
 :             written &amp;lt;code&amp;gt;xs:boolean("false")&amp;lt;/code&amp;gt;) returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;let &amp;lt;code&amp;gt;$abc&amp;lt;/code&amp;gt; := &amp;lt;code&amp;gt;("a", "b", "")&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;code&amp;gt;fn:boolean($abc)&amp;lt;/code&amp;gt; raises a type error &amp;lt;errorref class="RG" code="0006"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:boolean($abc[1])&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:boolean($abc[0])&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;false()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:boolean($abc[3])&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;false()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-boolean
 :)
declare function fn:boolean($arg as item()*) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Rounds &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; upwards to a whole number.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="ceiling" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;General rules: see &amp;lt;specref ref="numeric-value-functions"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the smallest (closest to negative infinity) number with no
 :             fractional part that is not less than the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is one of the four numeric types &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; the type
 :             of the result is the same as the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. If the type of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a type derived from one of the numeric types, the result is an
 :             instance of the base numeric type.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; arguments, if the argument is
 :             positive zero, then positive zero is returned. If the argument is negative zero, then
 :             negative zero is returned. If the argument is less than zero and greater than -1,
 :             negative zero is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:ceiling(10.5)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;11&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:ceiling(-10.5)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;-10&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-ceiling
 :)
declare function fn:ceiling($arg as numeric?) as  numeric? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if two strings are equal, considered codepoint-by-codepoint.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="codepoint-equal" return-type="xs:boolean?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="comparand1" type="xs:string?"/&amp;gt;&amp;lt;arg name="comparand2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If either argument is the empty sequence, the function returns the empty sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt; depending on
 :             whether the value of &amp;lt;code&amp;gt;$comparand1&amp;lt;/code&amp;gt; is equal to the value of
 :                &amp;lt;code&amp;gt;$comparand2&amp;lt;/code&amp;gt;, according to the Unicode codepoint collation
 :                (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function allows &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values to be compared without having to
 :             specify the Unicode codepoint collation.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-codepoint-equal
 :)
declare function fn:codepoint-equal( $comparand1 as xs:string?,  $comparand2 as xs:string?) as  xs:boolean? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Creates an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; from a sequence of &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="codepoints-to-string" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:integer*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the string made up from the &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; whose Unicode &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt; are
 :             supplied in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. This will be the zero-length string if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;
 :             is the empty sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="CH" code="0001"/&amp;gt; if any of the codepoints in
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a permitted XML character.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-codepoints-to-string
 :)
declare function fn:codepoints-to-string($arg as xs:integer*) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of nodes representing a collection of documents indentified
 :             by a collection URI; or a default collection if no URI is supplied.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="collection" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="collection" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		available node collections, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function takes an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; as argument and returns a sequence of
 :             nodes obtained by interpreting &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; as an &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; and
 :             resolving it according to the mapping specified in &amp;lt;term&amp;gt;Available node collections&amp;lt;/term&amp;gt;
 :             described in &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;term&amp;gt;Available node collections&amp;lt;/term&amp;gt; provides a mapping from this string to a sequence
 :             of nodes, the function returns that sequence. If &amp;lt;term&amp;gt;Available node collections&amp;lt;/term&amp;gt; maps
 :             the string to an empty sequence, then the function returns an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not specified, the function returns the sequence of the nodes in
 :             the default node collection in the dynamic context. See &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a relative &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;, it is resolved
 :             against the value of the base-URI property from the static context. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function behaves as if it had been
 :             called without an argument. See above.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;By default, this function is &amp;lt;termref def="deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;. 
 :             This means that repeated
 :             calls on the function with the same argument will return the same result. However, for
 :             performance reasons, implementations may provide a user option to evaluate the function
 :             without a guarantee of determinism. The manner in which any such option is provided is
 :                &amp;lt;termref def="implementation-defined"/&amp;gt;. If the user has not selected such an option,
 :             a call to this function must either return a deterministic result or must raise a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error
 :                &amp;lt;errorref class="DC" code="0003"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="G"&amp;gt;There is no requirement that the returned nodes should be in document
 :             order, nor is there a requirement that the result should contain no duplicates.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if no URI is supplied and the
 :             value of the default collection is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="J"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if &amp;lt;term&amp;gt;available
 :                node collections&amp;lt;/term&amp;gt; provides no mapping for the absolutized URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0004"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a
 :             valid &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-collection
 :)
declare function fn:collection() as  node()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of nodes representing a collection of documents indentified
 :             by a collection URI; or a default collection if no URI is supplied.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="collection" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="collection" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		available node collections, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function takes an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; as argument and returns a sequence of
 :             nodes obtained by interpreting &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; as an &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; and
 :             resolving it according to the mapping specified in &amp;lt;term&amp;gt;Available node collections&amp;lt;/term&amp;gt;
 :             described in &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;term&amp;gt;Available node collections&amp;lt;/term&amp;gt; provides a mapping from this string to a sequence
 :             of nodes, the function returns that sequence. If &amp;lt;term&amp;gt;Available node collections&amp;lt;/term&amp;gt; maps
 :             the string to an empty sequence, then the function returns an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not specified, the function returns the sequence of the nodes in
 :             the default node collection in the dynamic context. See &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a relative &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;, it is resolved
 :             against the value of the base-URI property from the static context. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function behaves as if it had been
 :             called without an argument. See above.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;By default, this function is &amp;lt;termref def="deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;. 
 :             This means that repeated
 :             calls on the function with the same argument will return the same result. However, for
 :             performance reasons, implementations may provide a user option to evaluate the function
 :             without a guarantee of determinism. The manner in which any such option is provided is
 :                &amp;lt;termref def="implementation-defined"/&amp;gt;. If the user has not selected such an option,
 :             a call to this function must either return a deterministic result or must raise a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error
 :                &amp;lt;errorref class="DC" code="0003"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="G"&amp;gt;There is no requirement that the returned nodes should be in document
 :             order, nor is there a requirement that the result should contain no duplicates.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if no URI is supplied and the
 :             value of the default collection is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="J"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if &amp;lt;term&amp;gt;available
 :                node collections&amp;lt;/term&amp;gt; provides no mapping for the absolutized URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0004"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a
 :             valid &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-collection
 :)
declare function fn:collection($arg as xs:string?) as  node()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns -1, 0, or 1, depending on whether &amp;lt;code&amp;gt;$comparand1&amp;lt;/code&amp;gt; collates
 :             before, equal to, or after &amp;lt;code&amp;gt;$comparand2&amp;lt;/code&amp;gt; according to the rules of a selected
 :             collation.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="compare" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="comparand1" type="xs:string?"/&amp;gt;&amp;lt;arg name="comparand2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="compare" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="comparand1" type="xs:string?"/&amp;gt;&amp;lt;arg name="comparand2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns -1, 0, or 1, depending on whether the value of the &amp;lt;code&amp;gt;$comparand1&amp;lt;/code&amp;gt; is
 :             respectively less than, equal to, or greater than the value of &amp;lt;code&amp;gt;$comparand2&amp;lt;/code&amp;gt;,
 :             according to the rules of the collation that is used. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If either &amp;lt;code&amp;gt;$comparand1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$comparand2&amp;lt;/code&amp;gt; is the empty sequence,
 :             the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function, called with the first signature, defines the semantics of the "eq", "ne",
 :             "gt", "lt", "le" and "ge" operators on &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:compare('abc', 'abc')&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:compare('Strasse', 'Straße')&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;. &amp;lt;emph&amp;gt;(Assuming the default collation includes provisions that equate
 :                      &amp;lt;quote&amp;gt;ss&amp;lt;/quote&amp;gt; and the (German) character &amp;lt;quote&amp;gt;ß&amp;lt;/quote&amp;gt;
 :                      (&amp;lt;quote&amp;gt;sharp-s&amp;lt;/quote&amp;gt;). Otherwise, the returned value depends on the
 :                   semantics of the default collation.).&amp;lt;/emph&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:compare('Strasse', 'Straße',
 :                   'http://example.com/deutsch')&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;. &amp;lt;emph&amp;gt;(Assuming the collation identified by the URI
 :                      &amp;lt;code&amp;gt;http://example.com/deutsch&amp;lt;/code&amp;gt; includes provisions that equate
 :                      &amp;lt;quote&amp;gt;ss&amp;lt;/quote&amp;gt; and the (German) character &amp;lt;quote&amp;gt;ß&amp;lt;/quote&amp;gt;
 :                      (&amp;lt;quote&amp;gt;sharp-s&amp;lt;/quote&amp;gt;). Otherwise, the returned value depends on the
 :                   semantics of that collation.).&amp;lt;/emph&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:compare('Strassen', 'Straße')&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;. &amp;lt;emph&amp;gt;(Assuming the default collation includes provisions that treat
 :                   differences between &amp;lt;quote&amp;gt;ss&amp;lt;/quote&amp;gt; and the (German) character &amp;lt;quote&amp;gt;ß&amp;lt;/quote&amp;gt;
 :                      (&amp;lt;quote&amp;gt;sharp-s&amp;lt;/quote&amp;gt;) with less strength than the differences between the
 :                   base characters, such as the final &amp;lt;quote&amp;gt;n&amp;lt;/quote&amp;gt;. ).&amp;lt;/emph&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-compare
 :)
declare function fn:compare($comparand1 as xs:string?,  $comparand2 as xs:string?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns -1, 0, or 1, depending on whether &amp;lt;code&amp;gt;$comparand1&amp;lt;/code&amp;gt; collates
 :             before, equal to, or after &amp;lt;code&amp;gt;$comparand2&amp;lt;/code&amp;gt; according to the rules of a selected
 :             collation.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="compare" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="comparand1" type="xs:string?"/&amp;gt;&amp;lt;arg name="comparand2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="compare" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="comparand1" type="xs:string?"/&amp;gt;&amp;lt;arg name="comparand2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns -1, 0, or 1, depending on whether the value of the &amp;lt;code&amp;gt;$comparand1&amp;lt;/code&amp;gt; is
 :             respectively less than, equal to, or greater than the value of &amp;lt;code&amp;gt;$comparand2&amp;lt;/code&amp;gt;,
 :             according to the rules of the collation that is used. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If either &amp;lt;code&amp;gt;$comparand1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$comparand2&amp;lt;/code&amp;gt; is the empty sequence,
 :             the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function, called with the first signature, defines the semantics of the "eq", "ne",
 :             "gt", "lt", "le" and "ge" operators on &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:compare('abc', 'abc')&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:compare('Strasse', 'Straße')&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;. &amp;lt;emph&amp;gt;(Assuming the default collation includes provisions that equate
 :                      &amp;lt;quote&amp;gt;ss&amp;lt;/quote&amp;gt; and the (German) character &amp;lt;quote&amp;gt;ß&amp;lt;/quote&amp;gt;
 :                      (&amp;lt;quote&amp;gt;sharp-s&amp;lt;/quote&amp;gt;). Otherwise, the returned value depends on the
 :                   semantics of the default collation.).&amp;lt;/emph&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:compare('Strasse', 'Straße',
 :                   'http://example.com/deutsch')&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;. &amp;lt;emph&amp;gt;(Assuming the collation identified by the URI
 :                      &amp;lt;code&amp;gt;http://example.com/deutsch&amp;lt;/code&amp;gt; includes provisions that equate
 :                      &amp;lt;quote&amp;gt;ss&amp;lt;/quote&amp;gt; and the (German) character &amp;lt;quote&amp;gt;ß&amp;lt;/quote&amp;gt;
 :                      (&amp;lt;quote&amp;gt;sharp-s&amp;lt;/quote&amp;gt;). Otherwise, the returned value depends on the
 :                   semantics of that collation.).&amp;lt;/emph&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:compare('Strassen', 'Straße')&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;. &amp;lt;emph&amp;gt;(Assuming the default collation includes provisions that treat
 :                   differences between &amp;lt;quote&amp;gt;ss&amp;lt;/quote&amp;gt; and the (German) character &amp;lt;quote&amp;gt;ß&amp;lt;/quote&amp;gt;
 :                      (&amp;lt;quote&amp;gt;sharp-s&amp;lt;/quote&amp;gt;) with less strength than the differences between the
 :                   base characters, such as the final &amp;lt;quote&amp;gt;n&amp;lt;/quote&amp;gt;. ).&amp;lt;/emph&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-compare
 :)
declare function fn:compare( $comparand1 as xs:string?,  $comparand2 as xs:string?,  $collation as xs:string) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the concatenation of the string values of the arguments.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;
 :          The two-argument form of this function defines the semantics of the "||" operator.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="concat" return-type="xs:string" isOp="yes" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:anyAtomicType?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:anyAtomicType?"/&amp;gt;&amp;lt;arg name="..." type="xs:anyAtomicType?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function accepts two or more &amp;lt;code&amp;gt;xs:anyAtomicType&amp;lt;/code&amp;gt; arguments and casts each
 :             one to &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;. The function returns the &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; that is
 :             the concatenation of the values of its arguments after conversion. If any argument is
 :             the empty sequence, that argument is treated as the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E19"&amp;gt;The &amp;lt;code&amp;gt;fn:concat&amp;lt;/code&amp;gt; function is specified to allow two or
 :             more arguments, which are concatenated together. This is the only function specified in
 :             this document that allows a variable number of arguments. This capability is retained
 :             for compatibility with &amp;lt;bibref ref="xpath"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-concat
 :)
declare function fn:concat( $arg1 as xs:anyAtomicType?,  $arg2 as xs:anyAtomicType?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the string &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; contains &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; as a
 :             substring, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="contains" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="contains" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; is the zero-length string, the function returns
 :                &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; indicating whether or not the value of
 :                &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; contains (at the beginning, at the end, or anywhere within) at
 :             least one sequence of collation units that provides a &amp;lt;term&amp;gt;minimal match&amp;lt;/term&amp;gt; to the
 :             collation units in the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, according to the collation that is
 :             used.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;&amp;lt;term&amp;gt;Minimal match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-contains
 :)
declare function fn:contains($arg1 as xs:string?,  $arg2 as xs:string?) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the string &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; contains &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; as a
 :             substring, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="contains" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="contains" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; is the zero-length string, the function returns
 :                &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; indicating whether or not the value of
 :                &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; contains (at the beginning, at the end, or anywhere within) at
 :             least one sequence of collation units that provides a &amp;lt;term&amp;gt;minimal match&amp;lt;/term&amp;gt; to the
 :             collation units in the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, according to the collation that is
 :             used.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;&amp;lt;term&amp;gt;Minimal match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-contains
 :)
declare function fn:contains( $arg1 as xs:string?,  $arg2 as xs:string?,  $collation as xs:string) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of items in a sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="count" return-type="xs:integer" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the number of items in the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns 0 if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-count
 :)
declare function fn:count($arg as item()*) as  xs:integer external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value created by combining an
 :                &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; and an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="dateTime" return-type="xs:dateTime?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:date?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:time?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If either &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence the function
 :             returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; whose date component is
 :             equal to &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; and whose time component is equal to &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The timezone of the result is computed as follows:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If neither argument has a timezone, the result has no timezone.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If exactly one of the arguments has a timezone, or if both arguments have the same
 :                   timezone, the result has this timezone.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0008"/&amp;gt; if the two arguments both have
 :             timezones and the timezones are different. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-dateTime
 :)
declare function fn:dateTime($arg1 as xs:date?,  $arg2 as xs:time?) as  xs:dateTime? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the day component of an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="day-from-date" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:date?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; between 1 and 31, both
 :             inclusive, representing the day component in the localized value of
 :             &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:day-from-date(xs:date("1999-05-31-05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;31&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:day-from-date(xs:date("2000-01-01+05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-day-from-date
 :)
declare function fn:day-from-date($arg as xs:date?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of days in a duration.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="days-from-duration" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:duration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; representing the days
 :             component in the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. The result is obtained by casting
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; to an &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; (see &amp;lt;specref ref="casting-to-durations"/&amp;gt;) and then computing the days component as described in
 :                &amp;lt;specref ref="canonical-dayTimeDuration"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a negative duration then the result will be negative..&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; the function returns 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:days-from-duration(xs:dayTimeDuration("P3DT10H"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;3&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:days-from-duration(xs:dayTimeDuration("P3DT55H"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;5&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:days-from-duration(xs:yearMonthDuration("P3Y5M"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-days-from-duration
 :)
declare function fn:days-from-duration($arg as xs:duration?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; This function assesses whether two sequences are deep-equal to each other. To
 :             be deep-equal, they must contain items that are pairwise deep-equal; and for two items
 :             to be deep-equal, they must either be atomic values that compare equal, or nodes of the
 :             same kind, with the same name, whose children are deep-equal.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="deep-equal" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="parameter1" type="item()*"/&amp;gt;&amp;lt;arg name="parameter2" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="deep-equal" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="parameter1" type="item()*"/&amp;gt;&amp;lt;arg name="parameter2" type="item()*"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; argument identifies a collation which is used at all levels
 :             of recursion when strings are compared (but not when names are compared), according to
 :             the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the two sequences are both empty, the function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the two sequences are of different lengths, the function returns
 :             &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the two sequences are of the same length, the function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if
 :             and only if every item in the sequence &amp;lt;code&amp;gt;$parameter1&amp;lt;/code&amp;gt; is deep-equal to the
 :             item at the same position in the sequence &amp;lt;code&amp;gt;$parameter2&amp;lt;/code&amp;gt;. The rules for
 :             deciding whether two items are deep-equal follow.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Call the two items &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; respectively.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; are both atomic values, they are deep-equal if
 :             and only if &amp;lt;code&amp;gt;($i1 eq $i2)&amp;lt;/code&amp;gt; is &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;, or if both values are
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;. If the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator is not defined for &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt;
 :             and &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt;, the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If one of the pair &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; is an atomic value and the
 :             other is not,
 :             &amp;lt;!--&amp;lt;phrase diff="add" at="MAP"&amp;gt;or if one is a node and the other is not, &amp;lt;/phrase&amp;gt;--&amp;gt;
 :             the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; are both nodes, they are compared as described
 :             below:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the two nodes are of different kinds, the result is &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the two nodes are both document nodes then they are deep-equal if and only if
 :                   the sequence &amp;lt;code&amp;gt;$i1/(*|text())&amp;lt;/code&amp;gt; is deep-equal to the sequence
 :                      &amp;lt;code&amp;gt;$i2/(*|text())&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; If the two nodes are both element nodes then they are deep-equal if and only if
 :                   all of the following conditions are satisfied:&amp;lt;/p&amp;gt;&amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The two nodes have the same name, that is &amp;lt;code&amp;gt;(node-name($i1) eq
 :                            node-name($i2))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;!-- bug 17252 --&amp;gt;&amp;lt;p diff="chg" at="L"&amp;gt;Either both nodes are both annotated as having simple content or both nodes are
 :                         annotated as having complex content. For this purpose "simple content" means either a simple
 :                      type or a complex type with simple content; "complex content" means a complex type whose variety
 :                      is mixed, element-only, or empty.&amp;lt;/p&amp;gt;&amp;lt;note diff="add" at="L"&amp;gt;&amp;lt;p&amp;gt;It is a consequence of this rule that validating a document
 :                      &amp;lt;var&amp;gt;D&amp;lt;/var&amp;gt; against a schema will usually (but not necessarily) result in a document that is not deep-equal
 :                         to &amp;lt;var&amp;gt;D&amp;lt;/var&amp;gt;. The exception is when the schema allows all elements to have mixed content.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The two nodes have the same number of attributes, and for every attribute
 :                            &amp;lt;code&amp;gt;$a1&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$i1/@*&amp;lt;/code&amp;gt; there exists an attribute
 :                            &amp;lt;code&amp;gt;$a2&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$i2/@*&amp;lt;/code&amp;gt; such that &amp;lt;code&amp;gt;$a1&amp;lt;/code&amp;gt; and
 :                            &amp;lt;code&amp;gt;$a2&amp;lt;/code&amp;gt; are deep-equal.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; One of the following conditions holds:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Both element nodes are annotated as having simple content 
 :                               &amp;lt;phrase diff="add" at="L"&amp;gt;(as defined in 3(b) above)&amp;lt;/phrase&amp;gt;, and
 :                               the typed value of &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; is deep-equal to the typed value
 :                               of &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Both element nodes have a type annotation that is &amp;lt;phrase diff="chg" at="L"&amp;gt;a complex type with
 :                               variety element-only, and the sequence &amp;lt;code&amp;gt;$i1/*&amp;lt;/code&amp;gt; is
 :                               deep-equal to the sequence &amp;lt;code&amp;gt;$i2/*&amp;lt;/code&amp;gt;.&amp;lt;/phrase&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Both element nodes have a type annotation that is &amp;lt;phrase diff="chg" at="L"&amp;gt;a complex type with
 :                               variety mixed&amp;lt;/phrase&amp;gt;, and the sequence &amp;lt;code&amp;gt;$i1/(*|text())&amp;lt;/code&amp;gt; is
 :                               deep-equal to the sequence &amp;lt;code&amp;gt;$i2/(*|text())&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Both element nodes have a type annotation that is &amp;lt;phrase diff="chg" at="L"&amp;gt;a complex type with
 :                               variety empty&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the two nodes are both attribute nodes then they are deep-equal if and only if
 :                   both the following conditions are satisfied:&amp;lt;/p&amp;gt;&amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The two nodes have the same name, that is &amp;lt;code&amp;gt;(node-name($i1) eq
 :                            node-name($i2))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The typed value of &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; is deep-equal to the typed value of
 :                            &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; If the two nodes are both processing instruction nodes&amp;lt;phrase diff="del" at="A-E42"&amp;gt; or namespace bindings&amp;lt;/phrase&amp;gt;, then they are deep-equal if and
 :                   only if both the following conditions are satisfied:&amp;lt;/p&amp;gt;&amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The two nodes have the same name, that is &amp;lt;code&amp;gt;(node-name($i1) eq
 :                            node-name($i2))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The string value of &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; is equal to the string value of
 :                            &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="add" at="A-E42"&amp;gt; If the two nodes are both namespace nodes, then they are deep-equal if and only
 :                   if both the following conditions are satisfied:&amp;lt;/p&amp;gt;&amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="add" at="A-E42"&amp;gt;The two nodes either have the same name or are both nameless, that is
 :                            &amp;lt;code&amp;gt;fn:deep-equal(node-name($i1), node-name($i2))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="add" at="A-E42"&amp;gt;The string value of &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; is equal to the string value of
 :                            &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; when compared using the Unicode codepoint collation.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the two nodes are both text nodes or comment nodes, then they are deep-equal if
 :                   and only if their string-values are equal.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;type&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="TY" code="0015" type="type"/&amp;gt; 
 :             if either input sequence contains a function item.
 :             &amp;lt;!--&amp;lt;phrase diff="add" at="MAP"&amp;gt;that is not a map&amp;lt;/phrase&amp;gt;,--&amp;gt;
 :          &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-deep-equal
 :)
declare function fn:deep-equal($parameter1 as item()*,  $parameter2 as item()*) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; This function assesses whether two sequences are deep-equal to each other. To
 :             be deep-equal, they must contain items that are pairwise deep-equal; and for two items
 :             to be deep-equal, they must either be atomic values that compare equal, or nodes of the
 :             same kind, with the same name, whose children are deep-equal.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="deep-equal" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="parameter1" type="item()*"/&amp;gt;&amp;lt;arg name="parameter2" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="deep-equal" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="parameter1" type="item()*"/&amp;gt;&amp;lt;arg name="parameter2" type="item()*"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; argument identifies a collation which is used at all levels
 :             of recursion when strings are compared (but not when names are compared), according to
 :             the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the two sequences are both empty, the function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the two sequences are of different lengths, the function returns
 :             &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the two sequences are of the same length, the function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if
 :             and only if every item in the sequence &amp;lt;code&amp;gt;$parameter1&amp;lt;/code&amp;gt; is deep-equal to the
 :             item at the same position in the sequence &amp;lt;code&amp;gt;$parameter2&amp;lt;/code&amp;gt;. The rules for
 :             deciding whether two items are deep-equal follow.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Call the two items &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; respectively.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; are both atomic values, they are deep-equal if
 :             and only if &amp;lt;code&amp;gt;($i1 eq $i2)&amp;lt;/code&amp;gt; is &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;, or if both values are
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;. If the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator is not defined for &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt;
 :             and &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt;, the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If one of the pair &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; is an atomic value and the
 :             other is not,
 :             &amp;lt;!--&amp;lt;phrase diff="add" at="MAP"&amp;gt;or if one is a node and the other is not, &amp;lt;/phrase&amp;gt;--&amp;gt;
 :             the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; are both nodes, they are compared as described
 :             below:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the two nodes are of different kinds, the result is &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the two nodes are both document nodes then they are deep-equal if and only if
 :                   the sequence &amp;lt;code&amp;gt;$i1/(*|text())&amp;lt;/code&amp;gt; is deep-equal to the sequence
 :                      &amp;lt;code&amp;gt;$i2/(*|text())&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; If the two nodes are both element nodes then they are deep-equal if and only if
 :                   all of the following conditions are satisfied:&amp;lt;/p&amp;gt;&amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The two nodes have the same name, that is &amp;lt;code&amp;gt;(node-name($i1) eq
 :                            node-name($i2))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;!-- bug 17252 --&amp;gt;&amp;lt;p diff="chg" at="L"&amp;gt;Either both nodes are both annotated as having simple content or both nodes are
 :                         annotated as having complex content. For this purpose "simple content" means either a simple
 :                      type or a complex type with simple content; "complex content" means a complex type whose variety
 :                      is mixed, element-only, or empty.&amp;lt;/p&amp;gt;&amp;lt;note diff="add" at="L"&amp;gt;&amp;lt;p&amp;gt;It is a consequence of this rule that validating a document
 :                      &amp;lt;var&amp;gt;D&amp;lt;/var&amp;gt; against a schema will usually (but not necessarily) result in a document that is not deep-equal
 :                         to &amp;lt;var&amp;gt;D&amp;lt;/var&amp;gt;. The exception is when the schema allows all elements to have mixed content.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The two nodes have the same number of attributes, and for every attribute
 :                            &amp;lt;code&amp;gt;$a1&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$i1/@*&amp;lt;/code&amp;gt; there exists an attribute
 :                            &amp;lt;code&amp;gt;$a2&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$i2/@*&amp;lt;/code&amp;gt; such that &amp;lt;code&amp;gt;$a1&amp;lt;/code&amp;gt; and
 :                            &amp;lt;code&amp;gt;$a2&amp;lt;/code&amp;gt; are deep-equal.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; One of the following conditions holds:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Both element nodes are annotated as having simple content 
 :                               &amp;lt;phrase diff="add" at="L"&amp;gt;(as defined in 3(b) above)&amp;lt;/phrase&amp;gt;, and
 :                               the typed value of &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; is deep-equal to the typed value
 :                               of &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Both element nodes have a type annotation that is &amp;lt;phrase diff="chg" at="L"&amp;gt;a complex type with
 :                               variety element-only, and the sequence &amp;lt;code&amp;gt;$i1/*&amp;lt;/code&amp;gt; is
 :                               deep-equal to the sequence &amp;lt;code&amp;gt;$i2/*&amp;lt;/code&amp;gt;.&amp;lt;/phrase&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Both element nodes have a type annotation that is &amp;lt;phrase diff="chg" at="L"&amp;gt;a complex type with
 :                               variety mixed&amp;lt;/phrase&amp;gt;, and the sequence &amp;lt;code&amp;gt;$i1/(*|text())&amp;lt;/code&amp;gt; is
 :                               deep-equal to the sequence &amp;lt;code&amp;gt;$i2/(*|text())&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Both element nodes have a type annotation that is &amp;lt;phrase diff="chg" at="L"&amp;gt;a complex type with
 :                               variety empty&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the two nodes are both attribute nodes then they are deep-equal if and only if
 :                   both the following conditions are satisfied:&amp;lt;/p&amp;gt;&amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The two nodes have the same name, that is &amp;lt;code&amp;gt;(node-name($i1) eq
 :                            node-name($i2))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The typed value of &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; is deep-equal to the typed value of
 :                            &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; If the two nodes are both processing instruction nodes&amp;lt;phrase diff="del" at="A-E42"&amp;gt; or namespace bindings&amp;lt;/phrase&amp;gt;, then they are deep-equal if and
 :                   only if both the following conditions are satisfied:&amp;lt;/p&amp;gt;&amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The two nodes have the same name, that is &amp;lt;code&amp;gt;(node-name($i1) eq
 :                            node-name($i2))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The string value of &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; is equal to the string value of
 :                            &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="add" at="A-E42"&amp;gt; If the two nodes are both namespace nodes, then they are deep-equal if and only
 :                   if both the following conditions are satisfied:&amp;lt;/p&amp;gt;&amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="add" at="A-E42"&amp;gt;The two nodes either have the same name or are both nameless, that is
 :                            &amp;lt;code&amp;gt;fn:deep-equal(node-name($i1), node-name($i2))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="add" at="A-E42"&amp;gt;The string value of &amp;lt;code&amp;gt;$i1&amp;lt;/code&amp;gt; is equal to the string value of
 :                            &amp;lt;code&amp;gt;$i2&amp;lt;/code&amp;gt; when compared using the Unicode codepoint collation.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the two nodes are both text nodes or comment nodes, then they are deep-equal if
 :                   and only if their string-values are equal.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;type&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="TY" code="0015" type="type"/&amp;gt; 
 :             if either input sequence contains a function item.
 :             &amp;lt;!--&amp;lt;phrase diff="add" at="MAP"&amp;gt;that is not a map&amp;lt;/phrase&amp;gt;,--&amp;gt;
 :          &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-deep-equal
 :)
declare function fn:deep-equal( $parameter1 as item()*,  $parameter2 as item()*,  $collation as xs:string) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the values that appear in a sequence, with duplicates eliminated.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="distinct-values" return-type="xs:anyAtomicType*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="distinct-values" return-type="xs:anyAtomicType*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the sequence that results from removing from &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; all
 :             but one of a set of values that are equal to one another. Values are compared using the
 :                &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator, subject to the caveats defined below.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; are compared as if they were of type
 :                &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Values that cannot be compared, because the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator is not defined for
 :             their types, are considered to be distinct.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;. This collation is used when string comparison is
 :             required.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; values, positive zero is equal to
 :             negative zero and, although &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; does not equal itself, if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;
 :             contains multiple &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; values a single &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; values do not
 :             have a timezone, they are considered to have the implicit timezone provided by the
 :             dynamic context for the purpose of comparison. Note that &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; values can compare equal even if their
 :             timezones are different.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The order in which the sequence of values is returned is &amp;lt;termref def="implementation-dependent"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Which value of a set of values that compare equal is returned is &amp;lt;termref def="implementation-dependent"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;The static type of the result is a sequence of prime types as defined
 :             in [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;change xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E44"&amp;gt;
 :             &amp;lt;p&amp;gt;If the input sequence contains values of different numeric types that differ from
 :                each other by small amounts, then the eq operator is not transitive, because of
 :                rounding effects occurring during type promotion. In the situation where the input
 :                contains three values &amp;lt;code&amp;gt;A&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;B&amp;lt;/code&amp;gt;, and &amp;lt;code&amp;gt;C&amp;lt;/code&amp;gt; such that
 :                   &amp;lt;code&amp;gt;A eq B&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;B eq C&amp;lt;/code&amp;gt;, but &amp;lt;code&amp;gt;A ne C&amp;lt;/code&amp;gt;, then the number
 :                of items in the result of the function (as well as the choice of which items are
 :                returned) is &amp;lt;termref def="implementation-dependent"/&amp;gt;, subject only to the
 :                constraints that (a) no two items in the result sequence compare equal to each other,
 :                and (b) every input item that does not appear in the result sequence compares equal
 :                to some item that does appear in the result sequence.&amp;lt;/p&amp;gt;
 : 
 :             &amp;lt;p&amp;gt;For example, this arises when computing:&amp;lt;/p&amp;gt;
 : 
 :             &amp;lt;eg xml:space="preserve"&amp;gt;    distinct-values(
 :             (xs:float('1.0'),
 :             xs:decimal('1.0000000000100000000001',
 :             xs:double( '1.00000000001'))&amp;lt;/eg&amp;gt;
 : 
 :             &amp;lt;p&amp;gt;because the values of type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; both
 :                compare equal to the value of type &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; but not equal to each
 :                other. &amp;lt;/p&amp;gt;
 :          &amp;lt;/change&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-distinct-values
 :)
declare function fn:distinct-values($arg as xs:anyAtomicType*) as  xs:anyAtomicType* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the values that appear in a sequence, with duplicates eliminated.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="distinct-values" return-type="xs:anyAtomicType*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="distinct-values" return-type="xs:anyAtomicType*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the sequence that results from removing from &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; all
 :             but one of a set of values that are equal to one another. Values are compared using the
 :                &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator, subject to the caveats defined below.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; are compared as if they were of type
 :                &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Values that cannot be compared, because the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator is not defined for
 :             their types, are considered to be distinct.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;. This collation is used when string comparison is
 :             required.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; values, positive zero is equal to
 :             negative zero and, although &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; does not equal itself, if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;
 :             contains multiple &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; values a single &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; values do not
 :             have a timezone, they are considered to have the implicit timezone provided by the
 :             dynamic context for the purpose of comparison. Note that &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; values can compare equal even if their
 :             timezones are different.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The order in which the sequence of values is returned is &amp;lt;termref def="implementation-dependent"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Which value of a set of values that compare equal is returned is &amp;lt;termref def="implementation-dependent"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;The static type of the result is a sequence of prime types as defined
 :             in [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;change xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E44"&amp;gt;
 :             &amp;lt;p&amp;gt;If the input sequence contains values of different numeric types that differ from
 :                each other by small amounts, then the eq operator is not transitive, because of
 :                rounding effects occurring during type promotion. In the situation where the input
 :                contains three values &amp;lt;code&amp;gt;A&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;B&amp;lt;/code&amp;gt;, and &amp;lt;code&amp;gt;C&amp;lt;/code&amp;gt; such that
 :                   &amp;lt;code&amp;gt;A eq B&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;B eq C&amp;lt;/code&amp;gt;, but &amp;lt;code&amp;gt;A ne C&amp;lt;/code&amp;gt;, then the number
 :                of items in the result of the function (as well as the choice of which items are
 :                returned) is &amp;lt;termref def="implementation-dependent"/&amp;gt;, subject only to the
 :                constraints that (a) no two items in the result sequence compare equal to each other,
 :                and (b) every input item that does not appear in the result sequence compares equal
 :                to some item that does appear in the result sequence.&amp;lt;/p&amp;gt;
 : 
 :             &amp;lt;p&amp;gt;For example, this arises when computing:&amp;lt;/p&amp;gt;
 : 
 :             &amp;lt;eg xml:space="preserve"&amp;gt;    distinct-values(
 :             (xs:float('1.0'),
 :             xs:decimal('1.0000000000100000000001',
 :             xs:double( '1.00000000001'))&amp;lt;/eg&amp;gt;
 : 
 :             &amp;lt;p&amp;gt;because the values of type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; both
 :                compare equal to the value of type &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; but not equal to each
 :                other. &amp;lt;/p&amp;gt;
 :          &amp;lt;/change&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-distinct-values
 :)
declare function fn:distinct-values( $arg as xs:anyAtomicType*,  $collation as xs:string) as  xs:anyAtomicType* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E26"&amp;gt;Retrieves a document using a URI supplied as an
 :                &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;, and returns the corresponding document node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="doc" return-type="document-node()?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="uri" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		available documents, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$uri&amp;lt;/code&amp;gt; is the empty sequence, the result is an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E26"&amp;gt;If &amp;lt;code&amp;gt;$uri&amp;lt;/code&amp;gt; is a relative URI reference, it is resolved
 :             relative to the value of the &amp;lt;phrase diff="chg" at="L"&amp;gt;Static Base URI property from the static context&amp;lt;/phrase&amp;gt;. The resulting
 :             absolute URI is promoted to an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E26"&amp;gt;If the &amp;lt;term&amp;gt;Available documents&amp;lt;/term&amp;gt; described in &amp;lt;xspecref spec="XP30" ref="eval_context"/&amp;gt; provides a mapping from this string to a document
 :             node, the function returns that document node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E26"&amp;gt;The URI may include a fragment identifier.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;By default, this function is &amp;lt;termref def="deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;. Two calls on this function
 :             return the same document node if the same URI Reference (after resolution to an absolute
 :             URI Reference) is supplied to both calls. Thus, the following expression (if it does not
 :             raise an error) will always be true:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;doc("foo.xml") is doc("foo.xml")&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;However, for performance reasons, implementations may provide a user option to evaluate
 :             the function without a guarantee of determinism. The manner in which any such option is
 :             provided is implementation-defined. If the user has not selected such an option, a call
 :             of the function must either return a deterministic result or must raise a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error
 :                &amp;lt;errorref class="DC" code="0003"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;$uri&amp;lt;/code&amp;gt; is read from a source document, it is generally appropriate to
 :                resolve it relative to the base URI property of the relevant node in the source
 :                document. This can be achieved by calling the &amp;lt;code&amp;gt;fn:resolve-uri&amp;lt;/code&amp;gt; function,
 :                and passing the resulting absolute URI as an argument to the &amp;lt;code&amp;gt;fn:doc&amp;lt;/code&amp;gt;
 :                function.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If two calls to this function supply different absolute URI References as arguments, the
 :             same document node may be returned if the implementation can determine that the two
 :             arguments refer to the same resource.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; By defining the semantics of this function in terms of a string-to-document-node
 :             mapping in the dynamic context, the specification is acknowledging that the results of
 :             this function are outside the purview of the language specification itself, and depend
 :             entirely on the run-time environment in which the expression is evaluated. This run-time
 :             environment includes not only an unpredictable collection of resources ("the web"), but
 :             configurable machinery for locating resources and turning their contents into document
 :             nodes within the XPath data model. Both the set of resources that are reachable, and the
 :             mechanisms by which those resources are parsed and validated, are &amp;lt;termref def="implementation-dependent"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; One possible processing model for this function is as follows. The resource identified
 :             by the URI Reference is retrieved. If the resource cannot be retrieved, a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is
 :             raised &amp;lt;errorref class="DC" code="0002"/&amp;gt;. The data resulting from the retrieval action
 :             is then parsed as an XML document and a tree is constructed in accordance with the
 :                &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt;. If the top-level media type is known and is
 :             "text", the content is parsed in the same way as if the media type were text/xml;
 :             otherwise, it is parsed in the same way as if the media type were application/xml. If
 :             the contents cannot be parsed successfully, a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt;. Otherwise, the result of the function is the document node at the root
 :             of the resulting tree. This tree is then optionally validated against a schema.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Various aspects of this processing are &amp;lt;termref def="implementation-defined"/&amp;gt;.
 :             Implementations may provide external configuration options that allow any aspect of the
 :             processing to be controlled by the user. In particular:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The set of URI schemes that the implementation recognizes is
 :                   implementation-defined. Implementations may allow the mapping of URIs to resources
 :                   to be configured by the user, using mechanisms such as catalogs or user-written
 :                   URI handlers.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The handling of non-XML media types is implementation-defined. Implementations may
 :                   allow instances of the data model to be constructed from non-XML resources, under
 :                   user control.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;It is &amp;lt;termref def="implementation-defined"/&amp;gt; whether DTD validation and/or schema
 :                   validation is applied to the source document.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Implementations may provide user-defined error handling options that allow
 :                   processing to continue following an error in retrieving a resource, or in parsing
 :                   and validating its content. When errors have been handled in this way, the
 :                   function may return either an empty sequence, or a fallback document provided by
 :                   the error handler.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Implementations may provide user options that relax the requirement for the
 :                   function to return deterministic results.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E26"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="DC" code="0005"/&amp;gt; if &amp;lt;code&amp;gt;$uri&amp;lt;/code&amp;gt; is not a valid URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="G"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if the
 :                &amp;lt;term&amp;gt;available documents&amp;lt;/term&amp;gt; provides no mapping for the absolutized URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if the resource cannot be
 :             retrieved or cannot be parsed successfully as XML.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0003"/&amp;gt; if the implementation is not able
 :             to guarantee that the result of the function will be deterministic, and the user has not
 :             indicated that an unstable result is acceptable.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-doc
 :)
declare function fn:doc($uri as xs:string?) as  document-node()? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E26"&amp;gt;The function returns true if and only if the function
 :             call &amp;lt;code&amp;gt;fn:doc($uri)&amp;lt;/code&amp;gt; would return a document node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="doc-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="uri" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		available documents, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E26"&amp;gt;If &amp;lt;code&amp;gt;$uri&amp;lt;/code&amp;gt; is an empty sequence, this function returns
 :                &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E26"&amp;gt;If a call on &amp;lt;code&amp;gt;fn:doc($uri)&amp;lt;/code&amp;gt; would return a document
 :             node, this function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E26"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0005"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$uri&amp;lt;/code&amp;gt; is not a valid URI according to the rules applied by the
 :             implementation of &amp;lt;code&amp;gt;fn:doc&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E26"&amp;gt;Otherwise, this function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If this function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;, then calling &amp;lt;code&amp;gt;fn:doc($uri)&amp;lt;/code&amp;gt;
 :             within the same &amp;lt;termref def="execution-scope"/&amp;gt; must return a document node. However,
 :             if nondeterministic processing has been selected for the &amp;lt;code&amp;gt;fn:doc&amp;lt;/code&amp;gt; function,
 :             this guarantee is lost.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-doc-available
 :)
declare function fn:doc-available($uri as xs:string?) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E31"&amp;gt; Returns the sequence of element nodes that have an
 :                &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value matching the value of one or more of the &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;
 :             values supplied in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="element-with-id" return-type="element()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="element-with-id" return-type="element()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;arg name="node" type="node()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;change xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E31"&amp;gt;
 : 
 :             &amp;lt;note&amp;gt;&amp;lt;p&amp;gt;The effect of this function is identical to &amp;lt;function&amp;gt;fn:id&amp;lt;/function&amp;gt; in respect
 :                   of elements that have an attribute with the &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property. However,
 :                   it behaves differently in respect of element nodes with the &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt;
 :                   property. Whereas the &amp;lt;code&amp;gt;fn:id&amp;lt;/code&amp;gt;, for legacy reasons, returns the element
 :                   that has the &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property, this parent returns the element
 :                   identified by the ID, which is the parent of the element having the
 :                      &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;
 :             &amp;lt;p&amp;gt;The function returns a sequence, in document order with duplicates eliminated,
 :                containing every element node &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; that satisfies all the following
 :                conditions:&amp;lt;/p&amp;gt;
 :             &amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;
 :                      &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; is in the target document. The target document is the document
 :                      containing &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the document containing the context item
 :                         (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) if the second argument is omitted. The behavior of the
 :                      function if &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted is exactly the same as if the context
 :                      item had been passed as &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value equal to one of the candidate
 :                         &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values, where:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; An element has an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; if
 :                            either or both of the following conditions are true:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The element has an child element node whose &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt;
 :                                  property (See &amp;lt;xspecref spec="DM30" ref="dm-is-id"/&amp;gt;.) is true and
 :                                  whose typed value is equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the
 :                                     &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator using the Unicode code point collation
 :                                     (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The element has an attribute node whose &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property
 :                                  (See &amp;lt;xspecref spec="DM30" ref="dm-is-id"/&amp;gt;.) is true and whose
 :                                  typed value is equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the
 :                                     &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator using the Unicode code point collation
 :                                     (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is parsed as if it were
 :                            of type &amp;lt;code&amp;gt;IDREFS&amp;lt;/code&amp;gt;, that is, each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in
 :                               &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is treated as a whitespace-separated sequence of
 :                            tokens, each acting as an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;. These tokens are then
 :                            included in the list of candidate &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;s. If any of the
 :                            tokens is not a lexically valid &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; (that is, if it is not
 :                            lexically an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;), it is ignored. Formally, the
 :                            candidate &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values are the strings in the sequence given
 :                            by the expression:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;for $s in $arg return 
 :    fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]&amp;lt;/eg&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; If several elements have the same &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value, then &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt;
 :                      is the one that is first in document order.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;
 :          &amp;lt;/change&amp;gt;&amp;lt;change xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E31"&amp;gt;
 :             &amp;lt;p&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0001" type="dynamic"/&amp;gt; if
 :                   &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context item if the second argument is omitted, is a
 :                   node in a tree whose root is not a document node.&amp;lt;/p&amp;gt;
 :             &amp;lt;p&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;
 :             &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                   item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                   &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                   node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;
 :             
 :          &amp;lt;/change&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-element-with-id
 :)
declare function fn:element-with-id($arg as xs:string*) as  element()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E31"&amp;gt; Returns the sequence of element nodes that have an
 :                &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value matching the value of one or more of the &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;
 :             values supplied in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="element-with-id" return-type="element()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="element-with-id" return-type="element()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;arg name="node" type="node()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;change xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E31"&amp;gt;
 : 
 :             &amp;lt;note&amp;gt;&amp;lt;p&amp;gt;The effect of this function is identical to &amp;lt;function&amp;gt;fn:id&amp;lt;/function&amp;gt; in respect
 :                   of elements that have an attribute with the &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property. However,
 :                   it behaves differently in respect of element nodes with the &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt;
 :                   property. Whereas the &amp;lt;code&amp;gt;fn:id&amp;lt;/code&amp;gt;, for legacy reasons, returns the element
 :                   that has the &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property, this parent returns the element
 :                   identified by the ID, which is the parent of the element having the
 :                      &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;
 :             &amp;lt;p&amp;gt;The function returns a sequence, in document order with duplicates eliminated,
 :                containing every element node &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; that satisfies all the following
 :                conditions:&amp;lt;/p&amp;gt;
 :             &amp;lt;olist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;
 :                      &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; is in the target document. The target document is the document
 :                      containing &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the document containing the context item
 :                         (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) if the second argument is omitted. The behavior of the
 :                      function if &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted is exactly the same as if the context
 :                      item had been passed as &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value equal to one of the candidate
 :                         &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values, where:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; An element has an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; if
 :                            either or both of the following conditions are true:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The element has an child element node whose &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt;
 :                                  property (See &amp;lt;xspecref spec="DM30" ref="dm-is-id"/&amp;gt;.) is true and
 :                                  whose typed value is equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the
 :                                     &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator using the Unicode code point collation
 :                                     (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The element has an attribute node whose &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property
 :                                  (See &amp;lt;xspecref spec="DM30" ref="dm-is-id"/&amp;gt;.) is true and whose
 :                                  typed value is equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the
 :                                     &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator using the Unicode code point collation
 :                                     (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is parsed as if it were
 :                            of type &amp;lt;code&amp;gt;IDREFS&amp;lt;/code&amp;gt;, that is, each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in
 :                               &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is treated as a whitespace-separated sequence of
 :                            tokens, each acting as an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;. These tokens are then
 :                            included in the list of candidate &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;s. If any of the
 :                            tokens is not a lexically valid &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; (that is, if it is not
 :                            lexically an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;), it is ignored. Formally, the
 :                            candidate &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values are the strings in the sequence given
 :                            by the expression:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;for $s in $arg return 
 :    fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]&amp;lt;/eg&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; If several elements have the same &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value, then &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt;
 :                      is the one that is first in document order.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;
 :          &amp;lt;/change&amp;gt;&amp;lt;change xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="A-E31"&amp;gt;
 :             &amp;lt;p&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0001" type="dynamic"/&amp;gt; if
 :                   &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context item if the second argument is omitted, is a
 :                   node in a tree whose root is not a document node.&amp;lt;/p&amp;gt;
 :             &amp;lt;p&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;
 :             &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                   item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                   &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                   node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;
 :             
 :          &amp;lt;/change&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-element-with-id
 :)
declare function fn:element-with-id($arg as xs:string*,  $node as node()) as  element()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the argument is the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="empty" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;; otherwise, the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:empty((1,2,3)[10])&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:empty(fn:remove(("hello", "world"), 1))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;false()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-empty
 :)
declare function fn:empty($arg as item()*) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the string &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; contains &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; as a
 :             trailing substring, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="ends-with" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="ends-with" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; is the zero-length string and
 :             the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is not the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; indicating whether or not the value of
 :                &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; starts with a sequence of collation units that provides a
 :                &amp;lt;term&amp;gt;match&amp;lt;/term&amp;gt; to the collation units of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; according to the
 :             collation that is used.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;
 :                &amp;lt;term&amp;gt;Match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-ends-with
 :)
declare function fn:ends-with($arg1 as xs:string?,  $arg2 as xs:string?) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the string &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; contains &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; as a
 :             trailing substring, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="ends-with" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="ends-with" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; is the zero-length string and
 :             the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is not the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; indicating whether or not the value of
 :                &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; starts with a sequence of collation units that provides a
 :                &amp;lt;term&amp;gt;match&amp;lt;/term&amp;gt; to the collation units of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; according to the
 :             collation that is used.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;
 :                &amp;lt;term&amp;gt;Match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-ends-with
 :)
declare function fn:ends-with( $arg1 as xs:string?,  $arg2 as xs:string?,  $collation as xs:string) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of a system environment variable, if it exists.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="environment-variable" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="name" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		environment variables.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The set of available &amp;lt;xtermref spec="XP30" ref="dt-environment-variables"&amp;gt;environment variables&amp;lt;/xtermref&amp;gt; 
 :             is a set of (name, value) pairs forming part
 :             of the dynamic context, in which the name is unique within the set of pairs. The name
 :             and value are arbitrary strings.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the &amp;lt;code&amp;gt;$name&amp;lt;/code&amp;gt; argument matches the name of one of these pairs, the function
 :             returns the corresponding value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If there is no environment variable with a matching name, the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used for matching names is &amp;lt;termref def="implementation-defined"/&amp;gt;, but
 :             must be the same as the collation used to ensure that the names of all environment
 :             variables are unique.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="I"&amp;gt;The function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, 
 :             which means that if it is called several times
 :          within the same &amp;lt;termref def="dt-execution-scope"&amp;gt;execution scope&amp;lt;/termref&amp;gt;, with the same arguments,
 :             it must return the same result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;On many platforms, the term "environment variable" has a natural meaning in terms of
 :             facilities provided by the operating system. This interpretation of the concept does not
 :             exclude other interpretations, such as a mapping to a set of configuration parameters in
 :             a database system.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Environment variable names are usually case sensitive. Names are usually of the form
 :                &amp;lt;code&amp;gt;(letter|_) (letter|_|digit)*&amp;lt;/code&amp;gt;, but this varies by platform.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;On some platforms, there may sometimes be multiple environment variables with the same name;
 :             in this case, it is implementation-dependent as to which is returned; see for example
 :                &amp;lt;bibref ref="POSIX.1-2008"/&amp;gt; (Chapter 8, Environment Variables).
 :             Implementations &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; use prefixes or other naming conventions
 :             to disambiguate the names.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The requirement to ensure that the function is deterministic means in practice that
 :          the implementation must make a snapshot of the environment variables at some time
 :          during execution, and return values obtained from this snapshot, rather than using
 :          live values that are subject to change at any time.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Operating system environment variables may be associated with a particular process,
 :          while queries and stylesheets may execute across multiple processes (or multiple machines).
 :          In such circumstances implementations &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; choose to provide access
 :          to the environment variables associated with the process in which the query or stylesheet
 :          processing was initiated.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Security advice: Queries from untrusted sources should not be permitted unrestricted
 :             access to environment variables. For example, the name of the account under which the
 :             query is running may be useful information to a would-be intruder. An implementation may
 :             therefore choose to restrict access to the environment, or may provide a facility to
 :             make &amp;lt;code&amp;gt;fn:environment-variable&amp;lt;/code&amp;gt; always return the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-environment-variable
 :)
declare function fn:environment-variable($name as xs:string) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Calling the &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; function raises an application-defined
 :             error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName?"/&amp;gt;&amp;lt;arg name="description" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName?"/&amp;gt;&amp;lt;arg name="description" type="xs:string"/&amp;gt;&amp;lt;arg name="error-object" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function never returns a value. Instead it always raises an error. The effect of
 :             the error is identical to the effect of dynamic errors raised implicitly, for example
 :             when an incorrect argument is supplied to a function.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The parameters to the &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; function supply information that is
 :             associated with the error condition and that is made available to a caller that asks for
 :             information about the error. The error may be caught either by the host language (using
 :             a try/catch construct in XSLT or XQuery, for example), or by the calling application or
 :             external processing environment. The way in which error information is returned to the
 :             external processing environment is &amp;lt;termref def="implementation-dependent"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; is called with no arguments, then its behavior is the same as
 :             the function call: &amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$code&amp;lt;/code&amp;gt; is the empty sequence then the effective value is the
 :                &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt; constructed by:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;There are three pieces of information that may be associated with an error:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$code&amp;lt;/code&amp;gt; is an error code that distinguishes this error from others.
 :                   It is an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;; the namespace URI conventionally identifies the
 :                   component, subsystem, or authority responsible for defining the meaning of the
 :                   error code, while the local part identifies the specific error condition. The
 :                   namespace URI &amp;lt;code&amp;gt;http://www.w3.org/2005/xqt-errors&amp;lt;/code&amp;gt; is used for errors
 :                   defined in this specification; other namespace URIs may be used for errors defined
 :                   by the application.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;If the external processing environment expects the error code to be returned as a
 :                   URI or a string rather than as an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;, then an error code with
 :                   namespace URI &amp;lt;code&amp;gt;NS&amp;lt;/code&amp;gt; and local part &amp;lt;code&amp;gt;LP&amp;lt;/code&amp;gt; will be returned in
 :                   the form &amp;lt;code&amp;gt;NS#LP&amp;lt;/code&amp;gt;. The namespace URI part of the error code should
 :                   therefore not include a fragment identifier.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$description&amp;lt;/code&amp;gt; is a natural-language description of the error
 :                   condition.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$error-object&amp;lt;/code&amp;gt; is an arbitrary value used to convey additional
 :                   information about the error, and may be used in any way the application
 :                   chooses.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function always raises a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error. By default, it raises &amp;lt;errorref class="ER" code="0000"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-error
 :)
declare function fn:error() as  none external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Calling the &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; function raises an application-defined
 :             error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName?"/&amp;gt;&amp;lt;arg name="description" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName?"/&amp;gt;&amp;lt;arg name="description" type="xs:string"/&amp;gt;&amp;lt;arg name="error-object" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function never returns a value. Instead it always raises an error. The effect of
 :             the error is identical to the effect of dynamic errors raised implicitly, for example
 :             when an incorrect argument is supplied to a function.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The parameters to the &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; function supply information that is
 :             associated with the error condition and that is made available to a caller that asks for
 :             information about the error. The error may be caught either by the host language (using
 :             a try/catch construct in XSLT or XQuery, for example), or by the calling application or
 :             external processing environment. The way in which error information is returned to the
 :             external processing environment is &amp;lt;termref def="implementation-dependent"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; is called with no arguments, then its behavior is the same as
 :             the function call: &amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$code&amp;lt;/code&amp;gt; is the empty sequence then the effective value is the
 :                &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt; constructed by:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;There are three pieces of information that may be associated with an error:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$code&amp;lt;/code&amp;gt; is an error code that distinguishes this error from others.
 :                   It is an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;; the namespace URI conventionally identifies the
 :                   component, subsystem, or authority responsible for defining the meaning of the
 :                   error code, while the local part identifies the specific error condition. The
 :                   namespace URI &amp;lt;code&amp;gt;http://www.w3.org/2005/xqt-errors&amp;lt;/code&amp;gt; is used for errors
 :                   defined in this specification; other namespace URIs may be used for errors defined
 :                   by the application.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;If the external processing environment expects the error code to be returned as a
 :                   URI or a string rather than as an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;, then an error code with
 :                   namespace URI &amp;lt;code&amp;gt;NS&amp;lt;/code&amp;gt; and local part &amp;lt;code&amp;gt;LP&amp;lt;/code&amp;gt; will be returned in
 :                   the form &amp;lt;code&amp;gt;NS#LP&amp;lt;/code&amp;gt;. The namespace URI part of the error code should
 :                   therefore not include a fragment identifier.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$description&amp;lt;/code&amp;gt; is a natural-language description of the error
 :                   condition.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$error-object&amp;lt;/code&amp;gt; is an arbitrary value used to convey additional
 :                   information about the error, and may be used in any way the application
 :                   chooses.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function always raises a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error. By default, it raises &amp;lt;errorref class="ER" code="0000"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-error
 :)
declare function fn:error($code as xs:QName) as  none external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Calling the &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; function raises an application-defined
 :             error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName?"/&amp;gt;&amp;lt;arg name="description" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName?"/&amp;gt;&amp;lt;arg name="description" type="xs:string"/&amp;gt;&amp;lt;arg name="error-object" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function never returns a value. Instead it always raises an error. The effect of
 :             the error is identical to the effect of dynamic errors raised implicitly, for example
 :             when an incorrect argument is supplied to a function.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The parameters to the &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; function supply information that is
 :             associated with the error condition and that is made available to a caller that asks for
 :             information about the error. The error may be caught either by the host language (using
 :             a try/catch construct in XSLT or XQuery, for example), or by the calling application or
 :             external processing environment. The way in which error information is returned to the
 :             external processing environment is &amp;lt;termref def="implementation-dependent"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; is called with no arguments, then its behavior is the same as
 :             the function call: &amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$code&amp;lt;/code&amp;gt; is the empty sequence then the effective value is the
 :                &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt; constructed by:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;There are three pieces of information that may be associated with an error:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$code&amp;lt;/code&amp;gt; is an error code that distinguishes this error from others.
 :                   It is an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;; the namespace URI conventionally identifies the
 :                   component, subsystem, or authority responsible for defining the meaning of the
 :                   error code, while the local part identifies the specific error condition. The
 :                   namespace URI &amp;lt;code&amp;gt;http://www.w3.org/2005/xqt-errors&amp;lt;/code&amp;gt; is used for errors
 :                   defined in this specification; other namespace URIs may be used for errors defined
 :                   by the application.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;If the external processing environment expects the error code to be returned as a
 :                   URI or a string rather than as an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;, then an error code with
 :                   namespace URI &amp;lt;code&amp;gt;NS&amp;lt;/code&amp;gt; and local part &amp;lt;code&amp;gt;LP&amp;lt;/code&amp;gt; will be returned in
 :                   the form &amp;lt;code&amp;gt;NS#LP&amp;lt;/code&amp;gt;. The namespace URI part of the error code should
 :                   therefore not include a fragment identifier.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$description&amp;lt;/code&amp;gt; is a natural-language description of the error
 :                   condition.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$error-object&amp;lt;/code&amp;gt; is an arbitrary value used to convey additional
 :                   information about the error, and may be used in any way the application
 :                   chooses.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function always raises a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error. By default, it raises &amp;lt;errorref class="ER" code="0000"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-error
 :)
declare function fn:error($code as xs:QName?,  $description as xs:string) as  none external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Calling the &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; function raises an application-defined
 :             error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName?"/&amp;gt;&amp;lt;arg name="description" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="error" return-type="none" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="code" type="xs:QName?"/&amp;gt;&amp;lt;arg name="description" type="xs:string"/&amp;gt;&amp;lt;arg name="error-object" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function never returns a value. Instead it always raises an error. The effect of
 :             the error is identical to the effect of dynamic errors raised implicitly, for example
 :             when an incorrect argument is supplied to a function.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The parameters to the &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; function supply information that is
 :             associated with the error condition and that is made available to a caller that asks for
 :             information about the error. The error may be caught either by the host language (using
 :             a try/catch construct in XSLT or XQuery, for example), or by the calling application or
 :             external processing environment. The way in which error information is returned to the
 :             external processing environment is &amp;lt;termref def="implementation-dependent"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;fn:error&amp;lt;/code&amp;gt; is called with no arguments, then its behavior is the same as
 :             the function call: &amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$code&amp;lt;/code&amp;gt; is the empty sequence then the effective value is the
 :                &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt; constructed by:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;There are three pieces of information that may be associated with an error:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$code&amp;lt;/code&amp;gt; is an error code that distinguishes this error from others.
 :                   It is an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;; the namespace URI conventionally identifies the
 :                   component, subsystem, or authority responsible for defining the meaning of the
 :                   error code, while the local part identifies the specific error condition. The
 :                   namespace URI &amp;lt;code&amp;gt;http://www.w3.org/2005/xqt-errors&amp;lt;/code&amp;gt; is used for errors
 :                   defined in this specification; other namespace URIs may be used for errors defined
 :                   by the application.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;If the external processing environment expects the error code to be returned as a
 :                   URI or a string rather than as an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;, then an error code with
 :                   namespace URI &amp;lt;code&amp;gt;NS&amp;lt;/code&amp;gt; and local part &amp;lt;code&amp;gt;LP&amp;lt;/code&amp;gt; will be returned in
 :                   the form &amp;lt;code&amp;gt;NS#LP&amp;lt;/code&amp;gt;. The namespace URI part of the error code should
 :                   therefore not include a fragment identifier.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$description&amp;lt;/code&amp;gt; is a natural-language description of the error
 :                   condition.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;$error-object&amp;lt;/code&amp;gt; is an arbitrary value used to convey additional
 :                   information about the error, and may be used in any way the application
 :                   chooses.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function always raises a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error. By default, it raises &amp;lt;errorref class="ER" code="0000"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-error
 :)
declare function fn:error( $code as xs:QName?,  $description as xs:string,  $error-object as item()*) as  none external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; if it contains exactly one item. Otherwise, raises an
 :             error. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="exactly-one" return-type="item()" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Except in error cases, the function returns &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; unchanged.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0005"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an empty
 :             sequence or a sequence containing more than one item.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-exactly-one
 :)
declare function fn:exactly-one($arg as item()*) as  item() external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the argument is a non-empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="exists" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a non-empty sequence, the function returns
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;; otherwise, the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:exists(fn:remove(("hello"), 1))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;false()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:exists(fn:remove(("hello", "world"), 1))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-exists
 :)
declare function fn:exists($arg as item()*) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; value &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="false" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result is equivalent to &amp;lt;code&amp;gt;xs:boolean("0")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:false()&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;xs:boolean(0)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-false
 :)
declare function fn:false() as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns those items from the sequence &amp;lt;var&amp;gt;$seq&amp;lt;/var&amp;gt; for which the supplied
 :             function &amp;lt;var&amp;gt;$f&amp;lt;/var&amp;gt; returns true.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="filter" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq" type="item()*"/&amp;gt;&amp;lt;arg name="f" type="function(item()) as xs:boolean"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of the function is equivalent to the following implementation in XQuery:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : declare function fn:filter(
 :         $seq as item()*,
 :         $f as function(item()) as xs:boolean)
 :         as item()* {
 :   if (fn:empty($seq))
 :   then ()
 :   else ( fn:head($seq)[$f(.) eq fn:true()], 
 :          fn:filter(fn:tail($seq), $f)
 :        )
 : };&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;or its equivalent in XSLT:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : &amp;amp;lt;xsl:function name="fn:filter" as="item()*"&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="seq" as="item()*"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="f" as="function(item()) as xs:boolean"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:if test="fn:exists($seq)"&amp;amp;gt;
 :     &amp;amp;lt;xsl:sequence select="fn:head($seq)[$f(.) eq fn:true()], fn:filter(fn:tail($seq), $f)"/&amp;amp;gt;
 :   &amp;amp;lt;/xsl:if&amp;amp;gt;
 : &amp;amp;lt;/xsl:function&amp;amp;gt;
 :          &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="G"&amp;gt;As a consequence of the function signature and the function calling
 :             rules, a type error occurs if the supplied function &amp;lt;var&amp;gt;$f&amp;lt;/var&amp;gt; returns anything other
 :             than a single &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; item; there is no conversion to an effective
 :             boolean value.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-filter
 :)
declare function fn:filter($seq as item()*,  $f as function(item()) as xs:boolean) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Rounds &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; downwards to a whole number.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="floor" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;General rules: see &amp;lt;specref ref="numeric-value-functions"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the largest (closest to positive infinity) number with no
 :             fractional part that is not greater than the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is one of the four numeric types &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; the type
 :             of the result is the same as the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. If the type of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a type derived from one of the numeric types, the result is an
 :             instance of the base numeric type.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; arguments, if the argument is
 :             positive zero, then positive zero is returned. If the argument is negative zero, then
 :             negative zero is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:floor(10.5)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;10&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:floor(-10.5)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;-11&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-floor
 :)
declare function fn:floor($arg as numeric?) as  numeric? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Processes the supplied sequence from left to right, applying the supplied
 :             function repeatedly to each item in turn, together with an accumulated result value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="fold-left" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq" type="item()*"/&amp;gt;&amp;lt;arg name="zero" type="item()*"/&amp;gt;&amp;lt;arg name="f" type="function(item()*, item()) as item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of the function is equivalent to the following implementation in XQuery:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : declare function fn:fold-left(
 :         $seq as item()*
 :         $zero as item()*,
 :         $f as function(item()*, item()) as item()*) 
 :         as item()* {
 :   if (fn:empty($seq))
 :   then $zero
 :   else fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)
 : };&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;or its equivalent in XSLT:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : &amp;amp;lt;xsl:function name="fn:fold-left" as="item()*"&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="seq" as="item()*"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="zero" as="item()*"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="f" as="function(item()*, item()) as item()*"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:choose&amp;amp;gt;
 :     &amp;amp;lt;xsl:when test="fn:empty($seq)"&amp;amp;gt;
 :       &amp;amp;lt;xsl:sequence select="$zero"/&amp;amp;gt;
 :     &amp;amp;lt;/xsl:when&amp;amp;gt;
 :     &amp;amp;lt;xsl:otherwise&amp;amp;gt;
 :       &amp;amp;lt;xsl:sequence select="fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)"/&amp;amp;gt;
 :     &amp;amp;lt;/xsl:otherwise&amp;amp;gt;
 :   &amp;amp;lt;/xsl:choose&amp;amp;gt;
 : &amp;amp;lt;/xsl:function&amp;amp;gt;
 :          &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="G"&amp;gt;As a consequence of the function signature and the function calling
 :             rules, a type error occurs if the supplied function &amp;lt;var&amp;gt;$f&amp;lt;/var&amp;gt; cannot be applied to
 :             two arguments, where the first argument is either the value of &amp;lt;var&amp;gt;$zero&amp;lt;/var&amp;gt; or the
 :             result of a previous application of &amp;lt;var&amp;gt;$f&amp;lt;/var&amp;gt;, and the second is &amp;lt;var&amp;gt;$seq&amp;lt;/var&amp;gt; or
 :             any trailing subsequence of &amp;lt;var&amp;gt;$seq&amp;lt;/var&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-fold-left
 :)
declare function fn:fold-left($seq as item()*,  $zero as item()*,  $f as function(item()*, item()) as item()*) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Processes the supplied sequence from right to left, applying the supplied
 :             function repeatedly to each item in turn, together with an accumulated result value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="fold-right" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq" type="item()*"/&amp;gt;&amp;lt;arg name="zero" type="item()*"/&amp;gt;&amp;lt;arg name="f" type="function(item()*, item()) as item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of the function is equivalent to the following implementation in XQuery:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : declare function fn:fold-right(
 :         $seq as item()*, 
 :         $zero as item()*, 
 :         $f as function(item(), item()*) as item()*) 
 :         as item()* {
 :   if (fn:empty($seq))
 :   then $zero
 :   else $f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))
 : };&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;or its equivalent in XSLT:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : &amp;amp;lt;xsl:function name="fn:fold-right" as="item()*"&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="seq" as="item()*"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="zero" as="item()*"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="f" as="function(item(), item()*) as item()*"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:choose&amp;amp;gt;
 :     &amp;amp;lt;xsl:when test="fn:empty($seq)"&amp;amp;gt;
 :       &amp;amp;lt;xsl:sequence select="$zero"/&amp;amp;gt;
 :     &amp;amp;lt;/xsl:when&amp;amp;gt;
 :     &amp;amp;lt;xsl:otherwise&amp;amp;gt;
 :       &amp;amp;lt;xsl:sequence select="$f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))"/&amp;amp;gt;
 :     &amp;amp;lt;/xsl:otherwise&amp;amp;gt;
 :   &amp;amp;lt;/xsl:choose&amp;amp;gt;
 : &amp;amp;lt;/xsl:function&amp;amp;gt;
 :          &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="G"&amp;gt;As a consequence of the function signature and the function calling
 :             rules, a type error occurs if the supplied function &amp;lt;var&amp;gt;$f&amp;lt;/var&amp;gt; cannot be applied to
 :             two arguments, where the first argument is any item in the sequence &amp;lt;var&amp;gt;$seq&amp;lt;/var&amp;gt;, and
 :             the second is either the value of &amp;lt;var&amp;gt;$zero&amp;lt;/var&amp;gt; or the result of a previous
 :             application of &amp;lt;var&amp;gt;$f&amp;lt;/var&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-fold-right
 :)
declare function fn:fold-right($seq as item()*,  $zero as item()*,  $f as function(item()*, item()) as item()*) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string containing an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; value formatted for display.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-date" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:date?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-date" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:date?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="language" type="xs:string?"/&amp;gt;&amp;lt;arg name="calendar" type="xs:string?"/&amp;gt;&amp;lt;arg name="place" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		default calendar, and default language, and default place, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The five-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone, and namespaces.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See &amp;lt;specref ref="rules-for-datetime-formatting"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-date
 :)
declare function fn:format-date( $value as xs:date?,  $picture as xs:string,  $language as xs:string?,  $calendar as xs:string?,  $place as xs:string?) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string containing an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt; value formatted for display.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-date" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:date?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-date" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:date?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="language" type="xs:string?"/&amp;gt;&amp;lt;arg name="calendar" type="xs:string?"/&amp;gt;&amp;lt;arg name="place" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		default calendar, and default language, and default place, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The five-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone, and namespaces.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See &amp;lt;specref ref="rules-for-datetime-formatting"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-date
 :)
declare function fn:format-date($value as xs:date?,  $picture as xs:string) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string containing an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value formatted for display.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-dateTime" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:dateTime?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-dateTime" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:dateTime?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="language" type="xs:string?"/&amp;gt;&amp;lt;arg name="calendar" type="xs:string?"/&amp;gt;&amp;lt;arg name="place" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		default calendar, and default language, and default place, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The five-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone, and namespaces.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See &amp;lt;specref ref="rules-for-datetime-formatting"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-dateTime
 :)
declare function fn:format-dateTime( $value as xs:dateTime?,  $picture as xs:string,  $language as xs:string?,  $calendar as xs:string?,  $place as xs:string?) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string containing an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; value formatted for display.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-dateTime" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:dateTime?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-dateTime" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:dateTime?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="language" type="xs:string?"/&amp;gt;&amp;lt;arg name="calendar" type="xs:string?"/&amp;gt;&amp;lt;arg name="place" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		default calendar, and default language, and default place, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The five-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone, and namespaces.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See &amp;lt;specref ref="rules-for-datetime-formatting"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-dateTime
 :)
declare function fn:format-dateTime($value as xs:dateTime?,  $picture as xs:string) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Formats an integer according to a given picture string, using the conventions
 :             of a given natural language if specified.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-integer" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:integer?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-integer" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:integer?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="lang" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		default language.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; is an empty sequence, the function returns a zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In all other cases, the &amp;lt;code&amp;gt;$picture&amp;lt;/code&amp;gt; argument describes the format in which
 :                &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; is output.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The rules that follow describe how non-negative numbers are output. If the value of
 :                &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; is negative, the rules below are applied to the absolute value of
 :                &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt;, and a minus sign is prepended to the result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="L"&amp;gt;The value of &amp;lt;code&amp;gt;$picture&amp;lt;/code&amp;gt; consists of a primary format token, 
 :             optionally followed
 :             by a format modifier. The primary format token is always present and &amp;lt;rfc2119&amp;gt;must not&amp;lt;/rfc2119&amp;gt;
 :             be zero-length. If the string contains one or more semicolons then everything that
 :             precedes the last semicolon is taken as the primary format token and everything
 :             that follows is taken as the format modifier; if the string contains no
 :             semicolon then the entire picture is taken as the primary format token, and the
 :             format modifier is taken to be absent (which is equivalent to supplying a
 :             zero-length string).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The primary format token is classified as one of the following:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A &amp;lt;var&amp;gt;decimal-digit-pattern&amp;lt;/var&amp;gt; made up of &amp;lt;var&amp;gt;optional-digit-signs&amp;lt;/var&amp;gt;,
 :                      &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt;, and &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;var&amp;gt;optional-digit-sign&amp;lt;/var&amp;gt; is the character "#".&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A &amp;lt;var&amp;gt;mandatory-digit-sign&amp;lt;/var&amp;gt; is a &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; in Unicode category Nd. All
 :                            &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt; within the format token &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be from the
 :                         same digit family, where a digit family is a sequence of ten consecutive
 :                         characters in Unicode category Nd, having digit values 0 through 9. Within
 :                         the format token, these digits are interchangeable: a three-digit number may
 :                         thus be indicated equivalently by &amp;lt;code&amp;gt;000&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;001&amp;lt;/code&amp;gt;, or
 :                            &amp;lt;code&amp;gt;999&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;a &amp;lt;var&amp;gt;grouping-separator-sign&amp;lt;/var&amp;gt; is a non-alphanumeric character, that
 :                         is a &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; whose Unicode category is
 :                         other than Nd, Nl, No, Lu, Ll, Lt, Lm or Lo.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p diff="chg" at="L"&amp;gt;If the primary format token contains at least one Unicode digit 
 :                   then it is taken as a decimal digit pattern, and in this case it &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt;
 :                   match the regular expression &amp;lt;code&amp;gt;^((\p{Nd}|#|[^\p{N}\p{L}])+?)$&amp;lt;/code&amp;gt;. If it contains
 :                   a digit but does not match this pattern, a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error 
 :                   is raised &amp;lt;errorref class="DF" code="1310"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;note&amp;gt;&amp;lt;p diff="add" at="L"&amp;gt;If a semicolon is to be used as a grouping separator, then the primary
 :                format token as a whole must be followed by another semicolon, to ensure that
 :                the grouping separator is not mistaken as a separator between the primary format
 :                token and the format modifier.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p&amp;gt;There &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be at least one &amp;lt;var&amp;gt;mandatory-digit-sign&amp;lt;/var&amp;gt;. There may be zero or
 :                   more &amp;lt;var&amp;gt;optional-digit-signs&amp;lt;/var&amp;gt;, and (if present) these &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; precede all
 :                      &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt;. There may be zero or more
 :                      &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt;. A &amp;lt;var&amp;gt;grouping-separator-sign&amp;lt;/var&amp;gt; &amp;lt;rfc2119&amp;gt;must
 :                   not&amp;lt;/rfc2119&amp;gt; appear at the start or end of the &amp;lt;var&amp;gt;decimal-digit-pattern&amp;lt;/var&amp;gt;, nor
 :                   adjacent to another &amp;lt;var&amp;gt;grouping-separator-sign&amp;lt;/var&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;The corresponding output format is a decimal number, using this digit family, with
 :                   at least as many digits as there are &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt; in the
 :                   format token. Thus, a format token &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt; generates the sequence &amp;lt;code&amp;gt;0 1
 :                      2 ... 10 11 12 ...&amp;lt;/code&amp;gt;, and a format token &amp;lt;code&amp;gt;01&amp;lt;/code&amp;gt; (or equivalently,
 :                      &amp;lt;code&amp;gt;00&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;99&amp;lt;/code&amp;gt;) generates the sequence &amp;lt;code&amp;gt;00 01 02 ...
 :                      09 10 11 12 ... 99 100 101&amp;lt;/code&amp;gt;. A format token of &amp;lt;code&amp;gt;&amp;amp;amp;#x661;&amp;lt;/code&amp;gt;
 :                   (Arabic-Indic digit one) generates the sequence &amp;lt;code&amp;gt;١&amp;lt;/code&amp;gt; then &amp;lt;code&amp;gt;٢&amp;lt;/code&amp;gt;
 :                   then &amp;lt;code&amp;gt;٣&amp;lt;/code&amp;gt; ...&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt; are handled as follows. The position of
 :                   grouping separators within the format token, counting backwards from the last
 :                   digit, indicates the position of grouping separators to appear within the
 :                   formatted number, and the character used as the &amp;lt;var&amp;gt;grouping-separator-sign&amp;lt;/var&amp;gt;
 :                   within the format token indicates the character to be used as the corresponding
 :                   grouping separator in the formatted number. If &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt;
 :                   appear at regular intervals within the format token, that is if the same grouping
 :                   separator appears at positions forming a sequence &amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt;, 2&amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt;,
 :                      3&amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt;, ... for some integer value &amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt; (including the case
 :                   where there is only one number in the list), then the sequence is extrapolated to
 :                   the left, so grouping separators will be used in the formatted number at every
 :                   multiple of &amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt;. For example, if the format token is &amp;lt;code&amp;gt;0'000&amp;lt;/code&amp;gt;
 :                   then the number one million will be formatted as &amp;lt;code&amp;gt;1'000'000&amp;lt;/code&amp;gt;, while the
 :                   number fifteen will be formatted as &amp;lt;code&amp;gt;0'015&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;The only purpose of &amp;lt;var&amp;gt;optional-digit-signs&amp;lt;/var&amp;gt; is to mark the position of
 :                      &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt;. For example, if the format token is
 :                      &amp;lt;code&amp;gt;#'##0&amp;lt;/code&amp;gt; then the number one million will be formatted as
 :                      &amp;lt;code&amp;gt;1'000'000&amp;lt;/code&amp;gt;, while the number fifteen will be formatted as
 :                      &amp;lt;code&amp;gt;15&amp;lt;/code&amp;gt;. A grouping separator is included in the formatted number only
 :                   if there is a digit to its left, which will only be the case if either (a) the
 :                   number is large enough to require that digit, or (b) the number of
 :                      &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt; in the format token requires insignificant
 :                   leading zeros to be present.&amp;lt;/p&amp;gt;&amp;lt;note&amp;gt;&amp;lt;p&amp;gt;Numbers will never be truncated. Given the &amp;lt;var&amp;gt;decimal-digit-pattern&amp;lt;/var&amp;gt;
 :                      &amp;lt;code&amp;gt;01&amp;lt;/code&amp;gt;, the number three hundred will be output as &amp;lt;code&amp;gt;300&amp;lt;/code&amp;gt;,
 :                      despite the absence of any &amp;lt;var&amp;gt;optional-digit-sign&amp;lt;/var&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;A&amp;lt;/code&amp;gt;, which generates the sequence &amp;lt;code&amp;gt;A B C ... Z AA AB
 :                      AC...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt;, which generates the sequence &amp;lt;code&amp;gt;a b c ... z aa ab
 :                      ac...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;i&amp;lt;/code&amp;gt;, which generates the sequence &amp;lt;code&amp;gt;i ii iii iv v vi vii
 :                      viii ix x ...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;I&amp;lt;/code&amp;gt;, which generates the sequence &amp;lt;code&amp;gt;I II III IV V VI VII
 :                      VIII IX X ...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;w&amp;lt;/code&amp;gt;, which generates numbers written as lower-case words, for
 :                   example in English, &amp;lt;code&amp;gt;one two three four ...&amp;lt;/code&amp;gt;
 :                &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;W&amp;lt;/code&amp;gt;, which generates numbers written as upper-case words, for
 :                   example in English, &amp;lt;code&amp;gt;ONE TWO THREE FOUR ...&amp;lt;/code&amp;gt;
 :                &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;Ww&amp;lt;/code&amp;gt;, which generates numbers written as title-case words, for
 :                   example in English, &amp;lt;code&amp;gt;One Two Three Four ...&amp;lt;/code&amp;gt;
 :                &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Any other format token, which indicates a numbering sequence in which that token
 :                   represents the number 1 (one) (but see the note below).
 :                   &amp;lt;!-- Where possible (given the constraint that format tokens
 : 						must be alphanumeric, and that they must be distinct) the format token
 : 						used to represent a numbering sequence should be the same as the representation
 : 						of the number 1 (one) in that sequence.--&amp;gt;
 :                   It is &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; which
 :                   numbering sequences, additional to those listed above, are supported. If an
 :                   implementation does not support a numbering sequence represented by the given
 :                   token, it &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; use a format token of &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;note&amp;gt;&amp;lt;p&amp;gt;In some traditional numbering sequences additional signs are added to denote
 :                      that the letters should be interpreted as numbers; these are not included in
 :                      the format token. An example (see also the example below) is classical Greek
 :                      where a &amp;lt;emph&amp;gt;dexia keraia&amp;lt;/emph&amp;gt; (x0374, ʹ) and sometimes an &amp;lt;emph&amp;gt;aristeri keraia&amp;lt;/emph&amp;gt;
 :                      (x0375, ͵) is added.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For all format tokens other than the first kind above (one that consists of decimal
 :             digits), there &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; lower and upper bounds on the range of numbers that
 :             can be formatted using this format token; indeed, for some numbering sequences there may
 :             be intrinsic limits. For example, the format token &amp;lt;code&amp;gt;&amp;amp;amp;#x2460;&amp;lt;/code&amp;gt; (circled
 :             digit one, ①) has a range &amp;lt;phrase diff="chg" at="M"&amp;gt;imposed by the Unicode character repertoire — 1 to 20 in
 :             Unicode versions prior to 4.0, increased in subsequent versions&amp;lt;/phrase&amp;gt;. For
 :             the numbering sequences described above any upper bound imposed by the implementation
 :                &amp;lt;rfc2119&amp;gt;must not&amp;lt;/rfc2119&amp;gt; be less than 1000 (one thousand) and any lower bound must
 :             not be greater than 1. Numbers that fall outside this range &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be
 :             formatted using the format token &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The above expansions of numbering sequences for format tokens such as &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; and
 :                &amp;lt;code&amp;gt;i&amp;lt;/code&amp;gt; are indicative but not prescriptive. There are various conventions in
 :             use for how alphabetic sequences continue when the alphabet is exhausted, and differing
 :             conventions for how roman numerals are written (for example, &amp;lt;code&amp;gt;IV&amp;lt;/code&amp;gt; versus
 :                &amp;lt;code&amp;gt;IIII&amp;lt;/code&amp;gt; as the representation of the number 4). Sometimes alphabetic
 :             sequences are used that omit letters such as &amp;lt;code&amp;gt;i&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt;. This
 :             specification does not prescribe the detail of any sequence other than those sequences
 :             consisting entirely of decimal digits.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Many numbering sequences are language-sensitive. This applies especially to the sequence
 :             selected by the tokens &amp;lt;code&amp;gt;w&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;W&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;Ww&amp;lt;/code&amp;gt;. It also
 :             applies to other sequences, for example different languages using the Cyrillic alphabet
 :             use different sequences of characters, each starting with the letter #x410 (Cyrillic
 :             capital letter A). In such cases, the &amp;lt;code&amp;gt;$lang&amp;lt;/code&amp;gt; argument specifies which
 :             language's conventions are to be used. &amp;lt;phrase diff="chg" at="L"&amp;gt;If the argument
 :             is specified, the value &amp;lt;rfc2119&amp;gt;should&amp;lt;/rfc2119&amp;gt; be either an empty sequence
 :             or a value that would be valid for the &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute (see &amp;lt;bibref ref="REC-xml"/&amp;gt;).
 :             Note that this permits the identification of sublanguages based on country codes (from ISO 3166-1)
 :             as well as identification of dialects and regions within a country.&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The set of languages
 :             for which numbering is supported is &amp;lt;termref def="implementation-defined"/&amp;gt;.
 :             If the &amp;lt;code&amp;gt;$lang&amp;lt;/code&amp;gt; argument is absent, 
 :             or is set to an empty sequence, or is invalid, or is not a language supported by the
 :             implementation, then the number is formatted using &amp;lt;phrase diff="chg" at="K"&amp;gt;the
 :             default language from the dynamic context&amp;lt;/phrase&amp;gt;. 
 :             &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The format modifier &amp;lt;phrase diff="chg" at="L"&amp;gt;&amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt;
 :             be a string that matches the regular expression &amp;lt;code diff="chg" at="M"&amp;gt;^([co](\(.+\))?)?[at]?$&amp;lt;/code&amp;gt;. &amp;lt;/phrase&amp;gt;
 :             That is, if it is present it must consist of one &amp;lt;phrase diff="add" at="G"&amp;gt;or more&amp;lt;/phrase&amp;gt; of
 :             the following, in &amp;lt;phrase diff="del" at="K"&amp;gt;any&amp;lt;/phrase&amp;gt; order:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="chg" at="G"&amp;gt;either &amp;lt;code&amp;gt;c&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt;, optionally followed by
 :                   a sequence of characters enclosed between parentheses, to indicate cardinal or
 :                   ordinal numbering respectively, the default being cardinal numbering&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="chg" at="G"&amp;gt;either &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;t&amp;lt;/code&amp;gt;, to indicate alphabetic
 :                   or traditional numbering respectively, the default being &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt; modifier is present, this indicates a request to output ordinal
 :             numbers rather than cardinal numbers. For example, in English, when used with the format
 :             token &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;, this outputs the sequence &amp;lt;code&amp;gt;1st 2nd 3rd 4th ...&amp;lt;/code&amp;gt;, and
 :             when used with the format token &amp;lt;code&amp;gt;w&amp;lt;/code&amp;gt; outputs the sequence &amp;lt;code&amp;gt;first second
 :             third fourth ...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;The string of characters between the parentheses, if present, is used to
 :          select between other possible variations of cardinal or ordinal numbering sequences.
 :          The interpretation of this string is &amp;lt;termref def="implemementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt;. No error occurs
 :          if the implementation does not define any interpretation for the defined string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For example, in some languages, ordinal numbers vary depending on the grammatical context:
 :             they may have different genders and may decline with the noun that they qualify.
 :             In such cases the string appearing in parentheses after the letter &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt; may be
 :             used to indicate the variation of the ordinal number required. The way in which the
 :             variation is indicated will depend on the conventions of the language. For inflected
 :             languages that vary the ending of the word, the &amp;lt;rfc2119&amp;gt;recommended&amp;lt;/rfc2119&amp;gt; approach is to indicate the
 :             required ending, preceded by a hyphen: for example in German, appropriate values are
 :                &amp;lt;code&amp;gt;o(-e)&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;o(-er)&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;o(-es)&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;o(-en)&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;It is &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; what
 :             combinations of values of the format token, the language, and the cardinal/ordinal
 :             modifier are supported. If ordinal numbering is not supported for the combination of the
 :             format token, the language, and the string appearing in parentheses, the request is
 :             ignored and cardinal numbers are generated instead.&amp;lt;/p&amp;gt;&amp;lt;example xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;head&amp;gt;Ordinal Numbering in Italian&amp;lt;/head&amp;gt;&amp;lt;p&amp;gt;The specification &amp;lt;code&amp;gt;"1;o(-º)"&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$lang&amp;lt;/code&amp;gt; equal to
 :                   &amp;lt;code&amp;gt;it&amp;lt;/code&amp;gt;, if supported, should produce the sequence:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;1º 2º 3º 4º ...&amp;lt;/eg&amp;gt;&amp;lt;p&amp;gt;The specification &amp;lt;code&amp;gt;"Ww;o"&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$lang&amp;lt;/code&amp;gt; equal to
 :                   &amp;lt;code&amp;gt;it&amp;lt;/code&amp;gt;, if supported, should produce the sequence:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;Primo Secondo Terzo Quarto Quinto ...&amp;lt;/eg&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;phrase diff="chg" at="G"&amp;gt;use of the &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;t&amp;lt;/code&amp;gt;
 :                modifier&amp;lt;/phrase&amp;gt; disambiguates between numbering sequences that use letters. In many
 :             languages there are two commonly used numbering sequences that use letters. One
 :             numbering sequence assigns numeric values to letters in alphabetic sequence, and the
 :             other assigns numeric values to each letter in some other manner traditional in that
 :             language. In English, these would correspond to the numbering sequences specified by the
 :             format tokens &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;i&amp;lt;/code&amp;gt;. In some languages, the first member of
 :             each sequence is the same, and so the format token alone would be ambiguous. &amp;lt;phrase diff="chg" at="G"&amp;gt;In the absence of the &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;t&amp;lt;/code&amp;gt; modifier,
 :                the default is &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt;&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DF" code="1310"/&amp;gt; if the format token is invalid,
 :             that is, if it violates any mandatory rules (indicated by an emphasized &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt;
 :             or &amp;lt;rfc2119&amp;gt;required&amp;lt;/rfc2119&amp;gt; keyword in the above rules). For example, the error is raised if
 :             the primary format token contains a digit but does not match the required regular expression.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-integer
 :)
declare function fn:format-integer($value as xs:integer?,  $picture as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Formats an integer according to a given picture string, using the conventions
 :             of a given natural language if specified.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-integer" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:integer?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-integer" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:integer?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="lang" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		default language.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; is an empty sequence, the function returns a zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In all other cases, the &amp;lt;code&amp;gt;$picture&amp;lt;/code&amp;gt; argument describes the format in which
 :                &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; is output.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The rules that follow describe how non-negative numbers are output. If the value of
 :                &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; is negative, the rules below are applied to the absolute value of
 :                &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt;, and a minus sign is prepended to the result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="L"&amp;gt;The value of &amp;lt;code&amp;gt;$picture&amp;lt;/code&amp;gt; consists of a primary format token, 
 :             optionally followed
 :             by a format modifier. The primary format token is always present and &amp;lt;rfc2119&amp;gt;must not&amp;lt;/rfc2119&amp;gt;
 :             be zero-length. If the string contains one or more semicolons then everything that
 :             precedes the last semicolon is taken as the primary format token and everything
 :             that follows is taken as the format modifier; if the string contains no
 :             semicolon then the entire picture is taken as the primary format token, and the
 :             format modifier is taken to be absent (which is equivalent to supplying a
 :             zero-length string).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The primary format token is classified as one of the following:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A &amp;lt;var&amp;gt;decimal-digit-pattern&amp;lt;/var&amp;gt; made up of &amp;lt;var&amp;gt;optional-digit-signs&amp;lt;/var&amp;gt;,
 :                      &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt;, and &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;var&amp;gt;optional-digit-sign&amp;lt;/var&amp;gt; is the character "#".&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A &amp;lt;var&amp;gt;mandatory-digit-sign&amp;lt;/var&amp;gt; is a &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; in Unicode category Nd. All
 :                            &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt; within the format token &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be from the
 :                         same digit family, where a digit family is a sequence of ten consecutive
 :                         characters in Unicode category Nd, having digit values 0 through 9. Within
 :                         the format token, these digits are interchangeable: a three-digit number may
 :                         thus be indicated equivalently by &amp;lt;code&amp;gt;000&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;001&amp;lt;/code&amp;gt;, or
 :                            &amp;lt;code&amp;gt;999&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;a &amp;lt;var&amp;gt;grouping-separator-sign&amp;lt;/var&amp;gt; is a non-alphanumeric character, that
 :                         is a &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; whose Unicode category is
 :                         other than Nd, Nl, No, Lu, Ll, Lt, Lm or Lo.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p diff="chg" at="L"&amp;gt;If the primary format token contains at least one Unicode digit 
 :                   then it is taken as a decimal digit pattern, and in this case it &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt;
 :                   match the regular expression &amp;lt;code&amp;gt;^((\p{Nd}|#|[^\p{N}\p{L}])+?)$&amp;lt;/code&amp;gt;. If it contains
 :                   a digit but does not match this pattern, a &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error 
 :                   is raised &amp;lt;errorref class="DF" code="1310"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;note&amp;gt;&amp;lt;p diff="add" at="L"&amp;gt;If a semicolon is to be used as a grouping separator, then the primary
 :                format token as a whole must be followed by another semicolon, to ensure that
 :                the grouping separator is not mistaken as a separator between the primary format
 :                token and the format modifier.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p&amp;gt;There &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be at least one &amp;lt;var&amp;gt;mandatory-digit-sign&amp;lt;/var&amp;gt;. There may be zero or
 :                   more &amp;lt;var&amp;gt;optional-digit-signs&amp;lt;/var&amp;gt;, and (if present) these &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; precede all
 :                      &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt;. There may be zero or more
 :                      &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt;. A &amp;lt;var&amp;gt;grouping-separator-sign&amp;lt;/var&amp;gt; &amp;lt;rfc2119&amp;gt;must
 :                   not&amp;lt;/rfc2119&amp;gt; appear at the start or end of the &amp;lt;var&amp;gt;decimal-digit-pattern&amp;lt;/var&amp;gt;, nor
 :                   adjacent to another &amp;lt;var&amp;gt;grouping-separator-sign&amp;lt;/var&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;The corresponding output format is a decimal number, using this digit family, with
 :                   at least as many digits as there are &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt; in the
 :                   format token. Thus, a format token &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt; generates the sequence &amp;lt;code&amp;gt;0 1
 :                      2 ... 10 11 12 ...&amp;lt;/code&amp;gt;, and a format token &amp;lt;code&amp;gt;01&amp;lt;/code&amp;gt; (or equivalently,
 :                      &amp;lt;code&amp;gt;00&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;99&amp;lt;/code&amp;gt;) generates the sequence &amp;lt;code&amp;gt;00 01 02 ...
 :                      09 10 11 12 ... 99 100 101&amp;lt;/code&amp;gt;. A format token of &amp;lt;code&amp;gt;&amp;amp;amp;#x661;&amp;lt;/code&amp;gt;
 :                   (Arabic-Indic digit one) generates the sequence &amp;lt;code&amp;gt;١&amp;lt;/code&amp;gt; then &amp;lt;code&amp;gt;٢&amp;lt;/code&amp;gt;
 :                   then &amp;lt;code&amp;gt;٣&amp;lt;/code&amp;gt; ...&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt; are handled as follows. The position of
 :                   grouping separators within the format token, counting backwards from the last
 :                   digit, indicates the position of grouping separators to appear within the
 :                   formatted number, and the character used as the &amp;lt;var&amp;gt;grouping-separator-sign&amp;lt;/var&amp;gt;
 :                   within the format token indicates the character to be used as the corresponding
 :                   grouping separator in the formatted number. If &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt;
 :                   appear at regular intervals within the format token, that is if the same grouping
 :                   separator appears at positions forming a sequence &amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt;, 2&amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt;,
 :                      3&amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt;, ... for some integer value &amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt; (including the case
 :                   where there is only one number in the list), then the sequence is extrapolated to
 :                   the left, so grouping separators will be used in the formatted number at every
 :                   multiple of &amp;lt;var&amp;gt;N&amp;lt;/var&amp;gt;. For example, if the format token is &amp;lt;code&amp;gt;0'000&amp;lt;/code&amp;gt;
 :                   then the number one million will be formatted as &amp;lt;code&amp;gt;1'000'000&amp;lt;/code&amp;gt;, while the
 :                   number fifteen will be formatted as &amp;lt;code&amp;gt;0'015&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;The only purpose of &amp;lt;var&amp;gt;optional-digit-signs&amp;lt;/var&amp;gt; is to mark the position of
 :                      &amp;lt;var&amp;gt;grouping-separator-signs&amp;lt;/var&amp;gt;. For example, if the format token is
 :                      &amp;lt;code&amp;gt;#'##0&amp;lt;/code&amp;gt; then the number one million will be formatted as
 :                      &amp;lt;code&amp;gt;1'000'000&amp;lt;/code&amp;gt;, while the number fifteen will be formatted as
 :                      &amp;lt;code&amp;gt;15&amp;lt;/code&amp;gt;. A grouping separator is included in the formatted number only
 :                   if there is a digit to its left, which will only be the case if either (a) the
 :                   number is large enough to require that digit, or (b) the number of
 :                      &amp;lt;var&amp;gt;mandatory-digit-signs&amp;lt;/var&amp;gt; in the format token requires insignificant
 :                   leading zeros to be present.&amp;lt;/p&amp;gt;&amp;lt;note&amp;gt;&amp;lt;p&amp;gt;Numbers will never be truncated. Given the &amp;lt;var&amp;gt;decimal-digit-pattern&amp;lt;/var&amp;gt;
 :                      &amp;lt;code&amp;gt;01&amp;lt;/code&amp;gt;, the number three hundred will be output as &amp;lt;code&amp;gt;300&amp;lt;/code&amp;gt;,
 :                      despite the absence of any &amp;lt;var&amp;gt;optional-digit-sign&amp;lt;/var&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;A&amp;lt;/code&amp;gt;, which generates the sequence &amp;lt;code&amp;gt;A B C ... Z AA AB
 :                      AC...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt;, which generates the sequence &amp;lt;code&amp;gt;a b c ... z aa ab
 :                      ac...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;i&amp;lt;/code&amp;gt;, which generates the sequence &amp;lt;code&amp;gt;i ii iii iv v vi vii
 :                      viii ix x ...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;I&amp;lt;/code&amp;gt;, which generates the sequence &amp;lt;code&amp;gt;I II III IV V VI VII
 :                      VIII IX X ...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;w&amp;lt;/code&amp;gt;, which generates numbers written as lower-case words, for
 :                   example in English, &amp;lt;code&amp;gt;one two three four ...&amp;lt;/code&amp;gt;
 :                &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;W&amp;lt;/code&amp;gt;, which generates numbers written as upper-case words, for
 :                   example in English, &amp;lt;code&amp;gt;ONE TWO THREE FOUR ...&amp;lt;/code&amp;gt;
 :                &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The format token &amp;lt;code&amp;gt;Ww&amp;lt;/code&amp;gt;, which generates numbers written as title-case words, for
 :                   example in English, &amp;lt;code&amp;gt;One Two Three Four ...&amp;lt;/code&amp;gt;
 :                &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Any other format token, which indicates a numbering sequence in which that token
 :                   represents the number 1 (one) (but see the note below).
 :                   &amp;lt;!-- Where possible (given the constraint that format tokens
 : 						must be alphanumeric, and that they must be distinct) the format token
 : 						used to represent a numbering sequence should be the same as the representation
 : 						of the number 1 (one) in that sequence.--&amp;gt;
 :                   It is &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; which
 :                   numbering sequences, additional to those listed above, are supported. If an
 :                   implementation does not support a numbering sequence represented by the given
 :                   token, it &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; use a format token of &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;note&amp;gt;&amp;lt;p&amp;gt;In some traditional numbering sequences additional signs are added to denote
 :                      that the letters should be interpreted as numbers; these are not included in
 :                      the format token. An example (see also the example below) is classical Greek
 :                      where a &amp;lt;emph&amp;gt;dexia keraia&amp;lt;/emph&amp;gt; (x0374, ʹ) and sometimes an &amp;lt;emph&amp;gt;aristeri keraia&amp;lt;/emph&amp;gt;
 :                      (x0375, ͵) is added.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For all format tokens other than the first kind above (one that consists of decimal
 :             digits), there &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; lower and upper bounds on the range of numbers that
 :             can be formatted using this format token; indeed, for some numbering sequences there may
 :             be intrinsic limits. For example, the format token &amp;lt;code&amp;gt;&amp;amp;amp;#x2460;&amp;lt;/code&amp;gt; (circled
 :             digit one, ①) has a range &amp;lt;phrase diff="chg" at="M"&amp;gt;imposed by the Unicode character repertoire — 1 to 20 in
 :             Unicode versions prior to 4.0, increased in subsequent versions&amp;lt;/phrase&amp;gt;. For
 :             the numbering sequences described above any upper bound imposed by the implementation
 :                &amp;lt;rfc2119&amp;gt;must not&amp;lt;/rfc2119&amp;gt; be less than 1000 (one thousand) and any lower bound must
 :             not be greater than 1. Numbers that fall outside this range &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be
 :             formatted using the format token &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The above expansions of numbering sequences for format tokens such as &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; and
 :                &amp;lt;code&amp;gt;i&amp;lt;/code&amp;gt; are indicative but not prescriptive. There are various conventions in
 :             use for how alphabetic sequences continue when the alphabet is exhausted, and differing
 :             conventions for how roman numerals are written (for example, &amp;lt;code&amp;gt;IV&amp;lt;/code&amp;gt; versus
 :                &amp;lt;code&amp;gt;IIII&amp;lt;/code&amp;gt; as the representation of the number 4). Sometimes alphabetic
 :             sequences are used that omit letters such as &amp;lt;code&amp;gt;i&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt;. This
 :             specification does not prescribe the detail of any sequence other than those sequences
 :             consisting entirely of decimal digits.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Many numbering sequences are language-sensitive. This applies especially to the sequence
 :             selected by the tokens &amp;lt;code&amp;gt;w&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;W&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;Ww&amp;lt;/code&amp;gt;. It also
 :             applies to other sequences, for example different languages using the Cyrillic alphabet
 :             use different sequences of characters, each starting with the letter #x410 (Cyrillic
 :             capital letter A). In such cases, the &amp;lt;code&amp;gt;$lang&amp;lt;/code&amp;gt; argument specifies which
 :             language's conventions are to be used. &amp;lt;phrase diff="chg" at="L"&amp;gt;If the argument
 :             is specified, the value &amp;lt;rfc2119&amp;gt;should&amp;lt;/rfc2119&amp;gt; be either an empty sequence
 :             or a value that would be valid for the &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute (see &amp;lt;bibref ref="REC-xml"/&amp;gt;).
 :             Note that this permits the identification of sublanguages based on country codes (from ISO 3166-1)
 :             as well as identification of dialects and regions within a country.&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The set of languages
 :             for which numbering is supported is &amp;lt;termref def="implementation-defined"/&amp;gt;.
 :             If the &amp;lt;code&amp;gt;$lang&amp;lt;/code&amp;gt; argument is absent, 
 :             or is set to an empty sequence, or is invalid, or is not a language supported by the
 :             implementation, then the number is formatted using &amp;lt;phrase diff="chg" at="K"&amp;gt;the
 :             default language from the dynamic context&amp;lt;/phrase&amp;gt;. 
 :             &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The format modifier &amp;lt;phrase diff="chg" at="L"&amp;gt;&amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt;
 :             be a string that matches the regular expression &amp;lt;code diff="chg" at="M"&amp;gt;^([co](\(.+\))?)?[at]?$&amp;lt;/code&amp;gt;. &amp;lt;/phrase&amp;gt;
 :             That is, if it is present it must consist of one &amp;lt;phrase diff="add" at="G"&amp;gt;or more&amp;lt;/phrase&amp;gt; of
 :             the following, in &amp;lt;phrase diff="del" at="K"&amp;gt;any&amp;lt;/phrase&amp;gt; order:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="chg" at="G"&amp;gt;either &amp;lt;code&amp;gt;c&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt;, optionally followed by
 :                   a sequence of characters enclosed between parentheses, to indicate cardinal or
 :                   ordinal numbering respectively, the default being cardinal numbering&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="chg" at="G"&amp;gt;either &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;t&amp;lt;/code&amp;gt;, to indicate alphabetic
 :                   or traditional numbering respectively, the default being &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt; modifier is present, this indicates a request to output ordinal
 :             numbers rather than cardinal numbers. For example, in English, when used with the format
 :             token &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;, this outputs the sequence &amp;lt;code&amp;gt;1st 2nd 3rd 4th ...&amp;lt;/code&amp;gt;, and
 :             when used with the format token &amp;lt;code&amp;gt;w&amp;lt;/code&amp;gt; outputs the sequence &amp;lt;code&amp;gt;first second
 :             third fourth ...&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;The string of characters between the parentheses, if present, is used to
 :          select between other possible variations of cardinal or ordinal numbering sequences.
 :          The interpretation of this string is &amp;lt;termref def="implemementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt;. No error occurs
 :          if the implementation does not define any interpretation for the defined string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For example, in some languages, ordinal numbers vary depending on the grammatical context:
 :             they may have different genders and may decline with the noun that they qualify.
 :             In such cases the string appearing in parentheses after the letter &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt; may be
 :             used to indicate the variation of the ordinal number required. The way in which the
 :             variation is indicated will depend on the conventions of the language. For inflected
 :             languages that vary the ending of the word, the &amp;lt;rfc2119&amp;gt;recommended&amp;lt;/rfc2119&amp;gt; approach is to indicate the
 :             required ending, preceded by a hyphen: for example in German, appropriate values are
 :                &amp;lt;code&amp;gt;o(-e)&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;o(-er)&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;o(-es)&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;o(-en)&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;It is &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; what
 :             combinations of values of the format token, the language, and the cardinal/ordinal
 :             modifier are supported. If ordinal numbering is not supported for the combination of the
 :             format token, the language, and the string appearing in parentheses, the request is
 :             ignored and cardinal numbers are generated instead.&amp;lt;/p&amp;gt;&amp;lt;example xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;head&amp;gt;Ordinal Numbering in Italian&amp;lt;/head&amp;gt;&amp;lt;p&amp;gt;The specification &amp;lt;code&amp;gt;"1;o(-º)"&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$lang&amp;lt;/code&amp;gt; equal to
 :                   &amp;lt;code&amp;gt;it&amp;lt;/code&amp;gt;, if supported, should produce the sequence:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;1º 2º 3º 4º ...&amp;lt;/eg&amp;gt;&amp;lt;p&amp;gt;The specification &amp;lt;code&amp;gt;"Ww;o"&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;$lang&amp;lt;/code&amp;gt; equal to
 :                   &amp;lt;code&amp;gt;it&amp;lt;/code&amp;gt;, if supported, should produce the sequence:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;Primo Secondo Terzo Quarto Quinto ...&amp;lt;/eg&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;phrase diff="chg" at="G"&amp;gt;use of the &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;t&amp;lt;/code&amp;gt;
 :                modifier&amp;lt;/phrase&amp;gt; disambiguates between numbering sequences that use letters. In many
 :             languages there are two commonly used numbering sequences that use letters. One
 :             numbering sequence assigns numeric values to letters in alphabetic sequence, and the
 :             other assigns numeric values to each letter in some other manner traditional in that
 :             language. In English, these would correspond to the numbering sequences specified by the
 :             format tokens &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;i&amp;lt;/code&amp;gt;. In some languages, the first member of
 :             each sequence is the same, and so the format token alone would be ambiguous. &amp;lt;phrase diff="chg" at="G"&amp;gt;In the absence of the &amp;lt;code&amp;gt;a&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;t&amp;lt;/code&amp;gt; modifier,
 :                the default is &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt;&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DF" code="1310"/&amp;gt; if the format token is invalid,
 :             that is, if it violates any mandatory rules (indicated by an emphasized &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt;
 :             or &amp;lt;rfc2119&amp;gt;required&amp;lt;/rfc2119&amp;gt; keyword in the above rules). For example, the error is raised if
 :             the primary format token contains a digit but does not match the required regular expression.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-integer
 :)
declare function fn:format-integer( $value as xs:integer?,  $picture as xs:string,  $language as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string containing a number formatted according to a given picture
 :             string, taking account of decimal formats specified in the static context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-number" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="numeric?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-number" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="numeric?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="decimal-format-name" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		decimal formats, and namespaces.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="K"&amp;gt;The effect of the two-argument form of the function is equivalent to calling
 :          the three-argument form with an empty sequence as the value of the third argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function formats &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; as a string using the &amp;lt;termref def="dt-picture-string"&amp;gt;picture string&amp;lt;/termref&amp;gt; specified by the
 :                &amp;lt;code&amp;gt;$picture&amp;lt;/code&amp;gt; argument and the decimal-format named by the
 :                &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt; argument, or the default decimal-format, if there
 :             is no &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt; argument. The syntax of the picture string is
 :             described in &amp;lt;specref ref="syntax-of-picture-string"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; argument may be of any numeric data type
 :             (&amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt;, or their
 :             subtypes including &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt;). Note that if an &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; is
 :             supplied, it is not automatically promoted to an &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, as such
 :             promotion can involve a loss of precision.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the supplied value of the &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; argument is an empty sequence, the
 :             function behaves as if the supplied value were the &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The value of &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt;, 
 :             &amp;lt;phrase diff="add" at="K"&amp;gt;if present and non-empty, &amp;lt;/phrase&amp;gt;
 :             &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; &amp;lt;phrase diff="chg" at="L"&amp;gt;be a string which after removal of leading and trailing whitespace is in the form of an
 :             an &amp;lt;code&amp;gt;EQName&amp;lt;/code&amp;gt; as defined in the XPath 3.0 grammar, that is one of the following&amp;lt;/phrase&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A lexical QName, which is expanded using the 
 :                &amp;lt;phrase diff="chg" at="J"&amp;gt;statically known namespaces&amp;lt;/phrase&amp;gt;. 
 :                The default namespace is not used (no prefix means no namespace).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="add" at="L"&amp;gt;A &amp;lt;code&amp;gt;URIQualifiedName&amp;lt;/code&amp;gt; using the syntax &amp;lt;code&amp;gt;Q{uri}local&amp;lt;/code&amp;gt;,
 :             where the URI can be zero-length to indicate a name in no namespace.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="K"&amp;gt;The decimal format that is used is the decimal format
 :          in the static context whose name matches &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt; if supplied,
 :          or the default decimal format in the static context otherwise.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The evaluation of the &amp;lt;function&amp;gt;format-number&amp;lt;/function&amp;gt; function takes place in two
 :             phases, an analysis phase described in &amp;lt;specref ref="analysing-picture-string"/&amp;gt; and a
 :             formatting phase described in &amp;lt;specref ref="formatting-the-number"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The analysis phase takes as its inputs the &amp;lt;termref def="dt-picture-string"&amp;gt;picture
 :                string&amp;lt;/termref&amp;gt; and the variables derived from the relevant decimal format in the
 :             static context, and produces as its output a number of variables with defined values.
 :             The formatting phase takes as its inputs the number to be formatted and the variables
 :             produced by the analysis phase, and produces as its output a string containing a
 :             formatted representation of the number.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function is the formatted string representation of the supplied
 :             number.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DF" code="1280"/&amp;gt; if the name specified as the
 :                &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt; argument is 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;neither a valid lexical QName nor a valid &amp;lt;code&amp;gt;URIQualifiedName&amp;lt;/code&amp;gt;&amp;lt;/phrase&amp;gt;, or if it
 :             uses a prefix &amp;lt;phrase diff="add" at="J"&amp;gt;that is not found in the statically known namespaces&amp;lt;/phrase&amp;gt;, or if the static
 :             context does not contain a declaration of a decimal-format with a matching expanded
 :             QName. If the processor is able to detect the error statically (for example, when the
 :             argument is supplied as a string literal), then the processor &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt;
 :             optionally signal this as a static error.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-number
 :)
declare function fn:format-number($value as numeric?,  $picture as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string containing a number formatted according to a given picture
 :             string, taking account of decimal formats specified in the static context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-number" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="numeric?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-number" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="numeric?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="decimal-format-name" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		decimal formats, and namespaces.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="K"&amp;gt;The effect of the two-argument form of the function is equivalent to calling
 :          the three-argument form with an empty sequence as the value of the third argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function formats &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; as a string using the &amp;lt;termref def="dt-picture-string"&amp;gt;picture string&amp;lt;/termref&amp;gt; specified by the
 :                &amp;lt;code&amp;gt;$picture&amp;lt;/code&amp;gt; argument and the decimal-format named by the
 :                &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt; argument, or the default decimal-format, if there
 :             is no &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt; argument. The syntax of the picture string is
 :             described in &amp;lt;specref ref="syntax-of-picture-string"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; argument may be of any numeric data type
 :             (&amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt;, or their
 :             subtypes including &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt;). Note that if an &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; is
 :             supplied, it is not automatically promoted to an &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, as such
 :             promotion can involve a loss of precision.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the supplied value of the &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; argument is an empty sequence, the
 :             function behaves as if the supplied value were the &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The value of &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt;, 
 :             &amp;lt;phrase diff="add" at="K"&amp;gt;if present and non-empty, &amp;lt;/phrase&amp;gt;
 :             &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; &amp;lt;phrase diff="chg" at="L"&amp;gt;be a string which after removal of leading and trailing whitespace is in the form of an
 :             an &amp;lt;code&amp;gt;EQName&amp;lt;/code&amp;gt; as defined in the XPath 3.0 grammar, that is one of the following&amp;lt;/phrase&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A lexical QName, which is expanded using the 
 :                &amp;lt;phrase diff="chg" at="J"&amp;gt;statically known namespaces&amp;lt;/phrase&amp;gt;. 
 :                The default namespace is not used (no prefix means no namespace).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="add" at="L"&amp;gt;A &amp;lt;code&amp;gt;URIQualifiedName&amp;lt;/code&amp;gt; using the syntax &amp;lt;code&amp;gt;Q{uri}local&amp;lt;/code&amp;gt;,
 :             where the URI can be zero-length to indicate a name in no namespace.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="K"&amp;gt;The decimal format that is used is the decimal format
 :          in the static context whose name matches &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt; if supplied,
 :          or the default decimal format in the static context otherwise.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The evaluation of the &amp;lt;function&amp;gt;format-number&amp;lt;/function&amp;gt; function takes place in two
 :             phases, an analysis phase described in &amp;lt;specref ref="analysing-picture-string"/&amp;gt; and a
 :             formatting phase described in &amp;lt;specref ref="formatting-the-number"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The analysis phase takes as its inputs the &amp;lt;termref def="dt-picture-string"&amp;gt;picture
 :                string&amp;lt;/termref&amp;gt; and the variables derived from the relevant decimal format in the
 :             static context, and produces as its output a number of variables with defined values.
 :             The formatting phase takes as its inputs the number to be formatted and the variables
 :             produced by the analysis phase, and produces as its output a string containing a
 :             formatted representation of the number.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function is the formatted string representation of the supplied
 :             number.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DF" code="1280"/&amp;gt; if the name specified as the
 :                &amp;lt;code&amp;gt;$decimal-format-name&amp;lt;/code&amp;gt; argument is 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;neither a valid lexical QName nor a valid &amp;lt;code&amp;gt;URIQualifiedName&amp;lt;/code&amp;gt;&amp;lt;/phrase&amp;gt;, or if it
 :             uses a prefix &amp;lt;phrase diff="add" at="J"&amp;gt;that is not found in the statically known namespaces&amp;lt;/phrase&amp;gt;, or if the static
 :             context does not contain a declaration of a decimal-format with a matching expanded
 :             QName. If the processor is able to detect the error statically (for example, when the
 :             argument is supplied as a string literal), then the processor &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt;
 :             optionally signal this as a static error.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-number
 :)
declare function fn:format-number( $value as numeric?,  $picture as xs:string,  $decimal-format-name as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string containing an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; value formatted for display.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-time" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:time?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-time" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:time?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="language" type="xs:string?"/&amp;gt;&amp;lt;arg name="calendar" type="xs:string?"/&amp;gt;&amp;lt;arg name="place" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		default calendar, and default language, and default place, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The five-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone, and namespaces.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See &amp;lt;specref ref="rules-for-datetime-formatting"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-time
 :)
declare function fn:format-time( $value as xs:time?,  $picture as xs:string,  $language as xs:string?,  $calendar as xs:string?,  $place as xs:string?) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string containing an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt; value formatted for display.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-time" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:time?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="format-time" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="xs:time?"/&amp;gt;&amp;lt;arg name="picture" type="xs:string"/&amp;gt;&amp;lt;arg name="language" type="xs:string?"/&amp;gt;&amp;lt;arg name="calendar" type="xs:string?"/&amp;gt;&amp;lt;arg name="place" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		default calendar, and default language, and default place, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The five-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone, and namespaces.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See &amp;lt;specref ref="rules-for-datetime-formatting"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-format-time
 :)
declare function fn:format-time($value as xs:time?,  $picture as xs:string) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the arity of the function identified by a function item.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="function-arity" return-type="xs:integer" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="func" type="function(*)"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;fn:function-arity&amp;lt;/code&amp;gt; function returns the arity (number of arguments) of
 :             the function identified by &amp;lt;code&amp;gt;$func&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:function-arity(fn:substring#2)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;2&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:function-arity(function($node){name($node)})&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;let $initial := fn:substring(?, 1, 1) return fn:function-arity($initial)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-function-arity
 :)
declare function fn:function-arity($func as function(*)) as  xs:integer external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function returns a string that uniquely identifies a given node. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="generate-id" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="generate-id" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is the empty sequence, the result is the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In other cases, the function returns a string that uniquely identifies a given node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The returned identifier &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; consist of ASCII alphanumeric characters
 :             and &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; start with an alphabetic character. Thus, the string is
 :             syntactically an XML name.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;An implementation is free to generate an identifier in any convenient way provided that
 :             it always generates the same identifier for the same node and that different identifiers
 :             are always generated from different nodes. An implementation is under no obligation to
 :             generate the same identifiers each time a document is transformed or queried.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-generate-id
 :)
declare function fn:generate-id() as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function returns a string that uniquely identifies a given node. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="generate-id" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="generate-id" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is the empty sequence, the result is the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In other cases, the function returns a string that uniquely identifies a given node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The returned identifier &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; consist of ASCII alphanumeric characters
 :             and &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; start with an alphabetic character. Thus, the string is
 :             syntactically an XML name.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;An implementation is free to generate an identifier in any convenient way provided that
 :             it always generates the same identifier for the same node and that different identifiers
 :             are always generated from different nodes. An implementation is under no obligation to
 :             generate the same identifiers each time a document is transformed or queried.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-generate-id
 :)
declare function fn:generate-id($arg as node()?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the first item in a sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="head" return-type="item()?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the value of the expression &amp;lt;code&amp;gt;$arg[1]&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the empty sequence is returned. Otherwise
 :             the first item in the sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-head
 :)
declare function fn:head($arg as item()*) as  item()? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of hours in a duration.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="hours-from-duration" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:duration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; representing the hours
 :             component in the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. The result is obtained by casting
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; to an &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; (see &amp;lt;specref ref="casting-to-durations"/&amp;gt;) and then computing the hours component as described in
 :                &amp;lt;specref ref="canonical-dayTimeDuration"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a negative duration then the result will be negative..&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; the function returns 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-duration(xs:dayTimeDuration("P3DT10H"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;10&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-duration(xs:dayTimeDuration("P3DT12H32M12S"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;12&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-duration(xs:dayTimeDuration("PT123H"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;3&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-duration(xs:dayTimeDuration("-P3DT10H"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;-10&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-hours-from-duration
 :)
declare function fn:hours-from-duration($arg as xs:duration?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the hours component of an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="hours-from-time" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:time?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; between 0 and 23, both
 :             inclusive, representing the value of the hours component in the local value of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Assume that the dynamic context provides an implicit timezone value of
 :                   &amp;lt;code&amp;gt;-05:00&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-time(xs:time("11:23:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;11&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-time(xs:time("21:23:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;21&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-time(xs:time("01:23:00+05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-time(fn:adjust-time-to-timezone(xs:time("01:23:00+05:00"),
 :                   xs:dayTimeDuration("PT0S")))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;20&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:hours-from-time(xs:time("24:00:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-hours-from-time
 :)
declare function fn:hours-from-time($arg as xs:time?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the sequence of element nodes that have an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value
 :             matching the value of one or more of the &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values supplied in
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="id" return-type="element()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="id" return-type="element()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;arg name="node" type="node()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence, in document order with duplicates eliminated,
 :             containing every element node &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; that satisfies all the following
 :             conditions:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;
 :                   &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; is in the target document. The target document is the document
 :                   containing &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the document containing the context item
 :                      (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) if the second argument is omitted. The behavior of the
 :                   function if &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted is exactly the same as if the context
 :                   item had been passed as &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value equal to one of the candidate
 :                      &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values, where:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; An element has an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; if either
 :                         or both of the following conditions are true:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property (See &amp;lt;xspecref spec="DM30" ref="dm-is-id"/&amp;gt;.) of the element node is true, and the typed value
 :                               of the element node is equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the
 :                                  &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator using the Unicode codepoint collation
 :                                  (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The element has an attribute node whose &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property
 :                               (See &amp;lt;xspecref spec="DM30" ref="dm-is-id"/&amp;gt;.) is true and whose typed
 :                               value is equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the
 :                                  &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator using the Unicode code point collation
 :                                  (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; Each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is parsed as if it were of
 :                         type &amp;lt;code&amp;gt;IDREFS&amp;lt;/code&amp;gt;, that is, each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in
 :                            &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is treated as a whitespace-separated sequence of
 :                         tokens, each acting as an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;. These tokens are then included
 :                         in the list of candidate &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;s. If any of the tokens is not a
 :                         lexically valid &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; (that is, if it is not lexically an
 :                            &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;), it is ignored. Formally, the candidate
 :                            &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values are the strings in the sequence given by the
 :                         expression:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;for $s in $arg return 
 :     fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]&amp;lt;/eg&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If several elements have the same &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value, then &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; is
 :                   the one that is first in document order.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0001" type="dynamic"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context item if the second argument is absent, is a node
 :                in a tree whose root is not a document node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-id
 :)
declare function fn:id($arg as xs:string*) as  element()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the sequence of element nodes that have an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value
 :             matching the value of one or more of the &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values supplied in
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="id" return-type="element()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="id" return-type="element()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;arg name="node" type="node()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence, in document order with duplicates eliminated,
 :             containing every element node &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; that satisfies all the following
 :             conditions:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;
 :                   &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; is in the target document. The target document is the document
 :                   containing &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the document containing the context item
 :                      (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) if the second argument is omitted. The behavior of the
 :                   function if &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted is exactly the same as if the context
 :                   item had been passed as &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value equal to one of the candidate
 :                      &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values, where:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; An element has an &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; if either
 :                         or both of the following conditions are true:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property (See &amp;lt;xspecref spec="DM30" ref="dm-is-id"/&amp;gt;.) of the element node is true, and the typed value
 :                               of the element node is equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the
 :                                  &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator using the Unicode codepoint collation
 :                                  (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The element has an attribute node whose &amp;lt;code&amp;gt;is-id&amp;lt;/code&amp;gt; property
 :                               (See &amp;lt;xspecref spec="DM30" ref="dm-is-id"/&amp;gt;.) is true and whose typed
 :                               value is equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the
 :                                  &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator using the Unicode code point collation
 :                                  (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; Each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is parsed as if it were of
 :                         type &amp;lt;code&amp;gt;IDREFS&amp;lt;/code&amp;gt;, that is, each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in
 :                            &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is treated as a whitespace-separated sequence of
 :                         tokens, each acting as an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;. These tokens are then included
 :                         in the list of candidate &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;s. If any of the tokens is not a
 :                         lexically valid &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; (that is, if it is not lexically an
 :                            &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;), it is ignored. Formally, the candidate
 :                            &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; values are the strings in the sequence given by the
 :                         expression:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;for $s in $arg return 
 :     fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]&amp;lt;/eg&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If several elements have the same &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; value, then &amp;lt;code&amp;gt;E&amp;lt;/code&amp;gt; is
 :                   the one that is first in document order.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0001" type="dynamic"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context item if the second argument is absent, is a node
 :                in a tree whose root is not a document node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-id
 :)
declare function fn:id($arg as xs:string*,  $node as node()) as  element()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the sequence of element or attribute nodes with an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;
 :             value matching the value of one or more of the &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; values supplied in
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="idref" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="idref" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;arg name="node" type="node()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; The function returns a sequence, in document order with duplicates eliminated,
 :             containing every element or attribute node &amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; that satisfies all the
 :             following conditions:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; is in the target document. The target document is the document
 :                   containing &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; or the document containing the context item
 :                      (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) if the second argument is omitted. The behavior of the
 :                   function if &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted is exactly the same as if the context
 :                   item had been passed as &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; value equal to one of the candidate
 :                      &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; values, where:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A node &amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; value equal to
 :                            &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; if both of the following conditions are true:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;is-idrefs&amp;lt;/code&amp;gt; property (see &amp;lt;xspecref spec="DM30" ref="dm-is-idrefs"/&amp;gt;) of &amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; is &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The sequence &amp;lt;!--Text replaced by erratum E29 change 1"--&amp;gt;&amp;lt;eg diff="chg" at="A-E29" xml:space="preserve"&amp;gt;fn:tokenize(fn:normalize-space(fn:string($N)), ' ')&amp;lt;/eg&amp;gt;
 :                               &amp;lt;!--End of text replaced by erratum E29--&amp;gt; contains a string that is
 :                               equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt;
 :                               operator using the Unicode code point collation
 :                                  (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is parsed as if it were of
 :                         lexically of type &amp;lt;code&amp;gt;xs:ID&amp;lt;/code&amp;gt;. These &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;s are then
 :                         included in the list of candidate &amp;lt;code&amp;gt;xs:ID&amp;lt;/code&amp;gt;s. If any of the strings
 :                         in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a lexically valid &amp;lt;code&amp;gt;xs:ID&amp;lt;/code&amp;gt; (that is,
 :                         if it is not lexically an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;), it is ignored. More
 :                         formally, the candidate &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; values are the strings in the
 :                         sequence:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;$arg[. castable as xs:NCName]&amp;lt;/eg&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0001" type="dynamic"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context item if the second argument is omitted, is a node
 :                in a tree whose root is not a document node. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-idref
 :)
declare function fn:idref($arg as xs:string*) as  node()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the sequence of element or attribute nodes with an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt;
 :             value matching the value of one or more of the &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; values supplied in
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="idref" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="idref" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string*"/&amp;gt;&amp;lt;arg name="node" type="node()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; The function returns a sequence, in document order with duplicates eliminated,
 :             containing every element or attribute node &amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; that satisfies all the
 :             following conditions:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; is in the target document. The target document is the document
 :                   containing &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; or the document containing the context item
 :                      (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) if the second argument is omitted. The behavior of the
 :                   function if &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted is exactly the same as if the context
 :                   item had been passed as &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; value equal to one of the candidate
 :                      &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; values, where:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A node &amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;IDREF&amp;lt;/code&amp;gt; value equal to
 :                            &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; if both of the following conditions are true:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;is-idrefs&amp;lt;/code&amp;gt; property (see &amp;lt;xspecref spec="DM30" ref="dm-is-idrefs"/&amp;gt;) of &amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; is &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;The sequence &amp;lt;!--Text replaced by erratum E29 change 1"--&amp;gt;&amp;lt;eg diff="chg" at="A-E29" xml:space="preserve"&amp;gt;fn:tokenize(fn:normalize-space(fn:string($N)), ' ')&amp;lt;/eg&amp;gt;
 :                               &amp;lt;!--End of text replaced by erratum E29--&amp;gt; contains a string that is
 :                               equal to &amp;lt;code&amp;gt;V&amp;lt;/code&amp;gt; under the rules of the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt;
 :                               operator using the Unicode code point collation
 :                                  (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Each &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is parsed as if it were of
 :                         lexically of type &amp;lt;code&amp;gt;xs:ID&amp;lt;/code&amp;gt;. These &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;s are then
 :                         included in the list of candidate &amp;lt;code&amp;gt;xs:ID&amp;lt;/code&amp;gt;s. If any of the strings
 :                         in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a lexically valid &amp;lt;code&amp;gt;xs:ID&amp;lt;/code&amp;gt; (that is,
 :                         if it is not lexically an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;), it is ignored. More
 :                         formally, the candidate &amp;lt;code&amp;gt;ID&amp;lt;/code&amp;gt; values are the strings in the
 :                         sequence:&amp;lt;/p&amp;gt;&amp;lt;eg xml:space="preserve"&amp;gt;$arg[. castable as xs:NCName]&amp;lt;/eg&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0001" type="dynamic"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context item if the second argument is omitted, is a node
 :                in a tree whose root is not a document node. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-idref
 :)
declare function fn:idref($arg as xs:string*,  $node as node()) as  node()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the prefixes of the in-scope namespaces for an element node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="in-scope-prefixes" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="element" type="element()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of strings representing the prefixes of the in-scope
 :             namespaces for &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For namespace bindings that have a prefix, the function returns the prefix as an
 :                &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;. For the default namespace, which has no prefix, it returns
 :             the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result sequence contains no duplicates.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The ordering of the result sequence is &amp;lt;termref def="implementation-dependent"&amp;gt;implementation-dependent&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-in-scope-prefixes
 :)
declare function fn:in-scope-prefixes($element as element()) as  xs:string* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of positive integers giving the positions within the
 :             sequence &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; of items that are equal to &amp;lt;code&amp;gt;$search&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="index-of" return-type="xs:integer*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="search" type="xs:anyAtomicType"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="index-of" return-type="xs:integer*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="search" type="xs:anyAtomicType"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of positive integers giving the positions within the
 :             sequence &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; of items that are equal to &amp;lt;code&amp;gt;$search&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;. This collation is used when string comparison is
 :             required.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The items in the sequence &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; are compared with &amp;lt;code&amp;gt;$search&amp;lt;/code&amp;gt; under
 :             the rules for the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator. Values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt;
 :             are compared as if they were of type &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;. Values that cannot be
 :             compared, because the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator is not defined for their types, are
 :             considered to be distinct. If an item compares equal, then the position of that item in
 :             the sequence &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; is included in the result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The first item in a sequence is at position 1, not position 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result sequence is in ascending numeric order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; is the empty sequence, or if no item in
 :                &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; matches &amp;lt;code&amp;gt;$search&amp;lt;/code&amp;gt;, then the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="D"&amp;gt;No error occurs if non-comparable values are encountered. So when
 :             comparing two atomic values, the effective boolean value of &amp;lt;code&amp;gt;fn:index-of($a,
 :                $b)&amp;lt;/code&amp;gt; is true if &amp;lt;code&amp;gt;$a&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$b&amp;lt;/code&amp;gt; are equal, false if they
 :             are not equal or not comparable.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-index-of
 :)
declare function fn:index-of( $seq as xs:anyAtomicType*,  $search as xs:anyAtomicType) as  xs:integer* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of positive integers giving the positions within the
 :             sequence &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; of items that are equal to &amp;lt;code&amp;gt;$search&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="index-of" return-type="xs:integer*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="search" type="xs:anyAtomicType"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="index-of" return-type="xs:integer*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="search" type="xs:anyAtomicType"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of positive integers giving the positions within the
 :             sequence &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; of items that are equal to &amp;lt;code&amp;gt;$search&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;. This collation is used when string comparison is
 :             required.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The items in the sequence &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; are compared with &amp;lt;code&amp;gt;$search&amp;lt;/code&amp;gt; under
 :             the rules for the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator. Values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt;
 :             are compared as if they were of type &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;. Values that cannot be
 :             compared, because the &amp;lt;code&amp;gt;eq&amp;lt;/code&amp;gt; operator is not defined for their types, are
 :             considered to be distinct. If an item compares equal, then the position of that item in
 :             the sequence &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; is included in the result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The first item in a sequence is at position 1, not position 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result sequence is in ascending numeric order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; is the empty sequence, or if no item in
 :                &amp;lt;code&amp;gt;$seq&amp;lt;/code&amp;gt; matches &amp;lt;code&amp;gt;$search&amp;lt;/code&amp;gt;, then the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="D"&amp;gt;No error occurs if non-comparable values are encountered. So when
 :             comparing two atomic values, the effective boolean value of &amp;lt;code&amp;gt;fn:index-of($a,
 :                $b)&amp;lt;/code&amp;gt; is true if &amp;lt;code&amp;gt;$a&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$b&amp;lt;/code&amp;gt; are equal, false if they
 :             are not equal or not comparable.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-index-of
 :)
declare function fn:index-of( $seq as xs:anyAtomicType*,  $search as xs:anyAtomicType,  $collation as xs:string) as  xs:integer* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence constructed by inserting an item or a sequence of items at a
 :             given position within an existing sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="insert-before" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="target" type="item()*"/&amp;gt;&amp;lt;arg name="position" type="xs:integer"/&amp;gt;&amp;lt;arg name="inserts" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The value returned by the function consists of all items of &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; whose
 :             index is less than &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt;, followed by all items of
 :                &amp;lt;code&amp;gt;$inserts&amp;lt;/code&amp;gt;, followed by the remaining elements of &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt;, in
 :             that order. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; is the empty sequence, &amp;lt;code&amp;gt;$inserts&amp;lt;/code&amp;gt; is returned. If
 :                &amp;lt;code&amp;gt;$inserts&amp;lt;/code&amp;gt; is the empty sequence, &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt; is less than one (1), the first position, the effective value
 :             of &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt; is one (1). If &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt; is greater than the
 :             number of items in &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt;, then the effective value of
 :                &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt; is equal to the number of items in &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; plus
 :             1. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The value of &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; is not affected by the sequence construction.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-insert-before
 :)
declare function fn:insert-before( $target as item()*,  $position as xs:integer,  $inserts as item()*) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the local part of the supplied QName.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="local-name-from-QName" return-type="xs:NCName?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:QName?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt; representing the local part of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:local-name-from-QName(fn:QName("http://www.example.com/example",
 :                   "person"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;"person"&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-local-name-from-QName
 :)
declare function fn:local-name-from-QName($arg as xs:QName?) as  xs:NCName? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Converts a string to lower case.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="lower-case" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the zero-length string is
 :             returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; after translating every
 :                &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; to its lower-case correspondent as
 :             defined in the appropriate case mappings section in the Unicode standard &amp;lt;bibref ref="Unicode"/&amp;gt;. For versions of Unicode beginning with the 2.1.8 update, only
 :             locale-insensitive case mappings should be applied. Beginning with version 3.2.0 (and
 :             likely future versions) of Unicode, precise mappings are described in default case
 :             operations, which are full case mappings in the absence of tailoring for particular
 :             languages and environments. Every upper-case character that does not have a lower-case
 :             correspondent, as well as every lower-case character, is included in the returned value
 :             in its original form. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Case mappings may change the length of a string. In general, the
 :                &amp;lt;code&amp;gt;fn:upper-case&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:lower-case&amp;lt;/code&amp;gt; functions are not inverses
 :             of each other: &amp;lt;code&amp;gt;fn:lower-case(fn:upper-case($arg))&amp;lt;/code&amp;gt; is not guaranteed to
 :             return &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, nor is &amp;lt;code&amp;gt;fn:upper-case(fn:lower-case($arg))&amp;lt;/code&amp;gt;. The
 :             Latin small letter dotless i (as used in Turkish) is perhaps the most prominent
 :             lower-case letter which will not round-trip. The Latin capital letter i with dot above
 :             is the most prominent upper-case letter which will not round trip; there are others,
 :             such as Latin capital letter Sharp S (#1E9E) which is introduced in Unicode 5.1.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; These functions may not always be linguistically appropriate (e.g. Turkish i without
 :             dot) or appropriate for the application (e.g. titlecase). In cases such as Turkish, a
 :             simple translation should be used first.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; Because the function is not sensitive to locale, results will not always match user
 :             expectations. In Quebec, for example, the standard uppercase equivalent of "è" is "È",
 :             while in metropolitan France it is more commonly "E"; only one of these is supported by
 :             the functions as defined.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; Many characters of class Ll lack uppercase equivalents in the Unicode case mapping
 :             tables; many characters of class Lu lack lowercase equivalents.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-lower-case
 :)
declare function fn:lower-case($arg as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Applies the function item &amp;lt;var&amp;gt;$f&amp;lt;/var&amp;gt; to every item from the sequence
 :                &amp;lt;var&amp;gt;$seq&amp;lt;/var&amp;gt; in turn, returning the concatenation of the resulting sequences in
 :             order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="for-each" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq" type="item()*"/&amp;gt;&amp;lt;arg name="f" type="function(item()) as item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of the function is equivalent to the following implementation in XQuery:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : declare function fn:for-each($seq, $f) {
 :   if (fn:empty($seq))
 :   then ()
 :   else ($f(fn:head($seq)), fn:for-each(fn:tail($seq), $f))
 : };&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;or its equivalent in XSLT:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : &amp;amp;lt;xsl:function name="fn:for-each"&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="seq"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="f"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:if test="fn:exists($seq)"&amp;amp;gt;
 :     &amp;amp;lt;xsl:sequence select="$f(fn:head($seq)), fn:for-each(fn:tail($seq), $f)"/&amp;amp;gt;
 :   &amp;amp;lt;/xsl:if&amp;amp;gt;
 : &amp;amp;lt;/xsl:function&amp;amp;gt;
 :          &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function call &amp;lt;code&amp;gt;fn:for-each($SEQ, $F)&amp;lt;/code&amp;gt; is equivalent to the expression
 :                &amp;lt;code&amp;gt;for $i in $SEQ return $F($i)&amp;lt;/code&amp;gt;&amp;lt;phrase diff="add" at="G"&amp;gt;, assuming that
 :                ordering mode is &amp;lt;code&amp;gt;ordered&amp;lt;/code&amp;gt;.&amp;lt;/phrase&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-for-each
 :)
declare function fn:for-each( $seq as item()*,  $f as function(item()) as item()*) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Applies the function item &amp;lt;var&amp;gt;$f&amp;lt;/var&amp;gt; to successive pairs of items taken one
 :             from &amp;lt;var&amp;gt;$seq1&amp;lt;/var&amp;gt; and one from &amp;lt;var&amp;gt;$seq2&amp;lt;/var&amp;gt;, returning the concatenation of the
 :             resulting sequences in order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="for-each-pair" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="seq1" type="item()*"/&amp;gt;&amp;lt;arg name="seq2" type="item()*"/&amp;gt;&amp;lt;arg name="f" type="function(item(), item()) as item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of the function is equivalent to the following implementation in XQuery:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : declare function fn:for-each-pair($seq1, $seq2, $f)
 : {
 :    if(fn:exists($seq1) and fn:exists($seq2)) 
 :    then (
 :      $f(fn:head($seq1), fn:head($seq2)),
 :      fn:for-each-pair(fn:tail($seq1), fn:tail($seq2), $f)
 :    )
 :    else ()
 : };&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;or its equivalent in XSLT:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : &amp;amp;lt;xsl:function name="fn:for-each-pair"&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="seq1/&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="seq2/&amp;amp;gt;
 :   &amp;amp;lt;xsl:param name="f"/&amp;amp;gt;
 :   &amp;amp;lt;xsl:if test="fn:exists($seq1) and fn:exists($seq2)"&amp;amp;gt;
 :     &amp;amp;lt;xsl:sequence select="$f(fn:head($seq1), fn:head($seq2))"/&amp;amp;gt;
 :     &amp;amp;lt;xsl:sequence select="fn:for-each-pair(fn:tail($seq1), fn:tail($seq2), $f)"/&amp;amp;gt;
 :   &amp;amp;lt;/xsl:if&amp;amp;gt;
 : &amp;amp;lt;/xsl:function&amp;amp;gt;
 :          &amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:for-each-pair(("a", "b", "c"), ("x", "y", "z"), concat#2)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;("ax", "by", "cz")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:for-each-pair(1 to 5, 1 to 5, function($a, $b){10*$a + $b}&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;(11, 22, 33, 44, 55)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-for-each-pair
 :)
declare function fn:for-each-pair( $seq1 as item()*,  $seq2 as item()*,  $f as function(item(), item()) as item()*) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the supplied string matches a given regular expression.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="matches" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="matches" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="flags" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of calling the first version of this function (omitting the argument
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt;) is the same as the effect of calling the second version with the
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument set to a zero-length string. Flags are defined in
 :                &amp;lt;specref ref="flags"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the empty sequence, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; or some substring of
 :                &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; matches the regular expression supplied as &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt;.
 :             Otherwise, the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. The matching rules are influenced by
 :             the value of &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; if present. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0002"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; is invalid according to the rules described in &amp;lt;specref ref="regex-syntax"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0001"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; is invalid according to the rules described in &amp;lt;specref ref="flags"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-matches
 :)
declare function fn:matches($input as xs:string?,  $pattern as xs:string) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the supplied string matches a given regular expression.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="matches" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="matches" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="flags" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of calling the first version of this function (omitting the argument
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt;) is the same as the effect of calling the second version with the
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument set to a zero-length string. Flags are defined in
 :                &amp;lt;specref ref="flags"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the empty sequence, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; or some substring of
 :                &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; matches the regular expression supplied as &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt;.
 :             Otherwise, the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. The matching rules are influenced by
 :             the value of &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; if present. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0002"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; is invalid according to the rules described in &amp;lt;specref ref="regex-syntax"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0001"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; is invalid according to the rules described in &amp;lt;specref ref="flags"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-matches
 :)
declare function fn:matches( $input as xs:string?,  $pattern as xs:string,  $flags as xs:string) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a value that is equal to the highest value appearing in the input
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="max" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="max" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following rules are applied to the input sequence &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; are cast to
 :                      &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;!--Text replaced by erratum E27 change 1"--&amp;gt;&amp;lt;p diff="chg" at="A-E27"&amp;gt;Numeric and &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values are converted to
 :                   the least common type reachable by a combination of type promotion and subtype
 :                   substitution. See &amp;lt;xspecref spec="XP30" ref="promotion"/&amp;gt; and &amp;lt;xspecref spec="XP30" ref="mapping"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;!--End of text replaced by erratum E27--&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The items in the resulting sequence may be reordered in an arbitrary order. The
 :             resulting sequence is referred to below as the converted sequence. The function returns
 :             an item from the converted sequence rather than the input sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence is empty, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;All items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence must be
 :                derived&amp;lt;/phrase&amp;gt; from a single base type for which the &amp;lt;code&amp;gt;le&amp;lt;/code&amp;gt; operator is
 :             defined. In addition, the values in the sequence must have a total order. If date/time
 :             values do not have a timezone, they are considered to have the implicit timezone
 :             provided by the dynamic context for the purpose of comparison. Duration values must
 :             either all be &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; values or must all be
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence contains the value &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;, the value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence&amp;lt;/phrase&amp;gt; are of
 :             type &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; or types derived by restriction from &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;,
 :             then the determination of the item with the smallest value is made according to the
 :             collation that is used. If the type of the items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence&amp;lt;/phrase&amp;gt; is not &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; and
 :                &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; is specified, the collation is ignored.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the result of the expression:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 :    if (every $v in $c satisfies $c[1] ge $v)
 :    then $c[1] 
 :    else fn:max(fn:subsequence($c, 2))&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;evaluated with &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; as the default collation if specified, and with
 :                &amp;lt;code&amp;gt;$c&amp;lt;/code&amp;gt; as the converted sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A type error is raised &amp;lt;errorref class="RG" code="0006"/&amp;gt; if the input sequence contains
 :             items of incompatible types, as described above.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-max
 :)
declare function fn:max($arg as xs:anyAtomicType*) as  xs:anyAtomicType? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a value that is equal to the highest value appearing in the input
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="max" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="max" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following rules are applied to the input sequence &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; are cast to
 :                      &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;!--Text replaced by erratum E27 change 1"--&amp;gt;&amp;lt;p diff="chg" at="A-E27"&amp;gt;Numeric and &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values are converted to
 :                   the least common type reachable by a combination of type promotion and subtype
 :                   substitution. See &amp;lt;xspecref spec="XP30" ref="promotion"/&amp;gt; and &amp;lt;xspecref spec="XP30" ref="mapping"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;!--End of text replaced by erratum E27--&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The items in the resulting sequence may be reordered in an arbitrary order. The
 :             resulting sequence is referred to below as the converted sequence. The function returns
 :             an item from the converted sequence rather than the input sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence is empty, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;All items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence must be
 :                derived&amp;lt;/phrase&amp;gt; from a single base type for which the &amp;lt;code&amp;gt;le&amp;lt;/code&amp;gt; operator is
 :             defined. In addition, the values in the sequence must have a total order. If date/time
 :             values do not have a timezone, they are considered to have the implicit timezone
 :             provided by the dynamic context for the purpose of comparison. Duration values must
 :             either all be &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; values or must all be
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence contains the value &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;, the value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence&amp;lt;/phrase&amp;gt; are of
 :             type &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; or types derived by restriction from &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;,
 :             then the determination of the item with the smallest value is made according to the
 :             collation that is used. If the type of the items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence&amp;lt;/phrase&amp;gt; is not &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; and
 :                &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; is specified, the collation is ignored.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the result of the expression:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 :    if (every $v in $c satisfies $c[1] ge $v)
 :    then $c[1] 
 :    else fn:max(fn:subsequence($c, 2))&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;evaluated with &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; as the default collation if specified, and with
 :                &amp;lt;code&amp;gt;$c&amp;lt;/code&amp;gt; as the converted sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A type error is raised &amp;lt;errorref class="RG" code="0006"/&amp;gt; if the input sequence contains
 :             items of incompatible types, as described above.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-max
 :)
declare function fn:max($arg as xs:anyAtomicType*,  $collation as xs:string) as  xs:anyAtomicType? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a value that is equal to the lowest value appearing in the input
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="min" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="min" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following rules are applied to the input sequence:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; are cast to
 :                      &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;!--Text replaced by erratum E27 change 2"--&amp;gt;&amp;lt;p diff="chg" at="A-E27"&amp;gt;Numeric and &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values are converted to
 :                   the least common type reachable by a combination of type promotion and subtype
 :                   substitution. See &amp;lt;xspecref spec="XP30" ref="promotion"/&amp;gt; and &amp;lt;xspecref spec="XP30" ref="mapping"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;!--End of text replaced by erratum E27--&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The items in the resulting sequence may be reordered in an arbitrary order. The
 :             resulting sequence is referred to below as the converted sequence. The function returns
 :             an item from the converted sequence rather than the input sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence is empty, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;All items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence must be
 :                derived&amp;lt;/phrase&amp;gt; from a single base type for which the &amp;lt;code&amp;gt;le&amp;lt;/code&amp;gt; operator is
 :             defined. In addition, the values in the sequence must have a total order. If date/time
 :             values do not have a timezone, they are considered to have the implicit timezone
 :             provided by the dynamic context for the purpose of comparison. Duration values must
 :             either all be &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; values or must all be
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence contains the value &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;, the value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence&amp;lt;/phrase&amp;gt; are of
 :             type &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; or types derived by restriction from &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;,
 :             then the determination of the item with the smallest value is made according to the
 :             collation that is used. If the type of the items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence&amp;lt;/phrase&amp;gt; is not &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; and
 :                &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; is specified, the collation is ignored.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the result of the expression:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 :    if (every $v in $c satisfies $c[1] le $v) 
 :    then $c[1] 
 :    else fn:min(fn:subsequence($c, 2))&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;evaluated with &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; as the default collation if specified, and with
 :                &amp;lt;code&amp;gt;$c&amp;lt;/code&amp;gt; as the converted sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A type error is raised &amp;lt;errorref class="RG" code="0006"/&amp;gt; if the input sequence contains
 :             items of incompatible types, as described above.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-min
 :)
declare function fn:min($arg as xs:anyAtomicType*) as  xs:anyAtomicType? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a value that is equal to the lowest value appearing in the input
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="min" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="min" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri, and implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following rules are applied to the input sequence:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; are cast to
 :                      &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;!--Text replaced by erratum E27 change 2"--&amp;gt;&amp;lt;p diff="chg" at="A-E27"&amp;gt;Numeric and &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values are converted to
 :                   the least common type reachable by a combination of type promotion and subtype
 :                   substitution. See &amp;lt;xspecref spec="XP30" ref="promotion"/&amp;gt; and &amp;lt;xspecref spec="XP30" ref="mapping"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;!--End of text replaced by erratum E27--&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The items in the resulting sequence may be reordered in an arbitrary order. The
 :             resulting sequence is referred to below as the converted sequence. The function returns
 :             an item from the converted sequence rather than the input sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence is empty, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;All items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence must be
 :                derived&amp;lt;/phrase&amp;gt; from a single base type for which the &amp;lt;code&amp;gt;le&amp;lt;/code&amp;gt; operator is
 :             defined. In addition, the values in the sequence must have a total order. If date/time
 :             values do not have a timezone, they are considered to have the implicit timezone
 :             provided by the dynamic context for the purpose of comparison. Duration values must
 :             either all be &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; values or must all be
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence contains the value &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;, the value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence&amp;lt;/phrase&amp;gt; are of
 :             type &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; or types derived by restriction from &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;,
 :             then the determination of the item with the smallest value is made according to the
 :             collation that is used. If the type of the items in the &amp;lt;phrase diff="chg" at="A-E47"&amp;gt;converted sequence&amp;lt;/phrase&amp;gt; is not &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; and
 :                &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; is specified, the collation is ignored.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the result of the expression:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 :    if (every $v in $c satisfies $c[1] le $v) 
 :    then $c[1] 
 :    else fn:min(fn:subsequence($c, 2))&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;evaluated with &amp;lt;code&amp;gt;$collation&amp;lt;/code&amp;gt; as the default collation if specified, and with
 :                &amp;lt;code&amp;gt;$c&amp;lt;/code&amp;gt; as the converted sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A type error is raised &amp;lt;errorref class="RG" code="0006"/&amp;gt; if the input sequence contains
 :             items of incompatible types, as described above.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-min
 :)
declare function fn:min($arg as xs:anyAtomicType*,  $collation as xs:string) as  xs:anyAtomicType? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the minute component of an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="minutes-from-dateTime" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:dateTime?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; value between 0 and 59, both
 :             inclusive, representing the minute component in the local value of
 :             &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:minutes-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;20&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:minutes-from-dateTime(xs:dateTime("1999-05-31T13:30:00+05:30"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;30&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-minutes-from-dateTime
 :)
declare function fn:minutes-from-dateTime($arg as xs:dateTime?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of minutes in a duration.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="minutes-from-duration" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:duration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; representing the minutes
 :             component in the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. The result is obtained by casting
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; to an &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; (see &amp;lt;specref ref="casting-to-durations"/&amp;gt;) and then computing the minutes component as described
 :             in &amp;lt;specref ref="canonical-dayTimeDuration"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a negative duration then the result will be negative..&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; the function returns 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:minutes-from-duration(xs:dayTimeDuration("P3DT10H"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:minutes-from-duration(xs:dayTimeDuration("-P5DT12H30M"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;-30&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-minutes-from-duration
 :)
declare function fn:minutes-from-duration($arg as xs:duration?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the minutes component of an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="minutes-from-time" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:time?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; value between 0 and 59, both
 :             inclusive, representing the value of the minutes component in the local value of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:minutes-from-time(xs:time("13:00:00Z"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-minutes-from-time
 :)
declare function fn:minutes-from-time($arg as xs:time?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the month component of an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="month-from-date" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:date?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; between 1 and 12, both
 :             inclusive, representing the month component in the local value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:month-from-date(xs:date("1999-05-31-05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;5&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:month-from-date(xs:date("2000-01-01+05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-month-from-date
 :)
declare function fn:month-from-date($arg as xs:date?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of months in a duration.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="months-from-duration" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:duration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; representing the months
 :             component in the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. The result is obtained by casting
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; to an &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; (see &amp;lt;specref ref="casting-to-durations"/&amp;gt;) and then computing the months component as described in
 :                &amp;lt;specref ref="canonical-yearMonthDuration"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a negative duration then the result will be negative..&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; the function returns 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:months-from-duration(xs:yearMonthDuration("P20Y15M"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;3&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:months-from-duration(xs:yearMonthDuration("-P20Y18M"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;-6&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:months-from-duration(xs:dayTimeDuration("-P2DT15H0M0S"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-months-from-duration
 :)
declare function fn:months-from-duration($arg as xs:duration?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the namespace URI of one of the in-scope namespaces for
 :                &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt;, identified by its namespace prefix.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="namespace-uri-for-prefix" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="prefix" type="xs:string?"/&amp;gt;&amp;lt;arg name="element" type="element()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt; has an in-scope namespace whose namespace prefix is equal to
 :                &amp;lt;code&amp;gt;$prefix&amp;lt;/code&amp;gt;, the function returns the namespace URI of that namespace.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt; has no in-scope namespace whose namespace prefix is equal to
 :             &amp;lt;code&amp;gt;$prefix&amp;lt;/code&amp;gt;, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="I"&amp;gt;If &amp;lt;code&amp;gt;$prefix&amp;lt;/code&amp;gt; is the zero-length string or the empty
 :             sequence, then if &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt; has a default namespace (that is, a namespace
 :             node with no name), the function returns the namespace URI of the default namespace. If
 :                &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt; has no default namespace, the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Prefixes are equal only if their Unicode codepoints match exactly.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;let &amp;lt;code&amp;gt;$e&amp;lt;/code&amp;gt; := &amp;lt;eg xml:space="preserve"&amp;gt;
 : &amp;amp;lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&amp;amp;gt;
 :   &amp;amp;lt;b xmlns=""/&amp;amp;gt;
 : &amp;amp;lt;/z:a&amp;amp;gt;&amp;lt;/eg&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:namespace-uri-for-prefix("z", $e)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;"http://example.org/two"&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:namespace-uri-for-prefix("", $e)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;"http://example.org/one"&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:namespace-uri-for-prefix((), $e)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;"http://example.org/one"&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:namespace-uri-for-prefix("xml", $e)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;"http://www.w3.org/XML/1998/namespace"&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:namespace-uri-for-prefix("xml", $e)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;"http://www.w3.org/XML/1998/namespace"&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-namespace-uri-for-prefix
 :)
declare function fn:namespace-uri-for-prefix( $prefix as xs:string?,  $element as element()) as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the namespace URI part of the supplied QName.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="namespace-uri-from-QName" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:QName?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; representing the namespace URI
 :             part of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is in no namespace, the function returns the zero-length
 :                &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:namespace-uri-from-QName(fn:QName("http://www.example.com/example",
 :                   "person"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;xs:anyURI("http://www.example.com/example")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-namespace-uri-from-QName
 :)
declare function fn:namespace-uri-from-QName($arg as xs:QName?) as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; with leading and trailing whitespace
 :             removed, and sequences of internal whitespace reduced to a single space character.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="normalize-space" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="normalize-space" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a string constructed by stripping leading and trailing whitespace
 :             from the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, and replacing sequences of one or more adjacent
 :             whitespace characters with a single space, &amp;lt;code&amp;gt;#x20&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The whitespace characters are defined in the metasymbol S (Production 3) of &amp;lt;bibref ref="REC-xml"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E14"&amp;gt;If no argument is supplied, then &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; defaults to the
 :             string value (calculated using &amp;lt;code&amp;gt;fn:string&amp;lt;/code&amp;gt;) of the context item
 :                (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If no argument is supplied and the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt; then a &amp;lt;phrase diff="add" at="dynamic"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised: &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-normalize-space
 :)
declare function fn:normalize-space() as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; with leading and trailing whitespace
 :             removed, and sequences of internal whitespace reduced to a single space character.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="normalize-space" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="normalize-space" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a string constructed by stripping leading and trailing whitespace
 :             from the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, and replacing sequences of one or more adjacent
 :             whitespace characters with a single space, &amp;lt;code&amp;gt;#x20&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The whitespace characters are defined in the metasymbol S (Production 3) of &amp;lt;bibref ref="REC-xml"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E14"&amp;gt;If no argument is supplied, then &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; defaults to the
 :             string value (calculated using &amp;lt;code&amp;gt;fn:string&amp;lt;/code&amp;gt;) of the context item
 :                (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If no argument is supplied and the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt; then a &amp;lt;phrase diff="add" at="dynamic"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised: &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-normalize-space
 :)
declare function fn:normalize-space($arg as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; after applying Unicode
 :             normalization.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="normalize-unicode" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="normalize-unicode" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;arg name="normalizationForm" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the single-argument version of the function is used, the result is the same as
 :             calling the two-argument version with &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; set to the string
 :             "NFC".&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; normalized according to
 :             the rules of the normalization form identified by the value of
 :                &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is the value of the expression
 :                &amp;lt;code&amp;gt;fn:upper-case(fn:normalize-space($normalizationForm))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="D"&amp;gt;See &amp;lt;bibref ref="charmod-normalization"/&amp;gt; for a description of the
 :             normalization forms.&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is &amp;lt;quote&amp;gt;NFC&amp;lt;/quote&amp;gt;,
 :                   then the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; converted to Unicode
 :                   Normalization Form C (NFC).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is &amp;lt;quote&amp;gt;NFD&amp;lt;/quote&amp;gt;,
 :                   then the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; converted to Unicode
 :                   Normalization Form D (NFD).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is &amp;lt;quote&amp;gt;NFKC&amp;lt;/quote&amp;gt;,
 :                   then the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; in Unicode Normalization
 :                   Form KC (NFKC).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is &amp;lt;quote&amp;gt;NFKD&amp;lt;/quote&amp;gt;,
 :                   then the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; converted to Unicode
 :                   Normalization Form KD (NFKD).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is
 :                      &amp;lt;quote&amp;gt;FULLY-NORMALIZED&amp;lt;/quote&amp;gt;, then the function returns the value of
 :                      &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; converted to fully normalized form. &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is the zero-length
 :                   string, no normalization is performed and &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="D"&amp;gt;Normalization forms NFC, NFD, NFKC, and NFKD, and the algorithms to be
 :             used for converting a string to each of these forms, are defined in &amp;lt;bibref ref="Unicode-Normalization"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="D"&amp;gt;The motivation for normalization form FULLY-NORMALIZED is explained in
 :                &amp;lt;bibref ref="charmod-normalization"/&amp;gt;. However, as that specification did not
 :             progress beyond working draft status, the normative specification is as follows:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="D"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A string is &amp;lt;term&amp;gt;fully-normalized&amp;lt;/term&amp;gt; if (a) it is in normalization form NFC
 :                   as defined in &amp;lt;bibref ref="Unicode-Normalization"/&amp;gt;, and (b) it does not start
 :                   with a composing character.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A composing character is a character that is one or both of the following:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the second character in the canonical decomposition mapping of some
 :                         character that is not listed in the Composition Exclusion Table defined in
 :                            &amp;lt;bibref ref="Unicode-Normalization"/&amp;gt;;&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;of non-zero canonical combining class (as defined in &amp;lt;bibref ref="Unicode"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A string is converted to FULLY-NORMALIZED form as follows:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;if the first character in the string is a composing character, prepend a
 :                         single space (x20);&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;convert the resulting string to normalization form NFC.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" At="L"&amp;gt;Conforming implementations &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; support normalization form "NFC" and
 :                &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; support normalization forms "NFD", "NFKC", "NFKD", and
 :             "FULLY-NORMALIZED". They &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; also support other normalization forms
 :             with &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; semantics. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;It is &amp;lt;termref def="dt-implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; which version of
 :             Unicode (and therefore, of the normalization algorithms and their underlying
 :             data) is supported by the implementation. See &amp;lt;bibref ref="Unicode-Normalization"/&amp;gt; for details of the
 :             stability policy regarding changes to the normalization rules in future
 :             versions of Unicode. If the input string contains codepoints that are
 :             unassigned in the relevant version of Unicode, or for which no normalization
 :             rules are defined, the &amp;lt;code&amp;gt;fn:normalize-unicode&amp;lt;/code&amp;gt; function leaves such codepoints
 :             unchanged. If the implementation supports the requested normalization form then
 :             it &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be able to handle every input string without raising an error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="CH" code="0003"/&amp;gt; if the effective value of the
 :                &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; argument is not one of the values supported by the
 :             implementation.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-normalize-unicode
 :)
declare function fn:normalize-unicode($arg as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; after applying Unicode
 :             normalization.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="normalize-unicode" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="normalize-unicode" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;arg name="normalizationForm" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the single-argument version of the function is used, the result is the same as
 :             calling the two-argument version with &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; set to the string
 :             "NFC".&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; normalized according to
 :             the rules of the normalization form identified by the value of
 :                &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is the value of the expression
 :                &amp;lt;code&amp;gt;fn:upper-case(fn:normalize-space($normalizationForm))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="D"&amp;gt;See &amp;lt;bibref ref="charmod-normalization"/&amp;gt; for a description of the
 :             normalization forms.&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is &amp;lt;quote&amp;gt;NFC&amp;lt;/quote&amp;gt;,
 :                   then the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; converted to Unicode
 :                   Normalization Form C (NFC).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is &amp;lt;quote&amp;gt;NFD&amp;lt;/quote&amp;gt;,
 :                   then the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; converted to Unicode
 :                   Normalization Form D (NFD).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is &amp;lt;quote&amp;gt;NFKC&amp;lt;/quote&amp;gt;,
 :                   then the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; in Unicode Normalization
 :                   Form KC (NFKC).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is &amp;lt;quote&amp;gt;NFKD&amp;lt;/quote&amp;gt;,
 :                   then the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; converted to Unicode
 :                   Normalization Form KD (NFKD).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is
 :                      &amp;lt;quote&amp;gt;FULLY-NORMALIZED&amp;lt;/quote&amp;gt;, then the function returns the value of
 :                      &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; converted to fully normalized form. &amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the effective value of &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; is the zero-length
 :                   string, no normalization is performed and &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="D"&amp;gt;Normalization forms NFC, NFD, NFKC, and NFKD, and the algorithms to be
 :             used for converting a string to each of these forms, are defined in &amp;lt;bibref ref="Unicode-Normalization"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="D"&amp;gt;The motivation for normalization form FULLY-NORMALIZED is explained in
 :                &amp;lt;bibref ref="charmod-normalization"/&amp;gt;. However, as that specification did not
 :             progress beyond working draft status, the normative specification is as follows:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="D"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A string is &amp;lt;term&amp;gt;fully-normalized&amp;lt;/term&amp;gt; if (a) it is in normalization form NFC
 :                   as defined in &amp;lt;bibref ref="Unicode-Normalization"/&amp;gt;, and (b) it does not start
 :                   with a composing character.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A composing character is a character that is one or both of the following:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the second character in the canonical decomposition mapping of some
 :                         character that is not listed in the Composition Exclusion Table defined in
 :                            &amp;lt;bibref ref="Unicode-Normalization"/&amp;gt;;&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;of non-zero canonical combining class (as defined in &amp;lt;bibref ref="Unicode"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;A string is converted to FULLY-NORMALIZED form as follows:&amp;lt;/p&amp;gt;&amp;lt;ulist&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;if the first character in the string is a composing character, prepend a
 :                         single space (x20);&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;convert the resulting string to normalization form NFC.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" At="L"&amp;gt;Conforming implementations &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; support normalization form "NFC" and
 :                &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; support normalization forms "NFD", "NFKC", "NFKD", and
 :             "FULLY-NORMALIZED". They &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; also support other normalization forms
 :             with &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; semantics. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;It is &amp;lt;termref def="dt-implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; which version of
 :             Unicode (and therefore, of the normalization algorithms and their underlying
 :             data) is supported by the implementation. See &amp;lt;bibref ref="Unicode-Normalization"/&amp;gt; for details of the
 :             stability policy regarding changes to the normalization rules in future
 :             versions of Unicode. If the input string contains codepoints that are
 :             unassigned in the relevant version of Unicode, or for which no normalization
 :             rules are defined, the &amp;lt;code&amp;gt;fn:normalize-unicode&amp;lt;/code&amp;gt; function leaves such codepoints
 :             unchanged. If the implementation supports the requested normalization form then
 :             it &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be able to handle every input string without raising an error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="CH" code="0003"/&amp;gt; if the effective value of the
 :                &amp;lt;code&amp;gt;$normalizationForm&amp;lt;/code&amp;gt; argument is not one of the values supported by the
 :             implementation.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-normalize-unicode
 :)
declare function fn:normalize-unicode( $arg as xs:string?,  $normalizationForm as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if the effective boolean value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;
 :             is &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;, or &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt; if it is &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="not" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is first reduced to an effective boolean value by
 :             applying the &amp;lt;code&amp;gt;fn:boolean()&amp;lt;/code&amp;gt; function. The function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;
 :             if the effective boolean value is &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;, or &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt; if the
 :             effective boolean value is &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:not(fn:true())&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;false()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:not("false")&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;false()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-not
 :)
declare function fn:not($arg as item()*) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; if it contains one or more items. Otherwise, raises
 :             an error. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="one-or-more" return-type="item()+" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Except in error cases, the function returns &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; unchanged.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0004"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-one-or-more
 :)
declare function fn:one-or-more($arg as item()*) as  item()+ external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function takes as input an XML document represented as a string, and
 :             returns the document node at the root of an XDM tree representing the parsed
 :             document.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="parse-xml" return-type="document-node(element(*))?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="G"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The precise process used to construct the XDM instance is &amp;lt;termref def="implementation-defined"/&amp;gt;. In
 :             particular, it is implementation-defined whether DTD and/or schema validation is invoked, and it is
 :             implementation-defined whether an XML 1.0 or XML 1.1 parser is used.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The Static Base URI property from the static context of the
 :             &amp;lt;code&amp;gt;fn:parse-xml&amp;lt;/code&amp;gt; function call is used both as the base URI used by the XML parser to resolve
 :             relative entity references within the document, and as the base URI of the document node
 :             that is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The document URI of the returned node is &amp;lt;termref def="absent"&amp;gt;absent&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function is &amp;lt;emph&amp;gt;not&amp;lt;/emph&amp;gt;
 :             &amp;lt;termref def="deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;: that is, if the function is called
 :             twice with the same arguments, it is &amp;lt;termref def="implementation-dependent"&amp;gt;implementation-dependent&amp;lt;/termref&amp;gt; whether the same node is returned on both
 :             occasions.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0006"/&amp;gt; if the content of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a well-formed and namespace-well-formed XML document.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="G"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0006"/&amp;gt; if DTD-based
 :             validation is carried out and the content of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not valid against its
 :             DTD.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-parse-xml
 :)
declare function fn:parse-xml($arg as xs:string?) as  document-node(element(*, xs:untyped)) external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function takes as input an XML document represented as a string, and
 :             returns the document node at the root of an XDM tree representing the parsed
 :             document.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="parse-xml" return-type="document-node(element(*))?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="G"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The precise process used to construct the XDM instance is &amp;lt;termref def="implementation-defined"/&amp;gt;. In
 :             particular, it is implementation-defined whether DTD and/or schema validation is invoked, and it is
 :             implementation-defined whether an XML 1.0 or XML 1.1 parser is used.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The Static Base URI property from the static context of the
 :             &amp;lt;code&amp;gt;fn:parse-xml&amp;lt;/code&amp;gt; function call is used both as the base URI used by the XML parser to resolve
 :             relative entity references within the document, and as the base URI of the document node
 :             that is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The document URI of the returned node is &amp;lt;termref def="absent"&amp;gt;absent&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function is &amp;lt;emph&amp;gt;not&amp;lt;/emph&amp;gt;
 :             &amp;lt;termref def="deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;: that is, if the function is called
 :             twice with the same arguments, it is &amp;lt;termref def="implementation-dependent"&amp;gt;implementation-dependent&amp;lt;/termref&amp;gt; whether the same node is returned on both
 :             occasions.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0006"/&amp;gt; if the content of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a well-formed and namespace-well-formed XML document.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="G"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0006"/&amp;gt; if DTD-based
 :             validation is carried out and the content of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not valid against its
 :             DTD.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-parse-xml
 :)
declare function fn:parse-xml( $arg as xs:string?,  $baseURI as xs:string) as  document-node(element(*, xs:untyped)) external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function takes as input an XML external entity represented as a string,
 :             and returns the document node at the root of an XDM tree representing the parsed
 :             document fragment.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="parse-xml-fragment" return-type="document-node()?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-nondeterministic"&amp;gt;nondeterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The input must be a namespace-well-formed external general parsed entity. More specifically,
 :             it must be a string conforming to the production rule &amp;lt;xnt xmlns:xlink="http://www.w3.org/1999/xlink" spec="xml" ref="NT-extParsedEnt" xlink:type="simple"&amp;gt;extParsedEnt&amp;lt;/xnt&amp;gt; in &amp;lt;bibref ref="REC-xml"/&amp;gt;, it must contain no entity references other
 :             than references to predefined entities,
 :             and it must satisfy all the rules
 :             of &amp;lt;bibref ref="REC-xml-names"/&amp;gt; for namespace-well-formed documents with the exception
 :             that the rule requiring it to be a well-formed document is replaced by the rule requiring
 :             it to be a well-formed external general parsed entity.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The string is parsed to form a sequence of nodes which
 :             become children of the new document node, in the same way as the content of any element
 :             is converted into a sequence of children for the resulting element node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Schema validation is &amp;lt;emph&amp;gt;not&amp;lt;/emph&amp;gt; invoked, which means that the nodes in the
 :             returned document will all be untyped.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The precise process used to construct the XDM instance is &amp;lt;termref def="implementation-defined"/&amp;gt;. In
 :             particular, it is implementation-defined whether an XML 1.0 or XML 1.1 parser is
 :             used.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="L"&amp;gt;The Static Base URI from the static context of the &amp;lt;code&amp;gt;fn:parse-xml-fragment&amp;lt;/code&amp;gt; function call 
 :             is used as the base URI of the document node
 :             that is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The document URI of the returned node is &amp;lt;termref def="absent"&amp;gt;absent&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function is &amp;lt;emph&amp;gt;not&amp;lt;/emph&amp;gt;
 :             &amp;lt;termref def="deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;: that is, if the function is called
 :             twice with the same arguments, it is &amp;lt;termref def="implementation-dependent"&amp;gt;implementation-dependent&amp;lt;/termref&amp;gt; whether the same node is returned on both
 :                occasions.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0006"/&amp;gt; if the content of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a well-formed external general parsed entity, 
 :             if it contains entity references other than references to predefined entities, or if a document that
 :             incorporates this well-formed parsed entity would not be namespace-well-formed.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-parse-xml-fragment
 :)
declare function fn:parse-xml-fragment( $arg as xs:string?) as  document-node(element(*, xs:untyped)) external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the prefix component of the supplied QName.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="prefix-from-QName" return-type="xs:NCName?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:QName?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has no prefix component the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt; representing the prefix
 :             component of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-prefix-from-QName
 :)
declare function fn:prefix-from-QName($arg as xs:QName?) as  xs:NCName? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a new sequence containing all the items of &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; except
 :             the item at position &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="remove" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="target" type="item()*"/&amp;gt;&amp;lt;arg name="position" type="xs:integer"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence consisting of all items of &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; whose
 :             index is less than &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt;, followed by all items of &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt;
 :             whose index is greater than &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$position&amp;lt;/code&amp;gt; is less than 1 or greater than the number of items in
 :                &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$target&amp;lt;/code&amp;gt; is the empty sequence, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-remove
 :)
declare function fn:remove($target as item()*,  $position as xs:integer) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string produced from the input string by replacing any substrings
 :             that match a given regular expression with a supplied replacement string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="replace" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="replacement" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="replace" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="replacement" type="xs:string"/&amp;gt;&amp;lt;arg name="flags" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of calling the first version of this function (omitting the argument
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt;) is the same as the effect of calling the second version with the
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument set to a zero-length string. Flags are defined in
 :                &amp;lt;specref ref="flags"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument is interpreted in the same manner as for the
 :                &amp;lt;code&amp;gt;fn:matches&amp;lt;/code&amp;gt; function. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the empty sequence, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; that is obtained by replacing each
 :             non-overlapping substring of &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; that matches the given
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; with an occurrence of the &amp;lt;code&amp;gt;$replacement&amp;lt;/code&amp;gt; string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If two overlapping substrings of &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; both match the
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt;, then only the first one (that is, the one whose first &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; comes first in the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string) is
 :             replaced.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;If the &amp;lt;code&amp;gt;q&amp;lt;/code&amp;gt; flag is present, the replacement string is used
 :                &amp;lt;emph&amp;gt;as is&amp;lt;/emph&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;phrase diff="add" at="B"&amp;gt;Otherwise,&amp;lt;/phrase&amp;gt; within the &amp;lt;code&amp;gt;$replacement&amp;lt;/code&amp;gt;
 :             string, a variable &amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; may be used to refer to the substring captured by the
 :             Nth parenthesized sub-expression in the regular expression. For each match of the
 :             pattern, these variables are assigned the value of the content matched by the relevant
 :             sub-expression, and the modified replacement string is then substituted for the &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; in &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; that matched the pattern.
 :                &amp;lt;code&amp;gt;$0&amp;lt;/code&amp;gt; refers to the substring captured by the regular expression as a
 :             whole.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;More specifically, the rules are as follows, where &amp;lt;code&amp;gt;S&amp;lt;/code&amp;gt; is the number of
 :             parenthesized sub-expressions in the regular expression, and &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt; is the
 :             decimal number formed by taking all the digits that consecutively follow the
 :                &amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt; character:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;=&amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;, then the variable is replaced by the substring
 :                   matched by the regular expression as a whole.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;&amp;amp;lt;=&amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;&amp;amp;lt;=&amp;lt;code&amp;gt;S&amp;lt;/code&amp;gt;, then the variable is
 :                   replaced by the substring captured by the Nth parenthesized sub-expression. If the
 :                      &amp;lt;code&amp;gt;Nth&amp;lt;/code&amp;gt; parenthesized sub-expression was not matched, then the
 :                   variable is replaced by the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;S&amp;lt;/code&amp;gt;&amp;amp;lt;&amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;&amp;amp;lt;=&amp;lt;code&amp;gt;9&amp;lt;/code&amp;gt;, then the variable is
 :                   replaced by the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Otherwise (if &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;&amp;amp;gt;&amp;lt;code&amp;gt;S&amp;lt;/code&amp;gt; and
 :                      &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;&amp;amp;gt;&amp;lt;code&amp;gt;9&amp;lt;/code&amp;gt;), the last digit of &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt; is taken to
 :                   be a literal character to be included "as is" in the replacement string, and the
 :                   rules are reapplied using the number &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt; formed by stripping off this
 :                   last digit.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For example, if the replacement string is &amp;lt;quote&amp;gt;
 :                &amp;lt;code&amp;gt;$23&amp;lt;/code&amp;gt;
 :             &amp;lt;/quote&amp;gt; and there are 5 substrings, the result contains the value of the substring that
 :             matches the second sub-expression, followed by the digit &amp;lt;quote&amp;gt;
 :                &amp;lt;code&amp;gt;3&amp;lt;/code&amp;gt;
 :             &amp;lt;/quote&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="B"&amp;gt;Unless the &amp;lt;code&amp;gt;q&amp;lt;/code&amp;gt; flag is used, a literal &amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt;
 :             character within the replacement string must be written as &amp;lt;code&amp;gt;\$&amp;lt;/code&amp;gt;, and a
 :             literal &amp;lt;code&amp;gt;\&amp;lt;/code&amp;gt; character must be written as &amp;lt;code&amp;gt;\\&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If two alternatives within the pattern both match at the same position in the
 :                &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt;, then the match that is chosen is the one matched by the first
 :             alternative. For example:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:replace("abcd", "(ab)|(a)", "[1=$1][2=$2]") returns "[1=ab][2=]cd"&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0002"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0001"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0003"/&amp;gt; if the pattern matches a
 :             zero-length string, that is, if the expression &amp;lt;code&amp;gt;fn:matches("", $pattern,
 :                $flags)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. It is not an error, however, if a captured
 :             substring is zero-length.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0004"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$replacement&amp;lt;/code&amp;gt; contains a "&amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt;" character that is not
 :             immediately followed by a digit &amp;lt;code&amp;gt;0-9&amp;lt;/code&amp;gt; and not immediately preceded by a
 :             "\".&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0004"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$replacement&amp;lt;/code&amp;gt; contains a "&amp;lt;code&amp;gt;\&amp;lt;/code&amp;gt;" character that is not part of a
 :                "&amp;lt;code&amp;gt;\\&amp;lt;/code&amp;gt;" pair, unless it is immediately followed by a "&amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt;"
 :             character.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-replace
 :)
declare function fn:replace( $input as xs:string?,  $pattern as xs:string,  $replacement as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string produced from the input string by replacing any substrings
 :             that match a given regular expression with a supplied replacement string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="replace" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="replacement" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="replace" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="replacement" type="xs:string"/&amp;gt;&amp;lt;arg name="flags" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of calling the first version of this function (omitting the argument
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt;) is the same as the effect of calling the second version with the
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument set to a zero-length string. Flags are defined in
 :                &amp;lt;specref ref="flags"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument is interpreted in the same manner as for the
 :                &amp;lt;code&amp;gt;fn:matches&amp;lt;/code&amp;gt; function. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the empty sequence, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; that is obtained by replacing each
 :             non-overlapping substring of &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; that matches the given
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; with an occurrence of the &amp;lt;code&amp;gt;$replacement&amp;lt;/code&amp;gt; string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If two overlapping substrings of &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; both match the
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt;, then only the first one (that is, the one whose first &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; comes first in the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string) is
 :             replaced.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;If the &amp;lt;code&amp;gt;q&amp;lt;/code&amp;gt; flag is present, the replacement string is used
 :                &amp;lt;emph&amp;gt;as is&amp;lt;/emph&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;phrase diff="add" at="B"&amp;gt;Otherwise,&amp;lt;/phrase&amp;gt; within the &amp;lt;code&amp;gt;$replacement&amp;lt;/code&amp;gt;
 :             string, a variable &amp;lt;code&amp;gt;$N&amp;lt;/code&amp;gt; may be used to refer to the substring captured by the
 :             Nth parenthesized sub-expression in the regular expression. For each match of the
 :             pattern, these variables are assigned the value of the content matched by the relevant
 :             sub-expression, and the modified replacement string is then substituted for the &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; in &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; that matched the pattern.
 :                &amp;lt;code&amp;gt;$0&amp;lt;/code&amp;gt; refers to the substring captured by the regular expression as a
 :             whole.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;More specifically, the rules are as follows, where &amp;lt;code&amp;gt;S&amp;lt;/code&amp;gt; is the number of
 :             parenthesized sub-expressions in the regular expression, and &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt; is the
 :             decimal number formed by taking all the digits that consecutively follow the
 :                &amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt; character:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;=&amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;, then the variable is replaced by the substring
 :                   matched by the regular expression as a whole.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;&amp;amp;lt;=&amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;&amp;amp;lt;=&amp;lt;code&amp;gt;S&amp;lt;/code&amp;gt;, then the variable is
 :                   replaced by the substring captured by the Nth parenthesized sub-expression. If the
 :                      &amp;lt;code&amp;gt;Nth&amp;lt;/code&amp;gt; parenthesized sub-expression was not matched, then the
 :                   variable is replaced by the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;S&amp;lt;/code&amp;gt;&amp;amp;lt;&amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;&amp;amp;lt;=&amp;lt;code&amp;gt;9&amp;lt;/code&amp;gt;, then the variable is
 :                   replaced by the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;Otherwise (if &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;&amp;amp;gt;&amp;lt;code&amp;gt;S&amp;lt;/code&amp;gt; and
 :                      &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt;&amp;amp;gt;&amp;lt;code&amp;gt;9&amp;lt;/code&amp;gt;), the last digit of &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt; is taken to
 :                   be a literal character to be included "as is" in the replacement string, and the
 :                   rules are reapplied using the number &amp;lt;code&amp;gt;N&amp;lt;/code&amp;gt; formed by stripping off this
 :                   last digit.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For example, if the replacement string is &amp;lt;quote&amp;gt;
 :                &amp;lt;code&amp;gt;$23&amp;lt;/code&amp;gt;
 :             &amp;lt;/quote&amp;gt; and there are 5 substrings, the result contains the value of the substring that
 :             matches the second sub-expression, followed by the digit &amp;lt;quote&amp;gt;
 :                &amp;lt;code&amp;gt;3&amp;lt;/code&amp;gt;
 :             &amp;lt;/quote&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="B"&amp;gt;Unless the &amp;lt;code&amp;gt;q&amp;lt;/code&amp;gt; flag is used, a literal &amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt;
 :             character within the replacement string must be written as &amp;lt;code&amp;gt;\$&amp;lt;/code&amp;gt;, and a
 :             literal &amp;lt;code&amp;gt;\&amp;lt;/code&amp;gt; character must be written as &amp;lt;code&amp;gt;\\&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If two alternatives within the pattern both match at the same position in the
 :                &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt;, then the match that is chosen is the one matched by the first
 :             alternative. For example:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:replace("abcd", "(ab)|(a)", "[1=$1][2=$2]") returns "[1=ab][2=]cd"&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0002"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0001"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0003"/&amp;gt; if the pattern matches a
 :             zero-length string, that is, if the expression &amp;lt;code&amp;gt;fn:matches("", $pattern,
 :                $flags)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. It is not an error, however, if a captured
 :             substring is zero-length.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0004"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$replacement&amp;lt;/code&amp;gt; contains a "&amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt;" character that is not
 :             immediately followed by a digit &amp;lt;code&amp;gt;0-9&amp;lt;/code&amp;gt; and not immediately preceded by a
 :             "\".&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0004"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$replacement&amp;lt;/code&amp;gt; contains a "&amp;lt;code&amp;gt;\&amp;lt;/code&amp;gt;" character that is not part of a
 :                "&amp;lt;code&amp;gt;\\&amp;lt;/code&amp;gt;" pair, unless it is immediately followed by a "&amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt;"
 :             character.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-replace
 :)
declare function fn:replace( $input as xs:string?,  $pattern as xs:string,  $replacement as xs:string,  $flags as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt; value (that is, an expanded-QName) by taking
 :             an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; that has the lexical form of an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt; (a
 :             string in the form "prefix:local-name" or "local-name") and resolving it using the
 :             in-scope namespaces for a given element.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="resolve-QName" return-type="xs:QName?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="qname" type="xs:string?"/&amp;gt;&amp;lt;arg name="element" type="element()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$qname&amp;lt;/code&amp;gt; is the empty sequence, returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;More specifically, the function searches the namespace bindings of &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt;
 :             for a binding whose name matches the prefix of &amp;lt;code&amp;gt;$qname&amp;lt;/code&amp;gt;, or the zero-length
 :             string if it has no prefix, and constructs an expanded-QName whose local name is taken
 :             from the supplied &amp;lt;code&amp;gt;$qname&amp;lt;/code&amp;gt;, and whose namespace URI is taken from the string
 :             value of the namespace binding.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the &amp;lt;code&amp;gt;$qname&amp;lt;/code&amp;gt; has no prefix, and there is no namespace binding for
 :                &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt; corresponding to the default (unnamed) namespace, then the
 :             resulting expanded-QName has no namespace part.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The prefix (or absence of a prefix) in the supplied &amp;lt;code&amp;gt;$qname&amp;lt;/code&amp;gt; argument is
 :             retained in the returned expanded-QName, as discussed in &amp;lt;xspecref spec="DM30" ref="terminology"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="CA" code="0002"/&amp;gt; if &amp;lt;code&amp;gt;$qname&amp;lt;/code&amp;gt; does not
 :             have the correct lexical form for an instance of &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="NS" code="0004"/&amp;gt; if &amp;lt;code&amp;gt;$qname&amp;lt;/code&amp;gt; has a
 :             prefix and there is no namespace binding for &amp;lt;code&amp;gt;$element&amp;lt;/code&amp;gt; that matches this
 :             prefix.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-resolve-QName
 :)
declare function fn:resolve-QName($qname as xs:string?,  $element as element()) as  xs:QName? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Reverses the order of items in a sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="reverse" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence containing the items in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; in reverse
 :             order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the empty sequence is returned. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-reverse
 :)
declare function fn:reverse($arg as item()*) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Rounds a value to a specified number of decimal places, rounding upwards if two
 :             such values are equally near.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="round" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="round" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;arg name="precision" type="xs:integer"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;General rules: see &amp;lt;specref ref="numeric-value-functions"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the nearest (that is, numerically closest) value to
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; that is a multiple of ten to the power of minus
 :                &amp;lt;code&amp;gt;$precision&amp;lt;/code&amp;gt;. If two such values are equally near (for example, if the
 :             fractional part in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is exactly .5), the function returns the one that
 :             is closest to positive infinity.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is one of the four numeric types &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; the type
 :             of the result is the same as the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. If the type of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a type derived from one of the numeric types, the result is an
 :             instance of the base numeric type.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The single-argument version of this function produces the same result as the
 :             two-argument version with &amp;lt;code&amp;gt;$precision=0&amp;lt;/code&amp;gt; (that is, it rounds to a whole
 :             number).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;When &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is of type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is NaN, positive or negative zero, or positive or negative
 :                   infinity, then the result is the same as the argument.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;For other values, the argument is cast to &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; using an
 :                   implementation of &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; that imposes no limits on the number of
 :                   digits that can be represented. The function is applied to this
 :                      &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value, and the resulting &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; is
 :                   cast back to &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; as appropriate to
 :                   form the function result. If the resulting &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value is zero,
 :                   then positive or negative zero is returned according to the sign of
 :                      &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is typically used with a non-zero &amp;lt;code&amp;gt;$precision&amp;lt;/code&amp;gt; in financial
 :             applications where the argument is of type &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt;. For arguments of
 :             type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; the results may be
 :             counter-intuitive. For example, consider &amp;lt;code&amp;gt;round(35.425e0, 2)&amp;lt;/code&amp;gt;. The result is
 :             not 35.43, as might be expected, but 35.42. This is because the &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; written as 35.425e0
 :             has an exact value equal to 35.42499999999..., which is closer
 :             to 35.42 than to 35.43.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-round
 :)
declare function fn:round($arg as numeric?) as  numeric? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Rounds a value to a specified number of decimal places, rounding upwards if two
 :             such values are equally near.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="round" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="round" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;arg name="precision" type="xs:integer"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;General rules: see &amp;lt;specref ref="numeric-value-functions"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the nearest (that is, numerically closest) value to
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; that is a multiple of ten to the power of minus
 :                &amp;lt;code&amp;gt;$precision&amp;lt;/code&amp;gt;. If two such values are equally near (for example, if the
 :             fractional part in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is exactly .5), the function returns the one that
 :             is closest to positive infinity.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is one of the four numeric types &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; the type
 :             of the result is the same as the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. If the type of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a type derived from one of the numeric types, the result is an
 :             instance of the base numeric type.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The single-argument version of this function produces the same result as the
 :             two-argument version with &amp;lt;code&amp;gt;$precision=0&amp;lt;/code&amp;gt; (that is, it rounds to a whole
 :             number).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;When &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is of type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is NaN, positive or negative zero, or positive or negative
 :                   infinity, then the result is the same as the argument.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;For other values, the argument is cast to &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; using an
 :                   implementation of &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; that imposes no limits on the number of
 :                   digits that can be represented. The function is applied to this
 :                      &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value, and the resulting &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; is
 :                   cast back to &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; as appropriate to
 :                   form the function result. If the resulting &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value is zero,
 :                   then positive or negative zero is returned according to the sign of
 :                      &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is typically used with a non-zero &amp;lt;code&amp;gt;$precision&amp;lt;/code&amp;gt; in financial
 :             applications where the argument is of type &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt;. For arguments of
 :             type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; the results may be
 :             counter-intuitive. For example, consider &amp;lt;code&amp;gt;round(35.425e0, 2)&amp;lt;/code&amp;gt;. The result is
 :             not 35.43, as might be expected, but 35.42. This is because the &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; written as 35.425e0
 :             has an exact value equal to 35.42499999999..., which is closer
 :             to 35.42 than to 35.43.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-round
 :)
declare function fn:round($arg as numeric?,  $precision as xs:integer) as  numeric? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Rounds a value to a specified number of decimal places, rounding to make the
 :             last digit even if two such values are equally near.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="round-half-to-even" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="round-half-to-even" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;arg name="precision" type="xs:integer"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;General rules: see &amp;lt;specref ref="numeric-value-functions"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the nearest (that is, numerically closest) value to
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; that is a multiple of ten to the power of minus
 :                &amp;lt;code&amp;gt;$precision&amp;lt;/code&amp;gt;. If two such values are equally near (e.g. if the fractional
 :             part in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is exactly .500...), the function returns the one whose least
 :             significant digit is even.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is one of the four numeric types &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; the type
 :             of the result is the same as the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. If the type of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a type derived from one of the numeric types, the result is an
 :             instance of the base numeric type.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; The first signature of this function produces the same result as the second signature
 :             with &amp;lt;code&amp;gt;$precision=0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For arguments of type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the argument is &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;, positive or negative zero, or positive or
 :                   negative infinity, then the result is the same as the argument.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;In all other cases, the argument is cast to &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt;
 :                   &amp;lt;phrase diff="add" at="A"&amp;gt;using an implementation of xs:decimal that imposes no
 :                      limits on the number of digits that can be represented.&amp;lt;/phrase&amp;gt; The function
 :                   is applied to this &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value, and the resulting
 :                      &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; is cast back to &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; or
 :                      &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; as appropriate to form the function result. If the
 :                   resulting &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value is zero, then positive or negative zero is
 :                   returned according to the sign of the original argument.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A"&amp;gt;This function is typically used in financial applications where the
 :             argument is of type &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt;. For arguments of type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;
 :             and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; the results may be counter-intuitive. For example, consider
 :                &amp;lt;code&amp;gt;round-half-to-even(xs:float(150.015), 2)&amp;lt;/code&amp;gt;. The result is not 150.02 as
 :             might be expected, but 150.01. This is because the conversion of the
 :                &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; value represented by the literal 150.015 to an
 :                &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; produces the &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value 150.014999389...,
 :             which is closer to 150.01 than to 150.02.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-round-half-to-even
 :)
declare function fn:round-half-to-even($arg as numeric?) as  numeric? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Rounds a value to a specified number of decimal places, rounding to make the
 :             last digit even if two such values are equally near.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="round-half-to-even" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="round-half-to-even" return-type="numeric?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="numeric?"/&amp;gt;&amp;lt;arg name="precision" type="xs:integer"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;General rules: see &amp;lt;specref ref="numeric-value-functions"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the nearest (that is, numerically closest) value to
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; that is a multiple of ten to the power of minus
 :                &amp;lt;code&amp;gt;$precision&amp;lt;/code&amp;gt;. If two such values are equally near (e.g. if the fractional
 :             part in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is exactly .500...), the function returns the one whose least
 :             significant digit is even.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is one of the four numeric types &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;,
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; the type
 :             of the result is the same as the type of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. If the type of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a type derived from one of the numeric types, the result is an
 :             instance of the base numeric type.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; The first signature of this function produces the same result as the second signature
 :             with &amp;lt;code&amp;gt;$precision=0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;For arguments of type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the argument is &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;, positive or negative zero, or positive or
 :                   negative infinity, then the result is the same as the argument.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;In all other cases, the argument is cast to &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt;
 :                   &amp;lt;phrase diff="add" at="A"&amp;gt;using an implementation of xs:decimal that imposes no
 :                      limits on the number of digits that can be represented.&amp;lt;/phrase&amp;gt; The function
 :                   is applied to this &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value, and the resulting
 :                      &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; is cast back to &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; or
 :                      &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; as appropriate to form the function result. If the
 :                   resulting &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value is zero, then positive or negative zero is
 :                   returned according to the sign of the original argument.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A"&amp;gt;This function is typically used in financial applications where the
 :             argument is of type &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt;. For arguments of type &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt;
 :             and &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; the results may be counter-intuitive. For example, consider
 :                &amp;lt;code&amp;gt;round-half-to-even(xs:float(150.015), 2)&amp;lt;/code&amp;gt;. The result is not 150.02 as
 :             might be expected, but 150.01. This is because the conversion of the
 :                &amp;lt;code&amp;gt;xs:float&amp;lt;/code&amp;gt; value represented by the literal 150.015 to an
 :                &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; produces the &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value 150.014999389...,
 :             which is closer to 150.01 than to 150.02.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-round-half-to-even
 :)
declare function fn:round-half-to-even($arg as numeric?,  $precision as xs:integer) as  numeric? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the seconds component of an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="seconds-from-dateTime" return-type="xs:decimal?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:dateTime?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value greater than or equal
 :             to zero and less than 60, representing the seconds and fractional seconds in the local
 :             value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:seconds-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-seconds-from-dateTime
 :)
declare function fn:seconds-from-dateTime($arg as xs:dateTime?) as  xs:decimal? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of seconds in a duration.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="seconds-from-duration" return-type="xs:decimal?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:duration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; representing the seconds
 :             component in the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. The result is obtained by casting
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; to an &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; (see &amp;lt;specref ref="casting-to-durations"/&amp;gt;) and then computing the seconds component as described
 :             in &amp;lt;specref ref="canonical-dayTimeDuration"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a negative duration then the result will be negative..&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; the function returns 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:seconds-from-duration(xs:dayTimeDuration("P3DT10H12.5S"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;12.5&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:seconds-from-duration(xs:dayTimeDuration("-PT256S"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;-16.0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-seconds-from-duration
 :)
declare function fn:seconds-from-duration($arg as xs:duration?) as  xs:decimal? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the seconds component of an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="seconds-from-time" return-type="xs:decimal?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:time?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; value greater than or equal
 :             to zero and less than 60, representing the seconds and fractional seconds in the local
 :             value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:seconds-from-time(xs:time("13:20:10.5"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;10.5&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-seconds-from-time
 :)
declare function fn:seconds-from-time($arg as xs:time?) as  xs:decimal? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function serializes the supplied &amp;lt;phrase diff="chg" at="G"&amp;gt;input
 :                sequence&amp;lt;/phrase&amp;gt;
 :             &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; as described in &amp;lt;bibref ref="xslt-xquery-serialization-30"/&amp;gt;,
 :             returning the serialized &amp;lt;phrase diff="chg" at="G"&amp;gt;representation of the
 :                sequence&amp;lt;/phrase&amp;gt; as a string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="serialize" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="serialize" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;arg name="params" type="element(output:serialization-parameters)?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; acts as the input sequence to the serialization process,
 :             which starts with sequence normalization.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="G"&amp;gt;The single-argument version of this function has the same effect as
 :             the two-argument version called with &amp;lt;code&amp;gt;$params&amp;lt;/code&amp;gt; set to an empty sequence. This
 :             in turn is the same as the effect of passing an
 :                &amp;lt;code&amp;gt;output:serialization-parameters&amp;lt;/code&amp;gt; element with no child elements.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="G"&amp;gt;The &amp;lt;code&amp;gt;$params&amp;lt;/code&amp;gt; argument is used to identify a set of
 :             serialization parameters. These are supplied in the form of an
 :                &amp;lt;code&amp;gt;output:serialization-parameters&amp;lt;/code&amp;gt; element, having the format described in
 :                &amp;lt;xspecref spec="SER30" ref="serparams-in-xdm-instance"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The final stage of serialization, that is, encoding, is skipped. If the serializer does
 :             not allow this phase to be skipped, then the sequence of octets returned by the
 :             serializer is decoded into a string by reversing the character encoding performed in the
 :             final stage.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;If the host language makes serialization an optional feature and
 :          the implementation does not support serialization, then a dynamic error
 :             &amp;lt;errorref class="DC" code="0010"/&amp;gt; is raised.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The serialization process will raise an error if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an attribute or
 :             namespace node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If any serialization error occurs, including the detection of an invalid value for a
 :             serialization parameter, this results in the &amp;lt;code&amp;gt;fn:serialize&amp;lt;/code&amp;gt; call failing with
 :             a dynamic error.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-serialize
 :)
declare function fn:serialize($arg as item()*) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function serializes the supplied &amp;lt;phrase diff="chg" at="G"&amp;gt;input
 :                sequence&amp;lt;/phrase&amp;gt;
 :             &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; as described in &amp;lt;bibref ref="xslt-xquery-serialization-30"/&amp;gt;,
 :             returning the serialized &amp;lt;phrase diff="chg" at="G"&amp;gt;representation of the
 :                sequence&amp;lt;/phrase&amp;gt; as a string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="serialize" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="serialize" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;arg name="params" type="element(output:serialization-parameters)?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; acts as the input sequence to the serialization process,
 :             which starts with sequence normalization.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="G"&amp;gt;The single-argument version of this function has the same effect as
 :             the two-argument version called with &amp;lt;code&amp;gt;$params&amp;lt;/code&amp;gt; set to an empty sequence. This
 :             in turn is the same as the effect of passing an
 :                &amp;lt;code&amp;gt;output:serialization-parameters&amp;lt;/code&amp;gt; element with no child elements.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="G"&amp;gt;The &amp;lt;code&amp;gt;$params&amp;lt;/code&amp;gt; argument is used to identify a set of
 :             serialization parameters. These are supplied in the form of an
 :                &amp;lt;code&amp;gt;output:serialization-parameters&amp;lt;/code&amp;gt; element, having the format described in
 :                &amp;lt;xspecref spec="SER30" ref="serparams-in-xdm-instance"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The final stage of serialization, that is, encoding, is skipped. If the serializer does
 :             not allow this phase to be skipped, then the sequence of octets returned by the
 :             serializer is decoded into a string by reversing the character encoding performed in the
 :             final stage.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;If the host language makes serialization an optional feature and
 :          the implementation does not support serialization, then a dynamic error
 :             &amp;lt;errorref class="DC" code="0010"/&amp;gt; is raised.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The serialization process will raise an error if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an attribute or
 :             namespace node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If any serialization error occurs, including the detection of an invalid value for a
 :             serialization parameter, this results in the &amp;lt;code&amp;gt;fn:serialize&amp;lt;/code&amp;gt; call failing with
 :             a dynamic error.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-serialize
 :)
declare function fn:serialize( $arg as item()*,  $params as element(output:serialization-parameters)?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the string &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; contains &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; as a
 :             leading substring, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="starts-with" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="starts-with" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; is the zero-length string and
 :             the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is not the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; indicating whether or not the value of
 :                &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; starts with a sequence of collation units that provides a
 :                &amp;lt;term&amp;gt;match&amp;lt;/term&amp;gt; to the collation units of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; according to the
 :             collation that is used.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;&amp;lt;term&amp;gt;Match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-starts-with
 :)
declare function fn:starts-with($arg1 as xs:string?,  $arg2 as xs:string?) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the string &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; contains &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; as a
 :             leading substring, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="starts-with" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="starts-with" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; is the zero-length string and
 :             the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is not the zero-length string, then the function returns
 :                &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; indicating whether or not the value of
 :                &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; starts with a sequence of collation units that provides a
 :                &amp;lt;term&amp;gt;match&amp;lt;/term&amp;gt; to the collation units of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; according to the
 :             collation that is used.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;&amp;lt;term&amp;gt;Match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-starts-with
 :)
declare function fn:starts-with( $arg1 as xs:string?,  $arg2 as xs:string?,  $collation as xs:string) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string created by concatenating the items in a sequence, with a
 :             defined separator between adjacent items.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-join" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-join" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string*"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;The effect of calling the single-argument version of this function is
 :             the same as calling the two-argument version with &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; set to a
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; created by concatenating the items in the
 :             sequence &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt;, in order, using the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; as a
 :             separator between adjacent items. If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length
 :             string, then the members of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; are concatenated without a separator.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-string-join
 :)
declare function fn:string-join($arg1 as xs:string*) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a string created by concatenating the items in a sequence, with a
 :             defined separator between adjacent items.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-join" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-join" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string*"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;The effect of calling the single-argument version of this function is
 :             the same as calling the two-argument version with &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; set to a
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; created by concatenating the items in the
 :             sequence &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt;, in order, using the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; as a
 :             separator between adjacent items. If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length
 :             string, then the members of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; are concatenated without a separator.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-string-join
 :)
declare function fn:string-join($arg1 as xs:string*,  $arg2 as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; in a
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-length" return-type="xs:integer" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-length" return-type="xs:integer" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; equal to the length in &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; of the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Calling the zero-argument version of the function is equivalent to calling
 :                &amp;lt;code&amp;gt;fn:string-length(fn:string(.))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :                &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; value zero (0).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not specified and the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, a &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised: &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-string-length
 :)
declare function fn:string-length() as  xs:integer external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; in a
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-length" return-type="xs:integer" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-length" return-type="xs:integer" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; equal to the length in &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; of the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Calling the zero-argument version of the function is equivalent to calling
 :                &amp;lt;code&amp;gt;fn:string-length(fn:string(.))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :                &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; value zero (0).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not specified and the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, a &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised: &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-string-length
 :)
declare function fn:string-length($arg as xs:string?) as  xs:integer external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the sequence of &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt; that
 :             constitute an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; value. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-to-codepoints" return-type="xs:integer*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of integers, each integer being the Unicode &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt; of the corresponding &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a zero-length string or the empty sequence, the function returns
 :             the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:string-to-codepoints("Thérèse")&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;(84, 104, 233, 114, 232, 115, 101)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-string-to-codepoints
 :)
declare function fn:string-to-codepoints($arg as xs:string?) as  xs:integer* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the contiguous sequence of items in the value of
 :                &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt; beginning at the position indicated by the value of
 :                &amp;lt;code&amp;gt;$startingLoc&amp;lt;/code&amp;gt; and continuing for the number of items indicated by the
 :             value of &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="subsequence" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceSeq" type="item()*"/&amp;gt;&amp;lt;arg name="startingLoc" type="xs:double"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="subsequence" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceSeq" type="item()*"/&amp;gt;&amp;lt;arg name="startingLoc" type="xs:double"/&amp;gt;&amp;lt;arg name="length" type="xs:double"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In the two-argument case, returns:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E2" xml:space="preserve"&amp;gt;$sourceSeq[fn:round($startingLoc) le position()]&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In the three-argument case, returns:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E2" xml:space="preserve"&amp;gt;$sourceSeq[fn:round($startingLoc) le position() 
 :          and position() lt fn:round($startingLoc) + fn:round($length)]&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The first item of a sequence is located at position 1, not position 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt; is the empty sequence, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$startingLoc&amp;lt;/code&amp;gt; is zero or negative, the subsequence includes items from
 :             the beginning of the &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is not specified, the subsequence includes items to the end of
 :                &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is greater than the number of items in the value of
 :                &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt; following &amp;lt;code&amp;gt;$startingLoc&amp;lt;/code&amp;gt;, the subsequence includes
 :             items to the end of &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="F"&amp;gt;As an exception to the previous two notes, if
 :                &amp;lt;code&amp;gt;$startingLoc&amp;lt;/code&amp;gt; is &amp;lt;code&amp;gt;-INF&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is
 :                &amp;lt;code&amp;gt;+INF&amp;lt;/code&amp;gt;, then &amp;lt;code&amp;gt;fn:round($startingLoc) + fn:round($length)&amp;lt;/code&amp;gt; is
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;; since &amp;lt;code&amp;gt;position() lt NaN&amp;lt;/code&amp;gt; is always false, the result is
 :             an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The reason the function accepts arguments of type &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; is that many
 :             computations on untyped data return an &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; result; and the reason for
 :             the rounding rules is to compensate for any imprecision in these floating-point
 :             computations.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-subsequence
 :)
declare function fn:subsequence($sourceSeq as item()*,  $startingLoc as xs:double) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the contiguous sequence of items in the value of
 :                &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt; beginning at the position indicated by the value of
 :                &amp;lt;code&amp;gt;$startingLoc&amp;lt;/code&amp;gt; and continuing for the number of items indicated by the
 :             value of &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="subsequence" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceSeq" type="item()*"/&amp;gt;&amp;lt;arg name="startingLoc" type="xs:double"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="subsequence" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceSeq" type="item()*"/&amp;gt;&amp;lt;arg name="startingLoc" type="xs:double"/&amp;gt;&amp;lt;arg name="length" type="xs:double"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In the two-argument case, returns:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E2" xml:space="preserve"&amp;gt;$sourceSeq[fn:round($startingLoc) le position()]&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In the three-argument case, returns:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E2" xml:space="preserve"&amp;gt;$sourceSeq[fn:round($startingLoc) le position() 
 :          and position() lt fn:round($startingLoc) + fn:round($length)]&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The first item of a sequence is located at position 1, not position 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt; is the empty sequence, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$startingLoc&amp;lt;/code&amp;gt; is zero or negative, the subsequence includes items from
 :             the beginning of the &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is not specified, the subsequence includes items to the end of
 :                &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is greater than the number of items in the value of
 :                &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt; following &amp;lt;code&amp;gt;$startingLoc&amp;lt;/code&amp;gt;, the subsequence includes
 :             items to the end of &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="F"&amp;gt;As an exception to the previous two notes, if
 :                &amp;lt;code&amp;gt;$startingLoc&amp;lt;/code&amp;gt; is &amp;lt;code&amp;gt;-INF&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is
 :                &amp;lt;code&amp;gt;+INF&amp;lt;/code&amp;gt;, then &amp;lt;code&amp;gt;fn:round($startingLoc) + fn:round($length)&amp;lt;/code&amp;gt; is
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;; since &amp;lt;code&amp;gt;position() lt NaN&amp;lt;/code&amp;gt; is always false, the result is
 :             an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The reason the function accepts arguments of type &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; is that many
 :             computations on untyped data return an &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; result; and the reason for
 :             the rounding rules is to compensate for any imprecision in these floating-point
 :             computations.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-subsequence
 :)
declare function fn:subsequence( $sourceSeq as item()*,  $startingLoc as xs:double,  $length as xs:double) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the portion of the value of &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; beginning at the
 :             position indicated by the value of &amp;lt;code&amp;gt;$start&amp;lt;/code&amp;gt; and continuing for the number of
 :                &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; indicated by the value of
 :                &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceString" type="xs:string?"/&amp;gt;&amp;lt;arg name="start" type="xs:double"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceString" type="xs:string?"/&amp;gt;&amp;lt;arg name="start" type="xs:double"/&amp;gt;&amp;lt;arg name="length" type="xs:double"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; is the empty sequence, the function returns
 :             the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns a string comprising those &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; of &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; whose index position (counting
 :             from one) is greater than or equal to the value of &amp;lt;code&amp;gt;$start&amp;lt;/code&amp;gt; (rounded to an
 :             integer), and (if &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is specified) less than the sum of
 :                &amp;lt;code&amp;gt;$start&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; (both rounded to integers).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The characters returned do not extend beyond &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt;. If
 :                &amp;lt;code&amp;gt;$start&amp;lt;/code&amp;gt; is zero or negative, only those characters in positions greater
 :             than zero are returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;More specifically, the three argument version of the function returns the characters in
 :                &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; whose position &amp;lt;code&amp;gt;$p&amp;lt;/code&amp;gt; satisfies:&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;
 :             &amp;lt;code&amp;gt;fn:round($start) &amp;amp;lt;= $p &amp;amp;lt; fn:round($start) + fn:round($length)&amp;lt;/code&amp;gt;
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two argument version of the function assumes that &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is infinite
 :             and thus returns the &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; in
 :                &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; whose position &amp;lt;code&amp;gt;$p&amp;lt;/code&amp;gt; satisfies:&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;
 :             &amp;lt;code&amp;gt;fn:round($start) &amp;amp;lt;= $p&amp;lt;/code&amp;gt;
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In the above computations, the rules for &amp;lt;code&amp;gt;op:numeric-less-than&amp;lt;/code&amp;gt; and
 :                &amp;lt;code&amp;gt;op:numeric-greater-than&amp;lt;/code&amp;gt; apply.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The first character of a string is located at position 1, not position 0.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-substring
 :)
declare function fn:substring($sourceString as xs:string?,  $start as xs:double) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the portion of the value of &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; beginning at the
 :             position indicated by the value of &amp;lt;code&amp;gt;$start&amp;lt;/code&amp;gt; and continuing for the number of
 :                &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; indicated by the value of
 :                &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceString" type="xs:string?"/&amp;gt;&amp;lt;arg name="start" type="xs:double"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceString" type="xs:string?"/&amp;gt;&amp;lt;arg name="start" type="xs:double"/&amp;gt;&amp;lt;arg name="length" type="xs:double"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; is the empty sequence, the function returns
 :             the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns a string comprising those &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; of &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; whose index position (counting
 :             from one) is greater than or equal to the value of &amp;lt;code&amp;gt;$start&amp;lt;/code&amp;gt; (rounded to an
 :             integer), and (if &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is specified) less than the sum of
 :                &amp;lt;code&amp;gt;$start&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; (both rounded to integers).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The characters returned do not extend beyond &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt;. If
 :                &amp;lt;code&amp;gt;$start&amp;lt;/code&amp;gt; is zero or negative, only those characters in positions greater
 :             than zero are returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;More specifically, the three argument version of the function returns the characters in
 :                &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; whose position &amp;lt;code&amp;gt;$p&amp;lt;/code&amp;gt; satisfies:&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;
 :             &amp;lt;code&amp;gt;fn:round($start) &amp;amp;lt;= $p &amp;amp;lt; fn:round($start) + fn:round($length)&amp;lt;/code&amp;gt;
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two argument version of the function assumes that &amp;lt;code&amp;gt;$length&amp;lt;/code&amp;gt; is infinite
 :             and thus returns the &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; in
 :                &amp;lt;code&amp;gt;$sourceString&amp;lt;/code&amp;gt; whose position &amp;lt;code&amp;gt;$p&amp;lt;/code&amp;gt; satisfies:&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;
 :             &amp;lt;code&amp;gt;fn:round($start) &amp;amp;lt;= $p&amp;lt;/code&amp;gt;
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In the above computations, the rules for &amp;lt;code&amp;gt;op:numeric-less-than&amp;lt;/code&amp;gt; and
 :                &amp;lt;code&amp;gt;op:numeric-greater-than&amp;lt;/code&amp;gt; apply.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The first character of a string is located at position 1, not position 0.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-substring
 :)
declare function fn:substring( $sourceString as xs:string?,  $start as xs:double,  $length as xs:double) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the part of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; that follows the first occurrence of
 :                &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring-after" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring-after" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :             the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; does not contain a string that is equal to the value
 :             of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, then the function returns the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the substring of the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; that follows in
 :             the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; the first occurrence of a sequence of collation units
 :             that provides a &amp;lt;term&amp;gt;minimal match&amp;lt;/term&amp;gt; to the collation units of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;
 :             according to the collation that is used. &amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;&amp;lt;term&amp;gt;Minimal match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-substring-after
 :)
declare function fn:substring-after($arg1 as xs:string?,  $arg2 as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the part of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; that follows the first occurrence of
 :                &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring-after" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring-after" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :             the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; does not contain a string that is equal to the value
 :             of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, then the function returns the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the substring of the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; that follows in
 :             the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; the first occurrence of a sequence of collation units
 :             that provides a &amp;lt;term&amp;gt;minimal match&amp;lt;/term&amp;gt; to the collation units of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;
 :             according to the collation that is used. &amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;&amp;lt;term&amp;gt;Minimal match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-substring-after
 :)
declare function fn:substring-after( $arg1 as xs:string?,  $arg2 as xs:string?,  $collation as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the part of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; that precedes the first occurrence of
 :                &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring-before" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring-before" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :             the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; does not contain a string that is equal to the value
 :             of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, then the function returns the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the substring of the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; that precedes in
 :             the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; the first occurrence of a sequence of collation units
 :             that provides a &amp;lt;term&amp;gt;minimal match&amp;lt;/term&amp;gt; to the collation units of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;
 :             according to the collation that is used.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;&amp;lt;term&amp;gt;Minimal match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-substring-before
 :)
declare function fn:substring-before($arg1 as xs:string?,  $arg2 as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the part of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; that precedes the first occurrence of
 :                &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, taking collations into account.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring-before" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="substring-before" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg1" type="xs:string?"/&amp;gt;&amp;lt;arg name="arg2" type="xs:string?"/&amp;gt;&amp;lt;arg name="collation" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The three-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the empty sequence, or
 :             contains only ignorable collation units, it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt; is the zero-length string, then the function returns
 :             the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; does not contain a string that is equal to the value
 :             of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;, then the function returns the zero-length string. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used by this function is determined according to the rules in &amp;lt;specref ref="choosing-a-collation"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the substring of the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; that precedes in
 :             the value of &amp;lt;code&amp;gt;$arg1&amp;lt;/code&amp;gt; the first occurrence of a sequence of collation units
 :             that provides a &amp;lt;term&amp;gt;minimal match&amp;lt;/term&amp;gt; to the collation units of &amp;lt;code&amp;gt;$arg2&amp;lt;/code&amp;gt;
 :             according to the collation that is used.&amp;lt;/p&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;p&amp;gt;&amp;lt;term&amp;gt;Minimal match&amp;lt;/term&amp;gt; is defined in &amp;lt;bibref ref="Unicode-Collations"/&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be raised &amp;lt;errorref class="CH" code="0004"/&amp;gt; if the
 :             specified collation does not support collation units.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-substring-before
 :)
declare function fn:substring-before( $arg1 as xs:string?,  $arg2 as xs:string?,  $collation as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a value obtained by adding together the values in
 :             &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="sum" return-type="xs:anyAtomicType" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="sum" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="zero" type="xs:anyAtomicType?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Any values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; are cast to
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;. The items in the resulting sequence may be reordered in an
 :             arbitrary order. The resulting sequence is referred to below as the converted
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence is empty, then the single-argument form of the function
 :             returns the &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; value &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;; the two-argument form returns
 :             the value of the argument &amp;lt;code&amp;gt;$zero&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence contains the value &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is
 :             returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;All items in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; must be numeric or derived from a single base type. In
 :             addition, the type must support addition. Duration values must either all be
 :                &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; values or must all be
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; values. For numeric values, the numeric promotion
 :             rules defined in &amp;lt;specref ref="op.numeric"/&amp;gt; are used to promote all values to a single
 :             common type. The sum of a sequence of integers will therefore be an integer, while the
 :             sum of a numeric sequence that includes at least one &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; will be an
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function, using the second signature, is the result of the
 :             expression:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : if (fn:count($c) eq 0) then
 :     $zero
 : else if (fn:count($c) eq 1) then
 :     $c[1]
 : else
 :     $c[1] + fn:sum(subsequence($c, 2))&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;where &amp;lt;code&amp;gt;$c&amp;lt;/code&amp;gt; is the converted sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function, using the first signature, is the result of the expression:
 :                &amp;lt;code&amp;gt;fn:sum($arg, 0)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A type error is raised &amp;lt;errorref class="RG" code="0006"/&amp;gt; if the input sequence contains
 :             items of incompatible types, as described above.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-sum
 :)
declare function fn:sum($arg as xs:anyAtomicType*) as  xs:anyAtomicType external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a value obtained by adding together the values in
 :             &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="sum" return-type="xs:anyAtomicType" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="sum" return-type="xs:anyAtomicType?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType*"/&amp;gt;&amp;lt;arg name="zero" type="xs:anyAtomicType?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Any values of type &amp;lt;code&amp;gt;xs:untypedAtomic&amp;lt;/code&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; are cast to
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;. The items in the resulting sequence may be reordered in an
 :             arbitrary order. The resulting sequence is referred to below as the converted
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence is empty, then the single-argument form of the function
 :             returns the &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; value &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;; the two-argument form returns
 :             the value of the argument &amp;lt;code&amp;gt;$zero&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the converted sequence contains the value &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is
 :             returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;All items in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; must be numeric or derived from a single base type. In
 :             addition, the type must support addition. Duration values must either all be
 :                &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; values or must all be
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; values. For numeric values, the numeric promotion
 :             rules defined in &amp;lt;specref ref="op.numeric"/&amp;gt; are used to promote all values to a single
 :             common type. The sum of a sequence of integers will therefore be an integer, while the
 :             sum of a numeric sequence that includes at least one &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; will be an
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function, using the second signature, is the result of the
 :             expression:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;
 : if (fn:count($c) eq 0) then
 :     $zero
 : else if (fn:count($c) eq 1) then
 :     $c[1]
 : else
 :     $c[1] + fn:sum(subsequence($c, 2))&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;where &amp;lt;code&amp;gt;$c&amp;lt;/code&amp;gt; is the converted sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function, using the first signature, is the result of the expression:
 :                &amp;lt;code&amp;gt;fn:sum($arg, 0)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A type error is raised &amp;lt;errorref class="RG" code="0006"/&amp;gt; if the input sequence contains
 :             items of incompatible types, as described above.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-sum
 :)
declare function fn:sum( $arg as xs:anyAtomicType*,  $zero as xs:anyAtomicType?) as  xs:anyAtomicType? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns all but the first item in a sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="tail" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the value of the expression &amp;lt;code&amp;gt;subsequence($arg, 2)&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, or a sequence containing a single item, then
 :             the empty sequence is returned. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-tail
 :)
declare function fn:tail($arg as item()*) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the timezone component of an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="timezone-from-date" return-type="xs:dayTimeDuration?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:date?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the timezone component of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, if any. If
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component, then the result is an
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; that indicates deviation from UTC; its value may
 :             range from +14:00 to -14:00 hours, both inclusive. If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has no timezone
 :             component, the result is the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:timezone-from-date(xs:date("1999-05-31-05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;xs:dayTimeDuration("-PT5H")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:timezone-from-date(xs:date("2000-06-12Z"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;xs:dayTimeDuration("PT0S")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-timezone-from-date
 :)
declare function fn:timezone-from-date($arg as xs:date?) as  xs:dayTimeDuration? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the timezone component of an &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="timezone-from-dateTime" return-type="xs:dayTimeDuration?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:dateTime?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the timezone component of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, if any. If
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component, then the result is an
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; that indicates deviation from UTC; its value may
 :             range from +14:00 to -14:00 hours, both inclusive. If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has no timezone
 :             component, the result is the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:timezone-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;xs:dayTimeDuration("-PT5H")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:timezone-from-dateTime(xs:dateTime("2000-06-12T13:20:00Z"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;xs:dayTimeDuration("PT0S")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:timezone-from-dateTime(xs:dateTime("2004-08-27T00:00:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-timezone-from-dateTime
 :)
declare function fn:timezone-from-dateTime($arg as xs:dateTime?) as  xs:dayTimeDuration? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the timezone component of an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="timezone-from-time" return-type="xs:dayTimeDuration?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:time?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the timezone component of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, if any. If
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has a timezone component, then the result is an
 :                &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; that indicates deviation from UTC; its value may
 :             range from +14:00 to -14:00 hours, both inclusive. If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has no timezone
 :             component, the result is the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:timezone-from-time(xs:time("13:20:00-05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;xs:dayTimeDuration("-PT5H")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:timezone-from-time(xs:time("13:20:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-timezone-from-time
 :)
declare function fn:timezone-from-time($arg as xs:time?) as  xs:dayTimeDuration? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of strings constructed by splitting the input wherever a
 :             separator is found; the separator is any substring that matches a given regular
 :             expression.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="tokenize" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="tokenize" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="flags" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of calling the first version of this function (omitting the argument
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt;) is the same as the effect of calling the second version with the
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument set to a zero-length string. Flags are defined in
 :                &amp;lt;specref ref="flags"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument is interpreted in the same way as for the
 :                &amp;lt;code&amp;gt;fn:matches&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the empty sequence, or if &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the
 :             zero-length string, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of strings formed by breaking the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt;
 :             string into a sequence of strings, treating any substring that matches
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; as a separator. The separators themselves are not returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If a separator occurs at the start of the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string, the result
 :             sequence will start with a zero-length string. Zero-length strings will also occur in
 :             the result sequence if a separator occurs at the end of the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string,
 :             or if two adjacent substrings match the supplied &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If two alternatives within the supplied &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; both match at the same
 :             position in the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string, then the match that is chosen is the first.
 :             For example:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:tokenize("abracadabra", "(ab)|(a)") returns ("", "r", "c", "d", "r", "")&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0002"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0001"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0003"/&amp;gt; if the supplied
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; matches a zero-length string, that is, if &amp;lt;code&amp;gt;fn:matches("",
 :                $pattern, $flags)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-tokenize
 :)
declare function fn:tokenize($input as xs:string?,  $pattern as xs:string) as  xs:string* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of strings constructed by splitting the input wherever a
 :             separator is found; the separator is any substring that matches a given regular
 :             expression.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="tokenize" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="tokenize" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="input" type="xs:string?"/&amp;gt;&amp;lt;arg name="pattern" type="xs:string"/&amp;gt;&amp;lt;arg name="flags" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of calling the first version of this function (omitting the argument
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt;) is the same as the effect of calling the second version with the
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument set to a zero-length string. Flags are defined in
 :                &amp;lt;specref ref="flags"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; argument is interpreted in the same way as for the
 :                &amp;lt;code&amp;gt;fn:matches&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the empty sequence, or if &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; is the
 :             zero-length string, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of strings formed by breaking the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt;
 :             string into a sequence of strings, treating any substring that matches
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; as a separator. The separators themselves are not returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If a separator occurs at the start of the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string, the result
 :             sequence will start with a zero-length string. Zero-length strings will also occur in
 :             the result sequence if a separator occurs at the end of the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string,
 :             or if two adjacent substrings match the supplied &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; If two alternatives within the supplied &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; both match at the same
 :             position in the &amp;lt;code&amp;gt;$input&amp;lt;/code&amp;gt; string, then the match that is chosen is the first.
 :             For example:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt; fn:tokenize("abracadabra", "(ab)|(a)") returns ("", "r", "c", "d", "r", "")&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0002"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0001"/&amp;gt; if the value of
 :                &amp;lt;code&amp;gt;$flags&amp;lt;/code&amp;gt; is invalid according to the rules described in section &amp;lt;specref ref="regex-syntax"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RX" code="0003"/&amp;gt; if the supplied
 :                &amp;lt;code&amp;gt;$pattern&amp;lt;/code&amp;gt; matches a zero-length string, that is, if &amp;lt;code&amp;gt;fn:matches("",
 :                $pattern, $flags)&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-tokenize
 :)
declare function fn:tokenize( $input as xs:string?,  $pattern as xs:string,  $flags as xs:string) as  xs:string* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Provides an execution trace intended to be used in debugging queries.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="trace" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="value" type="item()*"/&amp;gt;&amp;lt;arg name="label" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the value of &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt;, unchanged.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In addition, the values of &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt;, converted to an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;,
 :             and &amp;lt;code&amp;gt;$label&amp;lt;/code&amp;gt;
 :             &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; be directed to a trace data set. The destination of the trace
 :             output is &amp;lt;termref def="implementation-defined"/&amp;gt;. The format of the trace output is
 :                &amp;lt;termref def="implementation-dependent"/&amp;gt;. The ordering of output from calls of the
 :                &amp;lt;code&amp;gt;fn:trace&amp;lt;/code&amp;gt; function is &amp;lt;termref def="implementation-dependent"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Consider a situation in which a user wants to investigate the actual value passed to
 :                a function. Assume that in a particular execution, &amp;lt;code&amp;gt;$v&amp;lt;/code&amp;gt; is an
 :                   &amp;lt;code&amp;gt;xs:decimal&amp;lt;/code&amp;gt; with value &amp;lt;code&amp;gt;124.84&amp;lt;/code&amp;gt;. Writing &amp;lt;code&amp;gt;fn:trace($v,
 :                   'the value of $v is:')&amp;lt;/code&amp;gt; will put the strings &amp;lt;code&amp;gt;"124.84"&amp;lt;/code&amp;gt; and
 :                   &amp;lt;code&amp;gt;"the value of $v is:"&amp;lt;/code&amp;gt; in the trace data set in implementation
 :                dependent order.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-trace
 :)
declare function fn:trace($value as item()*,  $label as xs:string) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; modified by replacing or removing
 :             individual characters. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="translate" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;arg name="mapString" type="xs:string"/&amp;gt;&amp;lt;arg name="transString" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns a result string constructed by processing each &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; in the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, in order,
 :             according to the following rules:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the character does not appear in the value of &amp;lt;code&amp;gt;$mapString&amp;lt;/code&amp;gt; then it
 :                   is added to the result string unchanged.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the character first appears in the value of &amp;lt;code&amp;gt;$mapString&amp;lt;/code&amp;gt; at some
 :                   position &amp;lt;emph&amp;gt;M&amp;lt;/emph&amp;gt;, where the value of &amp;lt;code&amp;gt;$transString&amp;lt;/code&amp;gt; is
 :                      &amp;lt;emph&amp;gt;M&amp;lt;/emph&amp;gt; or more characters in length, then the character at position
 :                      &amp;lt;emph&amp;gt;M&amp;lt;/emph&amp;gt; in &amp;lt;code&amp;gt;$transString&amp;lt;/code&amp;gt; is added to the result string.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the character first appears in the value of &amp;lt;code&amp;gt;$mapString&amp;lt;/code&amp;gt; at some
 :                   position &amp;lt;emph&amp;gt;M&amp;lt;/emph&amp;gt;, where the value of &amp;lt;code&amp;gt;$transString&amp;lt;/code&amp;gt; is less than
 :                      &amp;lt;emph&amp;gt;M&amp;lt;/emph&amp;gt; characters in length, then the character is omitted from the
 :                   result string.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$mapString&amp;lt;/code&amp;gt; is the zero-length string then the function returns
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; unchanged.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If a character occurs more than once in &amp;lt;code&amp;gt;$mapString&amp;lt;/code&amp;gt;, then the first
 :             occurrence determines the action taken.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$transString&amp;lt;/code&amp;gt; is longer than &amp;lt;code&amp;gt;$mapString&amp;lt;/code&amp;gt;, the excess
 :             characters are ignored.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-translate
 :)
declare function fn:translate( $arg as xs:string?,  $mapString as xs:string,  $transString as xs:string) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the &amp;lt;code&amp;gt;xs:boolean&amp;lt;/code&amp;gt; value &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="true" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result is equivalent to &amp;lt;code&amp;gt;xs:boolean("1")&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:true()&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;xs:boolean(1)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-true
 :)
declare function fn:true() as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the items of &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt; in an &amp;lt;termref def="implementation-dependent"/&amp;gt; order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unordered" return-type="item()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="sourceSeq" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the items of &amp;lt;code&amp;gt;$sourceSeq&amp;lt;/code&amp;gt; in an &amp;lt;termref def="implementation-dependent"/&amp;gt; order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Query optimizers may be able to do a better job if the order of the output sequence is
 :             not specified. For example, when retrieving prices from a purchase order, if an index
 :             exists on prices, it may be more efficient to return the prices in index order rather
 :             than in document order.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unordered
 :)
declare function fn:unordered($sourceSeq as item()*) as  item()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;fn:unparsed-text&amp;lt;/code&amp;gt; function reads an external resource (for example, a
 :             file) and returns &amp;lt;phrase diff="chg" at="L"&amp;gt;a string representation of the resource&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt; argument &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be a string in the form of a URI
 :             reference, which &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; contain no fragment identifier, and
 :                &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; identify a resource 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;for which a string representation is available&amp;lt;/phrase&amp;gt;. If the URI is a
 :             relative URI reference, then it is resolved relative to the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;Static Base URI property from the static context&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;The mapping of URIs to the string representation of a resource is the mapping defined
 :             in the &amp;lt;xtermref spec="XP30" ref="dt-available-text-resources"&amp;gt;available text resources&amp;lt;/xtermref&amp;gt;
 :          component of the dynamic context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of the &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt; argument is an empty sequence, the function
 :             returns an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument, if present, is the name of an encoding. The values
 :             for this attribute follow the same rules as for the &amp;lt;code&amp;gt;encoding&amp;lt;/code&amp;gt; attribute in
 :             an XML declaration. The only values which every &amp;lt;termref def="implementation"&amp;gt;implementation&amp;lt;/termref&amp;gt; is &amp;lt;rfc2119&amp;gt;required&amp;lt;/rfc2119&amp;gt; to recognize are
 :                &amp;lt;code&amp;gt;utf-8&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;utf-16&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The encoding of the external resource is determined as follows:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;external encoding information is used if available, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;if the media type of the resource is &amp;lt;code&amp;gt;text/xml&amp;lt;/code&amp;gt; or
 :                      &amp;lt;code&amp;gt;application/xml&amp;lt;/code&amp;gt; (see &amp;lt;bibref ref="rfc2376"/&amp;gt;), or if it matches
 :                   the conventions &amp;lt;code&amp;gt;text/*+xml&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;application/*+xml&amp;lt;/code&amp;gt; (see
 :                      &amp;lt;bibref ref="rfc3023"/&amp;gt; and/or its successors), then the encoding is recognized
 :                   as specified in &amp;lt;bibref ref="REC-xml"/&amp;gt;, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the value of the &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument is used if present, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the processor &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; use &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; heuristics to determine the likely encoding,
 :                   otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;UTF-8 is assumed.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function is a string containing the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the resource retrieved
 :             using the URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1170"/&amp;gt; if &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt;
 :             contains a fragment identifier, or if it cannot be used to retrieve the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of a resource.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1190"/&amp;gt; &amp;lt;phrase diff="add" at="L"&amp;gt;if the value 
 :             of the &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument is not a valid encoding name, &amp;lt;/phrase&amp;gt;if the &amp;lt;termref def="dt-processor"&amp;gt;processor&amp;lt;/termref&amp;gt; does not support the specified encoding,
 :             if the &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the retrieved
 :             resource contains octets that cannot be decoded into Unicode &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; using the specified encoding, or if the resulting characters
 :             are not permitted XML characters.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1200"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; is absent and the &amp;lt;termref def="dt-processor"&amp;gt;processor&amp;lt;/termref&amp;gt; cannot infer the encoding using external information and the
 :             encoding is not UTF-8.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text
 :)
declare function fn:unparsed-text($href as xs:string?) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;fn:unparsed-text&amp;lt;/code&amp;gt; function reads an external resource (for example, a
 :             file) and returns &amp;lt;phrase diff="chg" at="L"&amp;gt;a string representation of the resource&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt; argument &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be a string in the form of a URI
 :             reference, which &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; contain no fragment identifier, and
 :                &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; identify a resource 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;for which a string representation is available&amp;lt;/phrase&amp;gt;. If the URI is a
 :             relative URI reference, then it is resolved relative to the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;Static Base URI property from the static context&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;The mapping of URIs to the string representation of a resource is the mapping defined
 :             in the &amp;lt;xtermref spec="XP30" ref="dt-available-text-resources"&amp;gt;available text resources&amp;lt;/xtermref&amp;gt;
 :          component of the dynamic context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of the &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt; argument is an empty sequence, the function
 :             returns an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument, if present, is the name of an encoding. The values
 :             for this attribute follow the same rules as for the &amp;lt;code&amp;gt;encoding&amp;lt;/code&amp;gt; attribute in
 :             an XML declaration. The only values which every &amp;lt;termref def="implementation"&amp;gt;implementation&amp;lt;/termref&amp;gt; is &amp;lt;rfc2119&amp;gt;required&amp;lt;/rfc2119&amp;gt; to recognize are
 :                &amp;lt;code&amp;gt;utf-8&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;utf-16&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The encoding of the external resource is determined as follows:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;external encoding information is used if available, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;if the media type of the resource is &amp;lt;code&amp;gt;text/xml&amp;lt;/code&amp;gt; or
 :                      &amp;lt;code&amp;gt;application/xml&amp;lt;/code&amp;gt; (see &amp;lt;bibref ref="rfc2376"/&amp;gt;), or if it matches
 :                   the conventions &amp;lt;code&amp;gt;text/*+xml&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;application/*+xml&amp;lt;/code&amp;gt; (see
 :                      &amp;lt;bibref ref="rfc3023"/&amp;gt; and/or its successors), then the encoding is recognized
 :                   as specified in &amp;lt;bibref ref="REC-xml"/&amp;gt;, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the value of the &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument is used if present, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the processor &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; use &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; heuristics to determine the likely encoding,
 :                   otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;UTF-8 is assumed.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function is a string containing the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the resource retrieved
 :             using the URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1170"/&amp;gt; if &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt;
 :             contains a fragment identifier, or if it cannot be used to retrieve the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of a resource.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1190"/&amp;gt; &amp;lt;phrase diff="add" at="L"&amp;gt;if the value 
 :             of the &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument is not a valid encoding name, &amp;lt;/phrase&amp;gt;if the &amp;lt;termref def="dt-processor"&amp;gt;processor&amp;lt;/termref&amp;gt; does not support the specified encoding,
 :             if the &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the retrieved
 :             resource contains octets that cannot be decoded into Unicode &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; using the specified encoding, or if the resulting characters
 :             are not permitted XML characters.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1200"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; is absent and the &amp;lt;termref def="dt-processor"&amp;gt;processor&amp;lt;/termref&amp;gt; cannot infer the encoding using external information and the
 :             encoding is not UTF-8.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text
 :)
declare function fn:unparsed-text($href as xs:string?,  $encoding as xs:string) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Because errors in evaluating the &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; function are
 :             non-recoverable, these two functions are provided to allow an application to determine
 :             whether a call with particular arguments would succeed.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt; function determines whether a call
 :             on the &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; function with identical arguments would
 :             return a string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the first argument is an empty sequence, the function returns false. &amp;lt;phrase diff="del" at="L"&amp;gt;If the second
 :             argument is an empty sequence, the function behaves as if the second argument were
 :             omitted.&amp;lt;/phrase&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In other cases, the function returns true if a call on
 :                &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; with the same arguments would succeed, and
 :             false if a call on &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; with the same arguments would
 :             fail with a non-recoverable dynamic error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The functions &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; and
 :                &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt; have the same requirement for
 :                &amp;lt;termref def="deterministic"&amp;gt;determinism&amp;lt;/termref&amp;gt; as the functions
 :                &amp;lt;code&amp;gt;fn:doc&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:doc-available&amp;lt;/code&amp;gt;. This means that unless the
 :             user has explicitly stated a requirement for a reduced level of determinism, either of
 :             these functions if called twice with the same arguments during the course of a
 :             transformation &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; return the same results each time; moreover, the
 :             results of a call on &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt;
 :             &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be consistent with the results of a subsequent call on
 :                &amp;lt;function&amp;gt;unparsed-text&amp;lt;/function&amp;gt; with the same arguments.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This requires that the &amp;lt;function&amp;gt;unparsed-text-available&amp;lt;/function&amp;gt; function should
 :             actually attempt to read the resource identified by the URI, and check that it is
 :             correctly encoded and contains no characters that are invalid in XML. Implementations
 :             may avoid the cost of repeating these checks for example by caching the validated
 :             contents of the resource, to anticipate a subsequent call on the
 :                &amp;lt;function&amp;gt;unparsed-text&amp;lt;/function&amp;gt;
 :             &amp;lt;phrase diff="add" at="A"&amp;gt;or &amp;lt;function&amp;gt;unparsed-text-lines&amp;lt;/function&amp;gt;
 :             &amp;lt;/phrase&amp;gt; function. Alternatively, implementations may be able to rewrite an expression
 :             such as &amp;lt;code&amp;gt;if (unparsed-text-available(A)) then unparsed-text(A) else ...&amp;lt;/code&amp;gt; to
 :             generate a single call internally.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text-available
 :)
declare function fn:unparsed-text-available($href as xs:string?) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Because errors in evaluating the &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; function are
 :             non-recoverable, these two functions are provided to allow an application to determine
 :             whether a call with particular arguments would succeed.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt; function determines whether a call
 :             on the &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; function with identical arguments would
 :             return a string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the first argument is an empty sequence, the function returns false. &amp;lt;phrase diff="del" at="L"&amp;gt;If the second
 :             argument is an empty sequence, the function behaves as if the second argument were
 :             omitted.&amp;lt;/phrase&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In other cases, the function returns true if a call on
 :                &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; with the same arguments would succeed, and
 :             false if a call on &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; with the same arguments would
 :             fail with a non-recoverable dynamic error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The functions &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; and
 :                &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt; have the same requirement for
 :                &amp;lt;termref def="deterministic"&amp;gt;determinism&amp;lt;/termref&amp;gt; as the functions
 :                &amp;lt;code&amp;gt;fn:doc&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:doc-available&amp;lt;/code&amp;gt;. This means that unless the
 :             user has explicitly stated a requirement for a reduced level of determinism, either of
 :             these functions if called twice with the same arguments during the course of a
 :             transformation &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; return the same results each time; moreover, the
 :             results of a call on &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt;
 :             &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be consistent with the results of a subsequent call on
 :                &amp;lt;function&amp;gt;unparsed-text&amp;lt;/function&amp;gt; with the same arguments.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This requires that the &amp;lt;function&amp;gt;unparsed-text-available&amp;lt;/function&amp;gt; function should
 :             actually attempt to read the resource identified by the URI, and check that it is
 :             correctly encoded and contains no characters that are invalid in XML. Implementations
 :             may avoid the cost of repeating these checks for example by caching the validated
 :             contents of the resource, to anticipate a subsequent call on the
 :                &amp;lt;function&amp;gt;unparsed-text&amp;lt;/function&amp;gt;
 :             &amp;lt;phrase diff="add" at="A"&amp;gt;or &amp;lt;function&amp;gt;unparsed-text-lines&amp;lt;/function&amp;gt;
 :             &amp;lt;/phrase&amp;gt; function. Alternatively, implementations may be able to rewrite an expression
 :             such as &amp;lt;code&amp;gt;if (unparsed-text-available(A)) then unparsed-text(A) else ...&amp;lt;/code&amp;gt; to
 :             generate a single call internally.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text-available
 :)
declare function fn:unparsed-text-available( $href as xs:string?,  $encoding as xs:string) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;fn:unparsed-text-lines&amp;lt;/code&amp;gt; function reads an external resource (for
 :             example, a file) and returns its contents as a sequence of strings, one for each line of
 :             text in the  &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the resource.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-lines" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-lines" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;unparsed-text-lines&amp;lt;/code&amp;gt; function reads an external resource (for example, a
 :             file) and returns its &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; as a sequence of strings, separated at newline
 :             boundaries. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the single-argument function is the same as the result of the expression
 :                &amp;lt;code&amp;gt;fn:tokenize(fn:unparsed-text($href), '\r\n|\r|\n')[not(position()=last() and
 :                .='')]&amp;lt;/code&amp;gt;. The result of the two-argument function is the same as the result of
 :             the expression &amp;lt;code&amp;gt;fn:tokenize(fn:unparsed-text($href, $encoding),
 :                '\r\n|\r|\n'))[not(position()=last() and .='')]&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result is a thus a sequence of strings containing the text of the resource retrieved
 :             using the URI, each string representing one line of text. Lines are separated by one of
 :             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not
 :             included in the returned strings. If there are two adjacent newline sequences, a
 :             zero-length string will be returned to represent the empty line; but if the external
 :             resource ends with a newline sequence, no zero-length string will be returned as the
 :             last item in the result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Error conditions are the same as for the &amp;lt;code&amp;gt;fn:unparsed-text&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text-lines
 :)
declare function fn:unparsed-text-lines($href as xs:string?) as  xs:string* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;fn:unparsed-text-lines&amp;lt;/code&amp;gt; function reads an external resource (for
 :             example, a file) and returns its contents as a sequence of strings, one for each line of
 :             text in the  &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the resource.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-lines" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-lines" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;unparsed-text-lines&amp;lt;/code&amp;gt; function reads an external resource (for example, a
 :             file) and returns its &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; as a sequence of strings, separated at newline
 :             boundaries. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the single-argument function is the same as the result of the expression
 :                &amp;lt;code&amp;gt;fn:tokenize(fn:unparsed-text($href), '\r\n|\r|\n')[not(position()=last() and
 :                .='')]&amp;lt;/code&amp;gt;. The result of the two-argument function is the same as the result of
 :             the expression &amp;lt;code&amp;gt;fn:tokenize(fn:unparsed-text($href, $encoding),
 :                '\r\n|\r|\n'))[not(position()=last() and .='')]&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result is a thus a sequence of strings containing the text of the resource retrieved
 :             using the URI, each string representing one line of text. Lines are separated by one of
 :             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not
 :             included in the returned strings. If there are two adjacent newline sequences, a
 :             zero-length string will be returned to represent the empty line; but if the external
 :             resource ends with a newline sequence, no zero-length string will be returned as the
 :             last item in the result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Error conditions are the same as for the &amp;lt;code&amp;gt;fn:unparsed-text&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text-lines
 :)
declare function fn:unparsed-text-lines( $href as xs:string?,  $encoding as xs:string) as  xs:string* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Converts a string to upper case.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="upper-case" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the zero-length string is
 :             returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; after translating every
 :                &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; to its upper-case correspondent as
 :             defined in the appropriate case mappings section in the Unicode standard &amp;lt;bibref ref="Unicode"/&amp;gt;. For versions of Unicode beginning with the 2.1.8 update, only
 :             locale-insensitive case mappings should be applied. Beginning with version 3.2.0 (and
 :             likely future versions) of Unicode, precise mappings are described in default case
 :             operations, which are full case mappings in the absence of tailoring for particular
 :             languages and environments. Every lower-case character that does not have an upper-case
 :             correspondent, as well as every upper-case character, is included in the returned value
 :             in its original form. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Case mappings may change the length of a string. In general, the
 :                &amp;lt;code&amp;gt;fn:upper-case&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:lower-case&amp;lt;/code&amp;gt; functions are not inverses
 :             of each other: &amp;lt;code&amp;gt;fn:lower-case(fn:upper-case($arg))&amp;lt;/code&amp;gt; is not guaranteed to
 :             return &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, nor is &amp;lt;code&amp;gt;fn:upper-case(fn:lower-case($arg))&amp;lt;/code&amp;gt;. The
 :             Latin small letter dotless i (as used in Turkish) is perhaps the most prominent
 :             lower-case letter which will not round-trip. The Latin capital letter i with dot above
 :             is the most prominent upper-case letter which will not round trip; there are others,
 :             such as Latin capital letter Sharp S (#1E9E) which is introduced in Unicode 5.1.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; These functions may not always be linguistically appropriate (e.g. Turkish i without
 :             dot) or appropriate for the application (e.g. titlecase). In cases such as Turkish, a
 :             simple translation should be used first.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; Because the function is not sensitive to locale, results will not always match user
 :             expectations. In Quebec, for example, the standard uppercase equivalent of "è" is "È",
 :             while in metropolitan France it is more commonly "E"; only one of these is supported by
 :             the functions as defined.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; Many characters of class Ll lack uppercase equivalents in the Unicode case mapping
 :             tables; many characters of class Lu lack lowercase equivalents.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-upper-case
 :)
declare function fn:upper-case($arg as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values representing the URIs in a resource collection.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="uri-collection" return-type="xs:anyURI*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="uri-collection" return-type="xs:anyURI*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		available resource collections, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of the function returns the URIs in the &amp;lt;term&amp;gt;Default resource collection&amp;lt;/term&amp;gt;
 :             described in &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a relative &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;, it is resolved
 :             against the value of the base-URI property from the static context. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function behaves as if it had been
 :             called without an argument. See above.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The single-argument form of the function returns the sequence of URIs corresponding to the 
 :             supplied URI in the &amp;lt;term&amp;gt;Available resource collections&amp;lt;/term&amp;gt; described in 
 :             &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if no URI is supplied (that is, if the
 :             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the
 :             value of the default resource collection is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="J"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; 
 :             if &amp;lt;term&amp;gt;available resource collections&amp;lt;/term&amp;gt; provides no mapping for the absolutized URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0004"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a
 :             valid &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-uri-collection
 :)
declare function fn:uri-collection() as  xs:anyURI* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values representing the URIs in a resource collection.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="uri-collection" return-type="xs:anyURI*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="uri-collection" return-type="xs:anyURI*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		available resource collections, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of the function returns the URIs in the &amp;lt;term&amp;gt;Default resource collection&amp;lt;/term&amp;gt;
 :             described in &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a relative &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;, it is resolved
 :             against the value of the base-URI property from the static context. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function behaves as if it had been
 :             called without an argument. See above.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The single-argument form of the function returns the sequence of URIs corresponding to the 
 :             supplied URI in the &amp;lt;term&amp;gt;Available resource collections&amp;lt;/term&amp;gt; described in 
 :             &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if no URI is supplied (that is, if the
 :             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the
 :             value of the default resource collection is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="J"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; 
 :             if &amp;lt;term&amp;gt;available resource collections&amp;lt;/term&amp;gt; provides no mapping for the absolutized URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0004"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a
 :             valid &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-uri-collection
 :)
declare function fn:uri-collection($arg as xs:string?) as  xs:anyURI* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the year component of an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="year-from-date" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:date?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; representing the year in the
 :             local value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. The value may be negative. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:year-from-date(xs:date("1999-05-31"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;1999&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:year-from-date(xs:date("2000-01-01+05:00"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;2000&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-year-from-date
 :)
declare function fn:year-from-date($arg as xs:date?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the number of years in a duration.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="years-from-duration" return-type="xs:integer?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:duration?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns an &amp;lt;code&amp;gt;xs:integer&amp;lt;/code&amp;gt; representing the years
 :             component in the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. The result is obtained by casting
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; to an &amp;lt;code&amp;gt;xs:yearMonthDuration&amp;lt;/code&amp;gt; (see &amp;lt;specref ref="casting-to-durations"/&amp;gt;) and then computing the years component as described in
 :                &amp;lt;specref ref="canonical-yearMonthDuration"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a negative duration then the result will be negative..&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an &amp;lt;code&amp;gt;xs:dayTimeDuration&amp;lt;/code&amp;gt; the function returns 0.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:years-from-duration(xs:yearMonthDuration("P20Y15M"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;21&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:years-from-duration(xs:yearMonthDuration("-P15M"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;-1&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:years-from-duration(xs:dayTimeDuration("-P2DT15H"))&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-years-from-duration
 :)
declare function fn:years-from-duration($arg as xs:duration?) as  xs:integer? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; if it contains zero or one items. Otherwise, raises
 :             an error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="zero-or-one" return-type="item()?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Except in error cases, the function returns &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; unchanged.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="del" at="F"&amp;gt;For detailed type semantics, see [Formal Semantics].&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0003"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; contains more
 :             than one item.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-zero-or-one
 :)
declare function fn:zero-or-one($arg as item()*) as  item()? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Creates an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; from a sequence of &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="codepoints-to-string" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:integer*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the string made up from the &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; whose Unicode &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt; are
 :             supplied in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. This will be the zero-length string if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;
 :             is the empty sequence. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="CH" code="0001"/&amp;gt; if any of the codepoints in
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a permitted XML character.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-codepoints-to-string
 :)
declare function fn:codepoints-to-string($arg as xs:integer*) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the sequence of &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt; that
 :             constitute an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; value. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string-to-codepoints" return-type="xs:integer*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of integers, each integer being the Unicode &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt; of the corresponding &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt; in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a zero-length string or the empty sequence, the function returns
 :             the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The expression &amp;lt;code&amp;gt;fn:string-to-codepoints("Thérèse")&amp;lt;/code&amp;gt; returns &amp;lt;code&amp;gt;(84, 104, 233, 114, 232, 115, 101)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-string-to-codepoints
 :)
declare function fn:string-to-codepoints($arg as xs:string?) as  xs:integer* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the base URI of a node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="base-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="base-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;The zero-argument version of the function returns the base URI of the
 :             context node: it is equivalent to calling &amp;lt;code&amp;gt;fn:base-uri(.)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;The single-argument version of the function behaves as follows:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty
 :                sequence.&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;Otherwise, the function returns the value of the &amp;lt;code&amp;gt;dm:base-uri&amp;lt;/code&amp;gt; accessor
 :                applied to the node &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. This accessor is defined, for each kind of
 :                node, in the XDM specification (See &amp;lt;xspecref spec="DM30" ref="dm-base-uri"/&amp;gt;).&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;As explained in XDM, document, element and processing-instruction nodes have a
 :             base-uri property which may be empty. The base-uri property for all other node kinds is
 :             the empty sequence. The dm:base-uri accessor returns the base-uri property of a node if
 :             it exists and is non-empty; otherwise it returns the result of applying the dm:base-uri
 :             accessor to its parent, recursively. If the node does not have a parent, or if the
 :             recursive ascent up the ancestor chain encounters a parentless node whose base-uri
 :             property is empty, the empty sequence is returned. In the case of namespace nodes,
 :             however, the result is always an empty sequence -- it does not depend on the base URI of
 :             the parent element.&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See also &amp;lt;code&amp;gt;fn:static-base-uri&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-base-uri
 :)
declare function fn:base-uri() as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the base URI of a node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="base-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="base-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;The zero-argument version of the function returns the base URI of the
 :             context node: it is equivalent to calling &amp;lt;code&amp;gt;fn:base-uri(.)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;The single-argument version of the function behaves as follows:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty
 :                sequence.&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;Otherwise, the function returns the value of the &amp;lt;code&amp;gt;dm:base-uri&amp;lt;/code&amp;gt; accessor
 :                applied to the node &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;. This accessor is defined, for each kind of
 :                node, in the XDM specification (See &amp;lt;xspecref spec="DM30" ref="dm-base-uri"/&amp;gt;).&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;note xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;As explained in XDM, document, element and processing-instruction nodes have a
 :             base-uri property which may be empty. The base-uri property for all other node kinds is
 :             the empty sequence. The dm:base-uri accessor returns the base-uri property of a node if
 :             it exists and is non-empty; otherwise it returns the result of applying the dm:base-uri
 :             accessor to its parent, recursively. If the node does not have a parent, or if the
 :             recursive ascent up the ancestor chain encounters a parentless node whose base-uri
 :             property is empty, the empty sequence is returned. In the case of namespace nodes,
 :             however, the result is always an empty sequence -- it does not depend on the base URI of
 :             the parent element.&amp;lt;/note&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See also &amp;lt;code&amp;gt;fn:static-base-uri&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-base-uri
 :)
declare function fn:base-uri($arg as node()?) as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the current date.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="current-date" return-type="xs:date" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns &amp;lt;code&amp;gt;xs:date(fn:current-dateTime())&amp;lt;/code&amp;gt;. This is an &amp;lt;code&amp;gt;xs:date&amp;lt;/code&amp;gt;
 :             (with timezone) that is current at some time during the evaluation of a query or
 :             transformation in which &amp;lt;code&amp;gt;fn:current-date&amp;lt;/code&amp;gt; is executed.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"/&amp;gt;. The precise instant during the query or
 :             transformation represented by the value of &amp;lt;code&amp;gt;fn:current-date&amp;lt;/code&amp;gt; is &amp;lt;termref def="implementation-dependent"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The returned date will always have an associated timezone, which will always be the same
 :             as the implicit timezone in the dynamic context&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-current-date
 :)
declare function fn:current-date() as  xs:date external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the current date and time (with timezone).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="current-dateTime" return-type="xs:dateTimeStamp" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the current dateTime (with timezone) from the dynamic context. (See &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.) This is an
 :                &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; that is current at some time during the evaluation of a
 :             query or transformation in which &amp;lt;code&amp;gt;fn:current-dateTime&amp;lt;/code&amp;gt; is executed.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"/&amp;gt;. The precise instant during the query or
 :             transformation represented by the value of &amp;lt;code&amp;gt;fn:current-dateTime()&amp;lt;/code&amp;gt; is
 :                &amp;lt;termref def="implementation-dependent"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A"&amp;gt;If the implementation supports data types from XSD 1.1 then the
 :             returned value will be an instance of &amp;lt;code&amp;gt;xs:dateTimeStamp&amp;lt;/code&amp;gt;. Otherwise, the only
 :             guarantees are that it will be an instance of &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; and will have a
 :             timezone component.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The returned &amp;lt;code&amp;gt;xs:dateTime&amp;lt;/code&amp;gt; will always have an associated timezone, which
 :             will always be the same as the implicit timezone in the dynamic context&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-current-dateTime
 :)
declare function fn:current-dateTime() as  xs:dateTimeStamp external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the current time.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="current-time" return-type="xs:time" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns &amp;lt;code&amp;gt;xs:time(fn:current-dateTime())&amp;lt;/code&amp;gt;. This is an &amp;lt;code&amp;gt;xs:time&amp;lt;/code&amp;gt;
 :             (with timezone) that is current at some time during the evaluation of a query or
 :             transformation in which &amp;lt;code&amp;gt;fn:current-time&amp;lt;/code&amp;gt; is executed.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"/&amp;gt;. The precise instant during the query or
 :             transformation represented by the value of &amp;lt;code&amp;gt;fn:current-time()&amp;lt;/code&amp;gt; is &amp;lt;termref def="implementation-dependent"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The returned time will always have an associated timezone, which will always be the same
 :             as the implicit timezone in the dynamic context&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-current-time
 :)
declare function fn:current-time() as  xs:time external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the result of atomizing a sequence, that is, replacing all nodes in the
 :             sequence by their typed values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="data" return-type="xs:anyAtomicType*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="data" return-type="xs:anyAtomicType*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="F"&amp;gt;If the argument is omitted, it defaults to the context item
 :                (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The behavior of the function if the argument is omitted is exactly
 :             the same as if the context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; The result of &amp;lt;code&amp;gt;fn:data&amp;lt;/code&amp;gt; is the sequence of atomic values produced by
 :             applying the following rules to each item in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the item is an atomic value, it is appended to the result sequence.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; If the item is a node, the typed value of the node is appended to the result
 :                   sequence. The typed value is a sequence of zero or more atomic values:
 :                   specifically, the result of the &amp;lt;code&amp;gt;dm:typed-value&amp;lt;/code&amp;gt; accessor as defined in
 :                      &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (See &amp;lt;xspecref spec="DM30" ref="dm-typed-value"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;type&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="TY" code="0012" type="type"/&amp;gt; if an item in the
 :             sequence &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a node that does not have a typed value. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;type&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="TY" code="0013" type="dynamic"/&amp;gt;
 :             if an item in the sequence &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a function item. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="I"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised 
 :             if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted
 :             and the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-data
 :)
declare function fn:data() as  xs:anyAtomicType* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the result of atomizing a sequence, that is, replacing all nodes in the
 :             sequence by their typed values.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="data" return-type="xs:anyAtomicType*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="data" return-type="xs:anyAtomicType*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="F"&amp;gt;If the argument is omitted, it defaults to the context item
 :                (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The behavior of the function if the argument is omitted is exactly
 :             the same as if the context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; The result of &amp;lt;code&amp;gt;fn:data&amp;lt;/code&amp;gt; is the sequence of atomic values produced by
 :             applying the following rules to each item in &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;&amp;lt;ulist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;If the item is an atomic value, it is appended to the result sequence.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt; If the item is a node, the typed value of the node is appended to the result
 :                   sequence. The typed value is a sequence of zero or more atomic values:
 :                   specifically, the result of the &amp;lt;code&amp;gt;dm:typed-value&amp;lt;/code&amp;gt; accessor as defined in
 :                      &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (See &amp;lt;xspecref spec="DM30" ref="dm-typed-value"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/ulist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;type&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="TY" code="0012" type="type"/&amp;gt; if an item in the
 :             sequence &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a node that does not have a typed value. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="B"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;type&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="TY" code="0013" type="dynamic"/&amp;gt;
 :             if an item in the sequence &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a function item. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="I"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised 
 :             if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted
 :             and the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-data
 :)
declare function fn:data($arg as item()*) as  xs:anyAtomicType* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of the default collation property from the static context.
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="default-collation" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		collations.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of the default collation property from the static context. Components
 :             of the static context are discussed in &amp;lt;xspecref spec="XP30" ref="id-xp-static-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The default collation property can never be absent. If it is not explicitly defined, a
 :             system defined default can be invoked. If this is not provided, the Unicode codepoint
 :             collation (&amp;lt;code&amp;gt;http://www.w3.org/2005/xpath-functions/collation/codepoint&amp;lt;/code&amp;gt;) is
 :             used. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-default-collation
 :)
declare function fn:default-collation() as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the URI of a resource where a document can be found, if available.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="document-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="document-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="F"&amp;gt;If the argument is omitted, it defaults to the context item
 :                (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The behavior of the function if the argument is omitted is exactly
 :             the same as if the context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a document node, the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the value of the &amp;lt;code&amp;gt;document-uri&amp;lt;/code&amp;gt; accessor
 :             applied to &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, as defined in &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (See
 :                &amp;lt;xspecref spec="DM30" ref="DocumentNodeAccessors"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-document-uri
 :)
declare function fn:document-uri() as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the URI of a resource where a document can be found, if available.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="document-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="document-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="F"&amp;gt;If the argument is omitted, it defaults to the context item
 :                (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The behavior of the function if the argument is omitted is exactly
 :             the same as if the context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a document node, the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the value of the &amp;lt;code&amp;gt;document-uri&amp;lt;/code&amp;gt; accessor
 :             applied to &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, as defined in &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (See
 :                &amp;lt;xspecref spec="DM30" ref="DocumentNodeAccessors"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-document-uri
 :)
declare function fn:document-uri($arg as node()?) as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Encodes reserved characters in a string that is intended to be used in the path
 :             segment of a URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="encode-for-uri" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="uri-part" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$uri-part&amp;lt;/code&amp;gt; is the empty sequence, the function returns the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function applies the URI escaping rules defined in section 2 of &amp;lt;bibref ref="rfc3986"/&amp;gt; to the &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; supplied as &amp;lt;code&amp;gt;$uri-part&amp;lt;/code&amp;gt;. The
 :             effect of the function is to escape reserved characters. Each such character in the
 :             string is replaced with its percent-encoded form as described in &amp;lt;bibref ref="rfc3986"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Since &amp;lt;bibref ref="rfc3986"/&amp;gt; recommends that, for consistency, URI producers and
 :             normalizers should use uppercase hexadecimal digits for all percent-encodings, this
 :             function must always generate hexadecimal values using the upper-case letters A-F.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;All characters are escaped except those identified as "unreserved" by &amp;lt;bibref ref="rfc3986"/&amp;gt;, that is the upper- and lower-case letters A-Z, the digits 0-9,
 :             HYPHEN-MINUS ("-"), LOW LINE ("_"), FULL STOP ".", and TILDE "~".&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function escapes URI delimiters and therefore cannot be used indiscriminately to
 :             encode "invalid" characters in a path segment.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is invertible but not idempotent. This is because a string containing a
 :             percent character will be modified by applying the function: for example
 :                &amp;lt;code&amp;gt;100%&amp;lt;/code&amp;gt; becomes &amp;lt;code&amp;gt;100%25&amp;lt;/code&amp;gt;, while &amp;lt;code&amp;gt;100%25&amp;lt;/code&amp;gt; becomes
 :                &amp;lt;code&amp;gt;100%2525&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-encode-for-uri
 :)
declare function fn:encode-for-uri($uri-part as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Escapes a URI in the same way that HTML user agents handle attribute values
 :             expected to contain URIs.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="escape-html-uri" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="uri" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$uri&amp;lt;/code&amp;gt; is the empty sequence, the function returns the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function escapes all &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; except
 :             printable characters of the US-ASCII coded character set, specifically the &amp;lt;termref def="codepoint"&amp;gt;codepoints&amp;lt;/termref&amp;gt; between 32 and 126 (decimal) inclusive. Each
 :             character in &amp;lt;code&amp;gt;$uri&amp;lt;/code&amp;gt; to be escaped is replaced by an escape sequence, which is
 :             formed by encoding the character as a sequence of octets in UTF-8, and then representing
 :             each of these octets in the form %HH, where HH is the hexadecimal representation of the
 :             octet. This function must always generate hexadecimal values using the upper-case
 :             letters A-F.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The behavior of this function corresponds to the recommended handling of non-ASCII
 :             characters in URI attribute values as described in &amp;lt;bibref ref="HTML40"/&amp;gt; Appendix
 :             B.2.1.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-escape-html-uri
 :)
declare function fn:escape-html-uri($uri as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the supplied node has one or more child nodes (of any kind).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="has-children" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="has-children" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="node" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;phrase diff="add" at="L"&amp;gt;Provided that the supplied argument &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; matches the expected 
 :          type &amp;lt;code&amp;gt;node()?&amp;lt;/code&amp;gt;, &amp;lt;/phrase&amp;gt;the result of the function call &amp;lt;code&amp;gt;fn:has-children($node)&amp;lt;/code&amp;gt; is defined to be
 :             the same as the result of the expression
 :             &amp;lt;code&amp;gt;fn:exists($node/child::node())&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-has-children
 :)
declare function fn:has-children() as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true if the supplied node has one or more child nodes (of any kind).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="has-children" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="has-children" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="node" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;phrase diff="add" at="L"&amp;gt;Provided that the supplied argument &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; matches the expected 
 :          type &amp;lt;code&amp;gt;node()?&amp;lt;/code&amp;gt;, &amp;lt;/phrase&amp;gt;the result of the function call &amp;lt;code&amp;gt;fn:has-children($node)&amp;lt;/code&amp;gt; is defined to be
 :             the same as the result of the expression
 :             &amp;lt;code&amp;gt;fn:exists($node/child::node())&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-has-children
 :)
declare function fn:has-children($node as node()?) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of the implicit timezone property from the dynamic context.
 :          &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="implicit-timezone" return-type="xs:dayTimeDuration" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		implicit timezone.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of the implicit timezone property from the dynamic context. Components
 :             of the dynamic context are discussed in &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-implicit-timezone
 :)
declare function fn:implicit-timezone() as  xs:dayTimeDuration external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns every node within the input sequence that is not an ancestor of another member
 :             of the input sequence; the nodes are returned in document order with duplicates
 :             eliminated.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="innermost" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="nodes" type="node()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of the function call &amp;lt;code&amp;gt;fn:innermost($nodes)&amp;lt;/code&amp;gt; is defined to be
 :             equivalent to the result of the expression &amp;lt;code&amp;gt;$nodes except
 :                $nodes/ancestor::node()&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;That is, the function takes as input a sequence of nodes, and returns every node within
 :             the sequence that is not an ancestor of another node within the sequence; the nodes are
 :             returned in document order with duplicates eliminated.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the source document contains nested sections represented by &amp;lt;code&amp;gt;div&amp;lt;/code&amp;gt;
 :                elements, the expression &amp;lt;code&amp;gt;innermost(//div)&amp;lt;/code&amp;gt; returns those &amp;lt;code&amp;gt;div&amp;lt;/code&amp;gt;
 :                elements that do not contain further &amp;lt;code&amp;gt;div&amp;lt;/code&amp;gt; elements.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-innermost
 :)
declare function fn:innermost($nodes as node()*) as  node()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Converts a string containing an IRI into a URI according to the rules of
 :                &amp;lt;bibref ref="rfc3987"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="iri-to-uri" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="iri" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$iri&amp;lt;/code&amp;gt; is the empty sequence, the function returns the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function converts the value of &amp;lt;code&amp;gt;$iri&amp;lt;/code&amp;gt; into a URI according to
 :             the rules given in Section 3.1 of &amp;lt;bibref ref="rfc3987"/&amp;gt; by percent-encoding characters
 :             that are allowed in an IRI but not in a URI. If &amp;lt;code&amp;gt;$iri&amp;lt;/code&amp;gt; contains a character
 :             that is invalid in an IRI, such as the space character (see note below), the invalid
 :             character is replaced by its percent-encoded form as described in &amp;lt;bibref ref="rfc3986"/&amp;gt; before the conversion is performed.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Since &amp;lt;bibref ref="rfc3986"/&amp;gt; recommends that, for consistency, URI producers and
 :             normalizers should use uppercase hexadecimal digits for all percent-encodings, this
 :             function must always generate hexadecimal values using the upper-case letters A-F.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function is idempotent but not invertible. Both the inputs &amp;lt;code&amp;gt;My Documents&amp;lt;/code&amp;gt;
 :             and &amp;lt;code&amp;gt;My%20Documents&amp;lt;/code&amp;gt; will be converted to the output
 :                &amp;lt;code&amp;gt;My%20Documents&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function does not check whether &amp;lt;code&amp;gt;$iri&amp;lt;/code&amp;gt; is a valid IRI. It treats it as
 :             an &amp;lt;termref def="string"&amp;gt;string&amp;lt;/termref&amp;gt; and operates on the &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; in the string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; The following printable ASCII characters are invalid in an IRI: "&amp;amp;lt;", "&amp;amp;gt;", &amp;lt;quote&amp;gt;
 :                " &amp;lt;/quote&amp;gt; (double quote), space, "{", "}", "|", "\", "^", and "`". Since these
 :             characters should not appear in an IRI, if they do appear in &amp;lt;code&amp;gt;$iri&amp;lt;/code&amp;gt; they will
 :             be percent-encoded. In addition, characters outside the range x20-&amp;lt;phrase diff="chg" at="A-E8"&amp;gt;x7E&amp;lt;/phrase&amp;gt; will be percent-encoded because they are invalid in a URI. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt; Since this function does not escape the PERCENT SIGN "%" and this character is not
 :             allowed in data within a URI, users wishing to convert character strings (such as file
 :             names) that include "%" to a URI should manually escape "%" by replacing it with "%25".
 :          &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-iri-to-uri
 :)
declare function fn:iri-to-uri($iri as xs:string?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function tests whether the language of &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context
 :             item if the second argument is omitted, as specified by &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attributes
 :             is the same as, or is a sublanguage of, the language specified by
 :             &amp;lt;code&amp;gt;$testlang&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="lang" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="testlang" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="lang" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="testlang" type="xs:string?"/&amp;gt;&amp;lt;arg name="node" type="node()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The behavior of the function if the second argument is omitted is exactly the same as if
 :             the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) had been passed as the second argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The language of the argument &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context item if the second
 :             argument is omitted, is determined by the value of the &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute
 :             on the node, or, if the node has no such attribute, by the value of the
 :                &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute on the nearest ancestor of the node that has an
 :                &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute. If there is no such ancestor, then the function
 :             returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$testlang&amp;lt;/code&amp;gt; is the empty sequence it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The relevant &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute is determined by the value of the XPath
 :             expression:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;(ancestor-or-self::*/@xml:lang)[last()]&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If this expression returns an empty sequence, the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if and only if, based on a caseless
 :             default match as specified in section 3.13 of &amp;lt;bibref ref="Unicode"/&amp;gt;, either:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="chg" at="A-E16"&amp;gt;
 :                   &amp;lt;code&amp;gt;$testlang&amp;lt;/code&amp;gt; is equal to the string-value of the relevant
 :                      &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute, or&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="chg" at="A-E16"&amp;gt;
 :                   &amp;lt;code&amp;gt;$testlang&amp;lt;/code&amp;gt; is equal to some substring of the string-value of the
 :                   relevant &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute that starts at the start of the
 :                   string-value and ends immediately before a hyphen, "-" (the character "-" is
 :                   HYPHEN-MINUS, #x002D).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-lang
 :)
declare function fn:lang($testlang as xs:string?) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function tests whether the language of &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context
 :             item if the second argument is omitted, as specified by &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attributes
 :             is the same as, or is a sublanguage of, the language specified by
 :             &amp;lt;code&amp;gt;$testlang&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="lang" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="testlang" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="lang" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="testlang" type="xs:string?"/&amp;gt;&amp;lt;arg name="node" type="node()"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The behavior of the function if the second argument is omitted is exactly the same as if
 :             the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) had been passed as the second argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The language of the argument &amp;lt;code&amp;gt;$node&amp;lt;/code&amp;gt;, or the context item if the second
 :             argument is omitted, is determined by the value of the &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute
 :             on the node, or, if the node has no such attribute, by the value of the
 :                &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute on the nearest ancestor of the node that has an
 :                &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute. If there is no such ancestor, then the function
 :             returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$testlang&amp;lt;/code&amp;gt; is the empty sequence it is interpreted as the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The relevant &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute is determined by the value of the XPath
 :             expression:&amp;lt;/p&amp;gt;&amp;lt;eg xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xml:space="preserve"&amp;gt;(ancestor-or-self::*/@xml:lang)[last()]&amp;lt;/eg&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If this expression returns an empty sequence, the function returns &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if and only if, based on a caseless
 :             default match as specified in section 3.13 of &amp;lt;bibref ref="Unicode"/&amp;gt;, either:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="chg" at="A-E16"&amp;gt;
 :                   &amp;lt;code&amp;gt;$testlang&amp;lt;/code&amp;gt; is equal to the string-value of the relevant
 :                      &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute, or&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p diff="chg" at="A-E16"&amp;gt;
 :                   &amp;lt;code&amp;gt;$testlang&amp;lt;/code&amp;gt; is equal to some substring of the string-value of the
 :                   relevant &amp;lt;code&amp;gt;xml:lang&amp;lt;/code&amp;gt; attribute that starts at the start of the
 :                   string-value and ends immediately before a hyphen, "-" (the character "-" is
 :                   HYPHEN-MINUS, #x002D).&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-lang
 :)
declare function fn:lang($testlang as xs:string?,  $node as node()) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the context size from the dynamic context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="last" return-type="xs:integer" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the context size from the dynamic context. (See &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.)&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="type"/&amp;gt; if the
 :             context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-last
 :)
declare function fn:last() as  xs:integer external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the local part of the name of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; as an
 :                &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; that is either the zero-length string, or has the lexical form
 :             of an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="local-name" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="local-name" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is supplied and is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the node identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has no name (that is, if it is a document
 :             node, a comment, a text node, or a namespace node having no name), the function returns
 :             the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the local part of the expanded-QName of the node
 :             identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, as determined by the &amp;lt;code&amp;gt;dm:node-name&amp;lt;/code&amp;gt; accessor
 :             defined in &amp;lt;xspecref spec="DM30" ref="dm-node-name"/&amp;gt;). This will be an
 :                &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; whose lexical form is an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-local-name
 :)
declare function fn:local-name() as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the local part of the name of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; as an
 :                &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; that is either the zero-length string, or has the lexical form
 :             of an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="local-name" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="local-name" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is supplied and is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the node identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has no name (that is, if it is a document
 :             node, a comment, a text node, or a namespace node having no name), the function returns
 :             the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the local part of the expanded-QName of the node
 :             identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, as determined by the &amp;lt;code&amp;gt;dm:node-name&amp;lt;/code&amp;gt; accessor
 :             defined in &amp;lt;xspecref spec="DM30" ref="dm-node-name"/&amp;gt;). This will be an
 :                &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; whose lexical form is an &amp;lt;code&amp;gt;xs:NCName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-local-name
 :)
declare function fn:local-name($arg as node()?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the name of a node, as an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; that is either the
 :             zero-length string, or has the lexical form of an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="name" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="name" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is supplied and is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the node identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has no name (that is, if it is a document
 :             node, a comment, a text node, or a namespace node having no name), the function returns
 :             the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the value of the expression
 :                &amp;lt;code&amp;gt;fn:string(fn:node-name($arg))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-name
 :)
declare function fn:name() as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the name of a node, as an &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt; that is either the
 :             zero-length string, or has the lexical form of an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="name" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="name" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is supplied and is the empty sequence, the function returns the
 :             zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the node identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; has no name (that is, if it is a document
 :             node, a comment, a text node, or a namespace node having no name), the function returns
 :             the zero-length string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the value of the expression
 :                &amp;lt;code&amp;gt;fn:string(fn:node-name($arg))&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-name
 :)
declare function fn:name($arg as node()?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E15"&amp;gt;Returns the namespace URI part of the name of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, as an &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="namespace-uri" return-type="xs:anyURI" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="namespace-uri" return-type="xs:anyURI" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context node (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the node identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is neither an element nor an attribute node,
 :             or if it is an element or attribute node whose expanded-QName (as determined by the
 :                &amp;lt;code&amp;gt;dm:node-name&amp;lt;/code&amp;gt; accessor in the &amp;lt;xspecref spec="DM30" ref="dm-node-name"/&amp;gt;)
 :             is in no namespace, then the function returns the zero-length &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;
 :             value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the result will be the namespace URI part of the expanded-QName of the node
 :             identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, as determined by the &amp;lt;code&amp;gt;dm:node-name&amp;lt;/code&amp;gt; accessor
 :             defined in &amp;lt;xspecref spec="DM30" ref="dm-node-name"/&amp;gt;), returned as an
 :                &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-namespace-uri
 :)
declare function fn:namespace-uri() as  xs:anyURI external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="A-E15"&amp;gt;Returns the namespace URI part of the name of
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, as an &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="namespace-uri" return-type="xs:anyURI" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="namespace-uri" return-type="xs:anyURI" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context node (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the node identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is neither an element nor an attribute node,
 :             or if it is an element or attribute node whose expanded-QName (as determined by the
 :                &amp;lt;code&amp;gt;dm:node-name&amp;lt;/code&amp;gt; accessor in the &amp;lt;xspecref spec="DM30" ref="dm-node-name"/&amp;gt;)
 :             is in no namespace, then the function returns the zero-length &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;
 :             value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the result will be the namespace URI part of the expanded-QName of the node
 :             identified by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt;, as determined by the &amp;lt;code&amp;gt;dm:node-name&amp;lt;/code&amp;gt; accessor
 :             defined in &amp;lt;xspecref spec="DM30" ref="dm-node-name"/&amp;gt;), returned as an
 :                &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-namespace-uri
 :)
declare function fn:namespace-uri($arg as node()?) as  xs:anyURI external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true for an element that is &amp;lt;term&amp;gt;nilled&amp;lt;/term&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="nilled" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="nilled" return-type="xs:boolean?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise the function returns the result of the &amp;lt;code&amp;gt;dm:nilled&amp;lt;/code&amp;gt; accessor as
 :             defined in &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (see &amp;lt;xspecref spec="DM30" ref="dm-nilled"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="I"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-nilled
 :)
declare function fn:nilled() as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns true for an element that is &amp;lt;term&amp;gt;nilled&amp;lt;/term&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="nilled" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="nilled" return-type="xs:boolean?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the argument is omitted, it defaults to the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The
 :             behavior of the function if the argument is omitted is exactly the same as if the
 :             context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise the function returns the result of the &amp;lt;code&amp;gt;dm:nilled&amp;lt;/code&amp;gt; accessor as
 :             defined in &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (see &amp;lt;xspecref spec="DM30" ref="dm-nilled"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="I"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-nilled
 :)
declare function fn:nilled($arg as node()?) as  xs:boolean? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the name of a node, as an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="node-name" return-type="xs:QName?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="node-name" return-type="xs:QName?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="F"&amp;gt;If the argument is omitted, it defaults to the context item
 :                (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The behavior of the function if the argument is omitted is exactly
 :             the same as if the context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the result of the &amp;lt;code&amp;gt;dm:node-name&amp;lt;/code&amp;gt; accessor as
 :             defined in &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (see &amp;lt;xspecref spec="DM30" ref="dm-node-name"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="I"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-node-name
 :)
declare function fn:node-name() as  xs:QName? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the name of a node, as an &amp;lt;code&amp;gt;xs:QName&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="node-name" return-type="xs:QName?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="node-name" return-type="xs:QName?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="F"&amp;gt;If the argument is omitted, it defaults to the context item
 :                (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). The behavior of the function if the argument is omitted is exactly
 :             the same as if the context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function returns the result of the &amp;lt;code&amp;gt;dm:node-name&amp;lt;/code&amp;gt; accessor as
 :             defined in &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (see &amp;lt;xspecref spec="DM30" ref="dm-node-name"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="I"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-node-name
 :)
declare function fn:node-name($arg as node()?) as  xs:QName? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value indicated by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; or, if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is
 :             not specified, the context item after atomization, converted to an
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="number" return-type="xs:double" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="number" return-type="xs:double" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Calling the zero-argument version of the function is defined to give the same result as
 :             calling the single-argument version with the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). That is,
 :                &amp;lt;code&amp;gt;fn:number()&amp;lt;/code&amp;gt; is equivalent to &amp;lt;code&amp;gt;fn:number(.)&amp;lt;/code&amp;gt;, as
 :          defined by the rules that follow.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence or if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; &amp;lt;phrase diff="del" at="L"&amp;gt;or the context item&amp;lt;/phrase&amp;gt;
 :             cannot be converted to an &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, the &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; &amp;lt;phrase diff="del" at="L"&amp;gt;, or the context item after atomization,&amp;lt;/phrase&amp;gt; is converted to an
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; following the rules of &amp;lt;specref ref="casting-to-double"/&amp;gt;. If
 :             the conversion to &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; fails, the &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted and the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;As a consequence of the rules given above, a type error occurs if the context
 :          item cannot be atomized, or if the result of atomizing the context item is a sequence containing
 :          more than one atomic value.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-number
 :)
declare function fn:number() as  xs:double external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value indicated by &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; or, if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is
 :             not specified, the context item after atomization, converted to an
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="number" return-type="xs:double" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="number" return-type="xs:double" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:anyAtomicType?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Calling the zero-argument version of the function is defined to give the same result as
 :             calling the single-argument version with the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;). That is,
 :                &amp;lt;code&amp;gt;fn:number()&amp;lt;/code&amp;gt; is equivalent to &amp;lt;code&amp;gt;fn:number(.)&amp;lt;/code&amp;gt;, as
 :          defined by the rules that follow.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence or if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; &amp;lt;phrase diff="del" at="L"&amp;gt;or the context item&amp;lt;/phrase&amp;gt;
 :             cannot be converted to an &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt;, the &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; &amp;lt;phrase diff="del" at="L"&amp;gt;, or the context item after atomization,&amp;lt;/phrase&amp;gt; is converted to an
 :                &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; following the rules of &amp;lt;specref ref="casting-to-double"/&amp;gt;. If
 :             the conversion to &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; fails, the &amp;lt;code&amp;gt;xs:double&amp;lt;/code&amp;gt; value
 :                &amp;lt;code&amp;gt;NaN&amp;lt;/code&amp;gt; is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted and the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;As a consequence of the rules given above, a type error occurs if the context
 :          item cannot be atomized, or if the result of atomizing the context item is a sequence containing
 :          more than one atomic value.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-number
 :)
declare function fn:number($arg as xs:anyAtomicType?) as  xs:double external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns every node within the input sequence that has no ancestor that is itself a
 :             member of the input sequence; the nodes are returned in document order with duplicates
 :             eliminated.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="outermost" return-type="node()*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="nodes" type="node()*"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The effect of the function call &amp;lt;code&amp;gt;fn:outermost($nodes)&amp;lt;/code&amp;gt; is defined to be
 :             equivalent to the result of the expression &amp;lt;code diff="chg" at="L"&amp;gt;$nodes[not(ancestor::node() intersect
 :                $nodes)]/.&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;That is, the function takes as input a sequence of nodes, and returns every node within
 :             the sequence that &amp;lt;phrase diff="chg" at="J"&amp;gt;does not have another node within the sequence as an ancestor&amp;lt;/phrase&amp;gt;; the nodes are
 :             returned in document order with duplicates eliminated.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The formulation &amp;lt;code&amp;gt;$nodes except $nodes/descendant::node()&amp;lt;/code&amp;gt; might appear to be
 :             simpler, but does not correctly account for attribute nodes, as these are not
 :             descendants of their parent element.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The motivation for the function was based on XSLT streaming use cases. There are cases
 :             where the &amp;lt;bibref ref="xslt-30"/&amp;gt; streaming rules allow the construct
 :                &amp;lt;code&amp;gt;outermost(//section)&amp;lt;/code&amp;gt; but do not allow &amp;lt;code&amp;gt;//section&amp;lt;/code&amp;gt;; the
 :             function can therefore be useful in cases where it is known that sections will not be
 :             nested, as well as cases where the application actually wishes to process all sections
 :             except those that are nested within another.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-outermost
 :)
declare function fn:outermost($nodes as node()*) as  node()* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the context position from the dynamic context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="position" return-type="xs:integer" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the context position from the dynamic context. (See &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.)&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="type"/&amp;gt; if the
 :             context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-position
 :)
declare function fn:position() as  xs:integer external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Resolves a relative IRI reference against an absolute IRI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="resolve-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="relative" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="resolve-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="relative" type="xs:string?"/&amp;gt;&amp;lt;arg name="base" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the second argument is absent, the effect is the same as calling the two-argument
 :             function with the value of &amp;lt;code&amp;gt;fn:static-base-uri()&amp;lt;/code&amp;gt; as the second argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function is defined to operate on IRI references as defined in &amp;lt;bibref ref="rfc3987"/&amp;gt;, and the implementation &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; permit all arguments that are valid
 :             according to that specification. In addition, the implementation &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt;
 :             accept some or all strings that conform to the rules for (absolute or relative) Legacy
 :             Extended IRI references as defined in &amp;lt;bibref ref="LEIRI"/&amp;gt;. For the purposes of this
 :             section, the terms IRI and IRI reference include these extensions, insofar as the
 :             implementation chooses to support them.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt; is an absolute IRI (as defined above), then it is returned
 :             unchanged.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function resolves the relative IRI reference &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt;
 :             against the base IRI &amp;lt;code&amp;gt;$base&amp;lt;/code&amp;gt; using the algorithm defined in &amp;lt;bibref ref="rfc3986"/&amp;gt;, adapted by treating any &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt;
 :             that would not be valid in an RFC3986 URI or relative reference in the same way that
 :             RFC3986 treats unreserved characters. No percent-encoding takes place.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The first form of this function resolves &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt; against the value of the
 :             base-uri property from the static context. A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="NS" code="0005"/&amp;gt; if the base-uri property is not initialized in the static context. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0002"/&amp;gt; if &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt; is not a
 :             valid IRI according to the rules of RFC3987, extended with an implementation-defined
 :             subset of the extensions permitted in LEIRI, or if it is not a suitable relative
 :             reference to use as input to the RFC3986 resolution algorithm extended to handle
 :             additional unreserved characters. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0002"/&amp;gt; if &amp;lt;code&amp;gt;$base&amp;lt;/code&amp;gt; is not a
 :             valid IRI according to the rules of RFC3987, extended with an implementation-defined
 :             subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as
 :             input to the chosen resolution algorithm (for example, if it is a relative IRI
 :             reference, if it is a non-hierarchic URI, or if it contains a fragment identifier). &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0009"/&amp;gt; if the chosen resolution algorithm
 :             fails for any other reason. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-resolve-uri
 :)
declare function fn:resolve-uri($relative as xs:string?) as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Resolves a relative IRI reference against an absolute IRI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="resolve-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="relative" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="resolve-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="relative" type="xs:string?"/&amp;gt;&amp;lt;arg name="base" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The two-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the second argument is absent, the effect is the same as calling the two-argument
 :             function with the value of &amp;lt;code&amp;gt;fn:static-base-uri()&amp;lt;/code&amp;gt; as the second argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function is defined to operate on IRI references as defined in &amp;lt;bibref ref="rfc3987"/&amp;gt;, and the implementation &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; permit all arguments that are valid
 :             according to that specification. In addition, the implementation &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt;
 :             accept some or all strings that conform to the rules for (absolute or relative) Legacy
 :             Extended IRI references as defined in &amp;lt;bibref ref="LEIRI"/&amp;gt;. For the purposes of this
 :             section, the terms IRI and IRI reference include these extensions, insofar as the
 :             implementation chooses to support them.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt; is the empty sequence, the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt; is an absolute IRI (as defined above), then it is returned
 :             unchanged.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Otherwise, the function resolves the relative IRI reference &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt;
 :             against the base IRI &amp;lt;code&amp;gt;$base&amp;lt;/code&amp;gt; using the algorithm defined in &amp;lt;bibref ref="rfc3986"/&amp;gt;, adapted by treating any &amp;lt;termref def="character"&amp;gt;character&amp;lt;/termref&amp;gt;
 :             that would not be valid in an RFC3986 URI or relative reference in the same way that
 :             RFC3986 treats unreserved characters. No percent-encoding takes place.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The first form of this function resolves &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt; against the value of the
 :             base-uri property from the static context. A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="NS" code="0005"/&amp;gt; if the base-uri property is not initialized in the static context. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0002"/&amp;gt; if &amp;lt;code&amp;gt;$relative&amp;lt;/code&amp;gt; is not a
 :             valid IRI according to the rules of RFC3987, extended with an implementation-defined
 :             subset of the extensions permitted in LEIRI, or if it is not a suitable relative
 :             reference to use as input to the RFC3986 resolution algorithm extended to handle
 :             additional unreserved characters. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0002"/&amp;gt; if &amp;lt;code&amp;gt;$base&amp;lt;/code&amp;gt; is not a
 :             valid IRI according to the rules of RFC3987, extended with an implementation-defined
 :             subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as
 :             input to the chosen resolution algorithm (for example, if it is a relative IRI
 :             reference, if it is a non-hierarchic URI, or if it contains a fragment identifier). &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="RG" code="0009"/&amp;gt; if the chosen resolution algorithm
 :             fails for any other reason. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-resolve-uri
 :)
declare function fn:resolve-uri($relative as xs:string?,  $base as xs:string) as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the root of the tree to which &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; belongs. This will
 :             usually, but not necessarily, be a document node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="root" return-type="node()" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="root" return-type="node()?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the function is called without an argument, the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) is used
 :             as the default argument. The behavior of the function if the argument is omitted is
 :             exactly the same as if the context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the value of the expression
 :                &amp;lt;code&amp;gt;($arg/ancestor-or-self::node())[1]&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-root
 :)
declare function fn:root() as  node() external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the root of the tree to which &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; belongs. This will
 :             usually, but not necessarily, be a document node.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="root" return-type="node()" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="root" return-type="node()?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="node()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the function is called without an argument, the context item (&amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt;) is used
 :             as the default argument. The behavior of the function if the argument is omitted is
 :             exactly the same as if the context item had been passed as the argument.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the value of the expression
 :                &amp;lt;code&amp;gt;($arg/ancestor-or-self::node())[1]&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The following errors may be raised when &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is omitted:&amp;lt;/p&amp;gt;&amp;lt;ul xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context
 :                item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;, &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic error&amp;lt;/phrase&amp;gt;
 :                &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="dynamic"/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;If the context item is not a
 :                node, &amp;lt;phrase diff="add" at="M"&amp;gt;type error&amp;lt;/phrase&amp;gt; &amp;lt;xerrorref spec="XP" class="TY" code="0004" type="type"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-root
 :)
declare function fn:root($arg as node()?) as  node()? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function returns the value of the Static Base URI property from the static context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="static-base-uri" return-type="xs:anyURI?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns the value of the Static Base URI property from the static context. If the
 :             property is absent, the empty sequence is returned.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Components of the static context are discussed in &amp;lt;xspecref spec="XP30" ref="static_context"/&amp;gt; .&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;XQuery 3.0 and XSLT 3.0 give an implementation freedom to use different base URIs during the
 :          static analysis phase and the dynamic evaluation phase, that is, for compile-time and run-time resources respectively.
 :          In this situation, the &amp;lt;code&amp;gt;fn:static-base-uri&amp;lt;/code&amp;gt; function should return a URI suitable for locating resources needed
 :          during dynamic evaluation.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-static-base-uri
 :)
declare function fn:static-base-uri() as  xs:anyURI? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; represented as an
 :             &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In the zero-argument version of the function, &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; defaults to the context
 :             item. That is, calling &amp;lt;code&amp;gt;fn:string()&amp;lt;/code&amp;gt; is equivalent to calling
 :                &amp;lt;code&amp;gt;fn:string(.)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a node, the function returns the string-value of the node, as
 :             obtained using the &amp;lt;code&amp;gt;dm:string-value&amp;lt;/code&amp;gt; accessor defined in &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (see &amp;lt;xspecref spec="DM30" ref="dm-string-value"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an atomic value, the function returns the result of the
 :             expression &amp;lt;code&amp;gt;$arg cast as xs:string&amp;lt;/code&amp;gt; (see &amp;lt;specref ref="casting"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="type"/&amp;gt; by the
 :             zero-argument version of the function if the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;type&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="TY" code="0014" type="type"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a function item. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-string
 :)
declare function fn:string() as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; represented as an
 :             &amp;lt;code&amp;gt;xs:string&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="string" return-type="xs:string" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="item()?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-dependent"&amp;gt;focus-dependent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The one-argument form of this function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-independent"&amp;gt;context-independent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In the zero-argument version of the function, &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; defaults to the context
 :             item. That is, calling &amp;lt;code&amp;gt;fn:string()&amp;lt;/code&amp;gt; is equivalent to calling
 :                &amp;lt;code&amp;gt;fn:string(.)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function returns the zero-length
 :             string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a node, the function returns the string-value of the node, as
 :             obtained using the &amp;lt;code&amp;gt;dm:string-value&amp;lt;/code&amp;gt; accessor defined in &amp;lt;bibref ref="xpath-datamodel-30"/&amp;gt; (see &amp;lt;xspecref spec="DM30" ref="dm-string-value"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is an atomic value, the function returns the result of the
 :             expression &amp;lt;code&amp;gt;$arg cast as xs:string&amp;lt;/code&amp;gt; (see &amp;lt;specref ref="casting"/&amp;gt;).&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="M"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;xerrorref spec="XP" class="DY" code="0002" type="type"/&amp;gt; by the
 :             zero-argument version of the function if the context item is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;type&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="TY" code="0014" type="type"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a function item. &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-string
 :)
declare function fn:string($arg as item()?) as  xs:string external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a list of environment variable names that are suitable for passing to
 :                &amp;lt;code&amp;gt;fn:environment-variable&amp;lt;/code&amp;gt;, as a (possibly empty) sequence of strings.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="available-environment-variables" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		environment variables.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a sequence of strings, being the names of the environment variables
 :             in the dynamic context in some &amp;lt;termref def="implementation-dependent"&amp;gt;implementation-dependent&amp;lt;/termref&amp;gt; order.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;: that is, the
 :             set of available environment variables does not vary during evaluation.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The function returns a list of strings, containing no duplicates.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;It is intended that the strings in this list should be suitable for passing to
 :                &amp;lt;code&amp;gt;fn:environment-variable&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;See also the note on security under the definition of the
 :                &amp;lt;code&amp;gt;fn:environment-variable&amp;lt;/code&amp;gt; function. If access to environment variables has
 :             been disabled, &amp;lt;code&amp;gt;fn:available-environment-variables&amp;lt;/code&amp;gt; always returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-available-environment-variables
 :)
declare function fn:available-environment-variables() as  xs:string* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns the value of a system environment variable, if it exists.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="environment-variable" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="name" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		environment variables.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The set of available &amp;lt;xtermref spec="XP30" ref="dt-environment-variables"&amp;gt;environment variables&amp;lt;/xtermref&amp;gt; 
 :             is a set of (name, value) pairs forming part
 :             of the dynamic context, in which the name is unique within the set of pairs. The name
 :             and value are arbitrary strings.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the &amp;lt;code&amp;gt;$name&amp;lt;/code&amp;gt; argument matches the name of one of these pairs, the function
 :             returns the corresponding value.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If there is no environment variable with a matching name, the function returns the empty
 :             sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The collation used for matching names is &amp;lt;termref def="implementation-defined"/&amp;gt;, but
 :             must be the same as the collation used to ensure that the names of all environment
 :             variables are unique.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="I"&amp;gt;The function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, 
 :             which means that if it is called several times
 :          within the same &amp;lt;termref def="dt-execution-scope"&amp;gt;execution scope&amp;lt;/termref&amp;gt;, with the same arguments,
 :             it must return the same result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;On many platforms, the term "environment variable" has a natural meaning in terms of
 :             facilities provided by the operating system. This interpretation of the concept does not
 :             exclude other interpretations, such as a mapping to a set of configuration parameters in
 :             a database system.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Environment variable names are usually case sensitive. Names are usually of the form
 :                &amp;lt;code&amp;gt;(letter|_) (letter|_|digit)*&amp;lt;/code&amp;gt;, but this varies by platform.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;On some platforms, there may sometimes be multiple environment variables with the same name;
 :             in this case, it is implementation-dependent as to which is returned; see for example
 :                &amp;lt;bibref ref="POSIX.1-2008"/&amp;gt; (Chapter 8, Environment Variables).
 :             Implementations &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; use prefixes or other naming conventions
 :             to disambiguate the names.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The requirement to ensure that the function is deterministic means in practice that
 :          the implementation must make a snapshot of the environment variables at some time
 :          during execution, and return values obtained from this snapshot, rather than using
 :          live values that are subject to change at any time.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Operating system environment variables may be associated with a particular process,
 :          while queries and stylesheets may execute across multiple processes (or multiple machines).
 :          In such circumstances implementations &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; choose to provide access
 :          to the environment variables associated with the process in which the query or stylesheet
 :          processing was initiated.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Security advice: Queries from untrusted sources should not be permitted unrestricted
 :             access to environment variables. For example, the name of the account under which the
 :             query is running may be useful information to a would-be intruder. An implementation may
 :             therefore choose to restrict access to the environment, or may provide a facility to
 :             make &amp;lt;code&amp;gt;fn:environment-variable&amp;lt;/code&amp;gt; always return the empty sequence.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-environment-variable
 :)
declare function fn:environment-variable($arg as xs:string) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;fn:unparsed-text&amp;lt;/code&amp;gt; function reads an external resource (for example, a
 :             file) and returns &amp;lt;phrase diff="chg" at="L"&amp;gt;a string representation of the resource&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt; argument &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be a string in the form of a URI
 :             reference, which &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; contain no fragment identifier, and
 :                &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; identify a resource 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;for which a string representation is available&amp;lt;/phrase&amp;gt;. If the URI is a
 :             relative URI reference, then it is resolved relative to the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;Static Base URI property from the static context&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;The mapping of URIs to the string representation of a resource is the mapping defined
 :             in the &amp;lt;xtermref spec="XP30" ref="dt-available-text-resources"&amp;gt;available text resources&amp;lt;/xtermref&amp;gt;
 :          component of the dynamic context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of the &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt; argument is an empty sequence, the function
 :             returns an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument, if present, is the name of an encoding. The values
 :             for this attribute follow the same rules as for the &amp;lt;code&amp;gt;encoding&amp;lt;/code&amp;gt; attribute in
 :             an XML declaration. The only values which every &amp;lt;termref def="implementation"&amp;gt;implementation&amp;lt;/termref&amp;gt; is &amp;lt;rfc2119&amp;gt;required&amp;lt;/rfc2119&amp;gt; to recognize are
 :                &amp;lt;code&amp;gt;utf-8&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;utf-16&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The encoding of the external resource is determined as follows:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;external encoding information is used if available, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;if the media type of the resource is &amp;lt;code&amp;gt;text/xml&amp;lt;/code&amp;gt; or
 :                      &amp;lt;code&amp;gt;application/xml&amp;lt;/code&amp;gt; (see &amp;lt;bibref ref="rfc2376"/&amp;gt;), or if it matches
 :                   the conventions &amp;lt;code&amp;gt;text/*+xml&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;application/*+xml&amp;lt;/code&amp;gt; (see
 :                      &amp;lt;bibref ref="rfc3023"/&amp;gt; and/or its successors), then the encoding is recognized
 :                   as specified in &amp;lt;bibref ref="REC-xml"/&amp;gt;, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the value of the &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument is used if present, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the processor &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; use &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; heuristics to determine the likely encoding,
 :                   otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;UTF-8 is assumed.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function is a string containing the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the resource retrieved
 :             using the URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1170"/&amp;gt; if &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt;
 :             contains a fragment identifier, or if it cannot be used to retrieve the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of a resource.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1190"/&amp;gt; &amp;lt;phrase diff="add" at="L"&amp;gt;if the value 
 :             of the &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument is not a valid encoding name, &amp;lt;/phrase&amp;gt;if the &amp;lt;termref def="dt-processor"&amp;gt;processor&amp;lt;/termref&amp;gt; does not support the specified encoding,
 :             if the &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the retrieved
 :             resource contains octets that cannot be decoded into Unicode &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; using the specified encoding, or if the resulting characters
 :             are not permitted XML characters.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1200"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; is absent and the &amp;lt;termref def="dt-processor"&amp;gt;processor&amp;lt;/termref&amp;gt; cannot infer the encoding using external information and the
 :             encoding is not UTF-8.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text
 :)
declare function fn:unparsed-text($href as xs:string?) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;fn:unparsed-text&amp;lt;/code&amp;gt; function reads an external resource (for example, a
 :             file) and returns &amp;lt;phrase diff="chg" at="L"&amp;gt;a string representation of the resource&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text" return-type="xs:string?" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt; argument &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be a string in the form of a URI
 :             reference, which &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; contain no fragment identifier, and
 :                &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; identify a resource 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;for which a string representation is available&amp;lt;/phrase&amp;gt;. If the URI is a
 :             relative URI reference, then it is resolved relative to the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;Static Base URI property from the static context&amp;lt;/phrase&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="add" at="L"&amp;gt;The mapping of URIs to the string representation of a resource is the mapping defined
 :             in the &amp;lt;xtermref spec="XP30" ref="dt-available-text-resources"&amp;gt;available text resources&amp;lt;/xtermref&amp;gt;
 :          component of the dynamic context.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of the &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt; argument is an empty sequence, the function
 :             returns an empty sequence.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument, if present, is the name of an encoding. The values
 :             for this attribute follow the same rules as for the &amp;lt;code&amp;gt;encoding&amp;lt;/code&amp;gt; attribute in
 :             an XML declaration. The only values which every &amp;lt;termref def="implementation"&amp;gt;implementation&amp;lt;/termref&amp;gt; is &amp;lt;rfc2119&amp;gt;required&amp;lt;/rfc2119&amp;gt; to recognize are
 :                &amp;lt;code&amp;gt;utf-8&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;utf-16&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The encoding of the external resource is determined as follows:&amp;lt;/p&amp;gt;&amp;lt;olist xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;external encoding information is used if available, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;if the media type of the resource is &amp;lt;code&amp;gt;text/xml&amp;lt;/code&amp;gt; or
 :                      &amp;lt;code&amp;gt;application/xml&amp;lt;/code&amp;gt; (see &amp;lt;bibref ref="rfc2376"/&amp;gt;), or if it matches
 :                   the conventions &amp;lt;code&amp;gt;text/*+xml&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;application/*+xml&amp;lt;/code&amp;gt; (see
 :                      &amp;lt;bibref ref="rfc3023"/&amp;gt; and/or its successors), then the encoding is recognized
 :                   as specified in &amp;lt;bibref ref="REC-xml"/&amp;gt;, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the value of the &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument is used if present, otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;the processor &amp;lt;rfc2119&amp;gt;may&amp;lt;/rfc2119&amp;gt; use &amp;lt;termref def="implementation-defined"&amp;gt;implementation-defined&amp;lt;/termref&amp;gt; heuristics to determine the likely encoding,
 :                   otherwise&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;&amp;lt;p&amp;gt;UTF-8 is assumed.&amp;lt;/p&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/olist&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the function is a string containing the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the resource retrieved
 :             using the URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1170"/&amp;gt; if &amp;lt;code&amp;gt;$href&amp;lt;/code&amp;gt;
 :             contains a fragment identifier, or if it cannot be used to retrieve the 
 :             &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of a resource.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1190"/&amp;gt; &amp;lt;phrase diff="add" at="L"&amp;gt;if the value 
 :             of the &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; argument is not a valid encoding name, &amp;lt;/phrase&amp;gt;if the &amp;lt;termref def="dt-processor"&amp;gt;processor&amp;lt;/termref&amp;gt; does not support the specified encoding,
 :             if the &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the retrieved
 :             resource contains octets that cannot be decoded into Unicode &amp;lt;termref def="character"&amp;gt;characters&amp;lt;/termref&amp;gt; using the specified encoding, or if the resulting characters
 :             are not permitted XML characters.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="UT" code="1200"/&amp;gt; if
 :                &amp;lt;code&amp;gt;$encoding&amp;lt;/code&amp;gt; is absent and the &amp;lt;termref def="dt-processor"&amp;gt;processor&amp;lt;/termref&amp;gt; cannot infer the encoding using external information and the
 :             encoding is not UTF-8.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text
 :)
declare function fn:unparsed-text($href as xs:string?,  $encoding as xs:string) as  xs:string? external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Because errors in evaluating the &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; function are
 :             non-recoverable, these two functions are provided to allow an application to determine
 :             whether a call with particular arguments would succeed.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt; function determines whether a call
 :             on the &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; function with identical arguments would
 :             return a string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the first argument is an empty sequence, the function returns false. &amp;lt;phrase diff="del" at="L"&amp;gt;If the second
 :             argument is an empty sequence, the function behaves as if the second argument were
 :             omitted.&amp;lt;/phrase&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In other cases, the function returns true if a call on
 :                &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; with the same arguments would succeed, and
 :             false if a call on &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; with the same arguments would
 :             fail with a non-recoverable dynamic error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The functions &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; and
 :                &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt; have the same requirement for
 :                &amp;lt;termref def="deterministic"&amp;gt;determinism&amp;lt;/termref&amp;gt; as the functions
 :                &amp;lt;code&amp;gt;fn:doc&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:doc-available&amp;lt;/code&amp;gt;. This means that unless the
 :             user has explicitly stated a requirement for a reduced level of determinism, either of
 :             these functions if called twice with the same arguments during the course of a
 :             transformation &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; return the same results each time; moreover, the
 :             results of a call on &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt;
 :             &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be consistent with the results of a subsequent call on
 :                &amp;lt;function&amp;gt;unparsed-text&amp;lt;/function&amp;gt; with the same arguments.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This requires that the &amp;lt;function&amp;gt;unparsed-text-available&amp;lt;/function&amp;gt; function should
 :             actually attempt to read the resource identified by the URI, and check that it is
 :             correctly encoded and contains no characters that are invalid in XML. Implementations
 :             may avoid the cost of repeating these checks for example by caching the validated
 :             contents of the resource, to anticipate a subsequent call on the
 :                &amp;lt;function&amp;gt;unparsed-text&amp;lt;/function&amp;gt;
 :             &amp;lt;phrase diff="add" at="A"&amp;gt;or &amp;lt;function&amp;gt;unparsed-text-lines&amp;lt;/function&amp;gt;
 :             &amp;lt;/phrase&amp;gt; function. Alternatively, implementations may be able to rewrite an expression
 :             such as &amp;lt;code&amp;gt;if (unparsed-text-available(A)) then unparsed-text(A) else ...&amp;lt;/code&amp;gt; to
 :             generate a single call internally.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text-available
 :)
declare function fn:unparsed-text-available($href as xs:string?) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;fn:unparsed-text-lines&amp;lt;/code&amp;gt; function reads an external resource (for
 :             example, a file) and returns its contents as a sequence of strings, one for each line of
 :             text in the  &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; of the resource.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-lines" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-lines" return-type="xs:string*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;code&amp;gt;unparsed-text-lines&amp;lt;/code&amp;gt; function reads an external resource (for example, a
 :             file) and returns its &amp;lt;phrase diff="chg" at="L"&amp;gt;string representation&amp;lt;/phrase&amp;gt; as a sequence of strings, separated at newline
 :             boundaries. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result of the single-argument function is the same as the result of the expression
 :                &amp;lt;code&amp;gt;fn:tokenize(fn:unparsed-text($href), '\r\n|\r|\n')[not(position()=last() and
 :                .='')]&amp;lt;/code&amp;gt;. The result of the two-argument function is the same as the result of
 :             the expression &amp;lt;code&amp;gt;fn:tokenize(fn:unparsed-text($href, $encoding),
 :                '\r\n|\r|\n'))[not(position()=last() and .='')]&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The result is a thus a sequence of strings containing the text of the resource retrieved
 :             using the URI, each string representing one line of text. Lines are separated by one of
 :             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not
 :             included in the returned strings. If there are two adjacent newline sequences, a
 :             zero-length string will be returned to represent the empty line; but if the external
 :             resource ends with a newline sequence, no zero-length string will be returned as the
 :             last item in the result.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Error conditions are the same as for the &amp;lt;code&amp;gt;fn:unparsed-text&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text-lines
 :)
declare function fn:unparsed-text-lines(	$href	 as xs:string?,  $encoding	 as xs:string) as  xs:string* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Because errors in evaluating the &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; function are
 :             non-recoverable, these two functions are provided to allow an application to determine
 :             whether a call with particular arguments would succeed.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="unparsed-text-available" return-type="xs:boolean" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="href" type="xs:string?"/&amp;gt;&amp;lt;arg name="encoding" type="xs:string"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt; function determines whether a call
 :             on the &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; function with identical arguments would
 :             return a string.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the first argument is an empty sequence, the function returns false. &amp;lt;phrase diff="del" at="L"&amp;gt;If the second
 :             argument is an empty sequence, the function behaves as if the second argument were
 :             omitted.&amp;lt;/phrase&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;In other cases, the function returns true if a call on
 :                &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; with the same arguments would succeed, and
 :             false if a call on &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; with the same arguments would
 :             fail with a non-recoverable dynamic error.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The functions &amp;lt;function&amp;gt;fn:unparsed-text&amp;lt;/function&amp;gt; and
 :                &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt; have the same requirement for
 :                &amp;lt;termref def="deterministic"&amp;gt;determinism&amp;lt;/termref&amp;gt; as the functions
 :                &amp;lt;code&amp;gt;fn:doc&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;fn:doc-available&amp;lt;/code&amp;gt;. This means that unless the
 :             user has explicitly stated a requirement for a reduced level of determinism, either of
 :             these functions if called twice with the same arguments during the course of a
 :             transformation &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; return the same results each time; moreover, the
 :             results of a call on &amp;lt;function&amp;gt;fn:unparsed-text-available&amp;lt;/function&amp;gt;
 :             &amp;lt;rfc2119&amp;gt;must&amp;lt;/rfc2119&amp;gt; be consistent with the results of a subsequent call on
 :                &amp;lt;function&amp;gt;unparsed-text&amp;lt;/function&amp;gt; with the same arguments.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This requires that the &amp;lt;function&amp;gt;unparsed-text-available&amp;lt;/function&amp;gt; function should
 :             actually attempt to read the resource identified by the URI, and check that it is
 :             correctly encoded and contains no characters that are invalid in XML. Implementations
 :             may avoid the cost of repeating these checks for example by caching the validated
 :             contents of the resource, to anticipate a subsequent call on the
 :                &amp;lt;function&amp;gt;unparsed-text&amp;lt;/function&amp;gt;
 :             &amp;lt;phrase diff="add" at="A"&amp;gt;or &amp;lt;function&amp;gt;unparsed-text-lines&amp;lt;/function&amp;gt;
 :             &amp;lt;/phrase&amp;gt; function. Alternatively, implementations may be able to rewrite an expression
 :             such as &amp;lt;code&amp;gt;if (unparsed-text-available(A)) then unparsed-text(A) else ...&amp;lt;/code&amp;gt; to
 :             generate a single call internally.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-unparsed-text-available
 :)
declare function fn:unparsed-text-available(	$href	 as xs:string?,  $encoding	 as xs:string) as  xs:boolean external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values representing the URIs in a resource collection.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="uri-collection" return-type="xs:anyURI*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="uri-collection" return-type="xs:anyURI*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		available resource collections, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of the function returns the URIs in the &amp;lt;term&amp;gt;Default resource collection&amp;lt;/term&amp;gt;
 :             described in &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a relative &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;, it is resolved
 :             against the value of the base-URI property from the static context. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function behaves as if it had been
 :             called without an argument. See above.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The single-argument form of the function returns the sequence of URIs corresponding to the 
 :             supplied URI in the &amp;lt;term&amp;gt;Available resource collections&amp;lt;/term&amp;gt; described in 
 :             &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if no URI is supplied (that is, if the
 :             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the
 :             value of the default resource collection is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="J"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; 
 :             if &amp;lt;term&amp;gt;available resource collections&amp;lt;/term&amp;gt; provides no mapping for the absolutized URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0004"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a
 :             valid &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-uri-collection
 :)
declare function fn:uri-collection() as  xs:anyURI* external;
 
(:~
 : &amp;lt;div&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;Returns a sequence of &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt; values representing the URIs in a resource collection.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="uri-collection" return-type="xs:anyURI*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"/&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;example role="signature"&amp;gt;&amp;lt;proto name="uri-collection" return-type="xs:anyURI*" isOp="no" prefix="fn" returnEmptyOk="no" returnSeq="no" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no"&amp;gt;&amp;lt;arg name="arg" type="xs:string?"/&amp;gt;&amp;lt;/proto&amp;gt;&amp;lt;/example&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;This function is &amp;lt;termref def="dt-deterministic"&amp;gt;deterministic&amp;lt;/termref&amp;gt;, &amp;lt;termref def="dt-context-dependent"&amp;gt;context-dependent&amp;lt;/termref&amp;gt;,  and &amp;lt;termref def="dt-focus-independent"&amp;gt;focus-independent&amp;lt;/termref&amp;gt;.  It depends on 
 : 		available resource collections, and static base uri.
 : 	&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The zero-argument form of the function returns the URIs in the &amp;lt;term&amp;gt;Default resource collection&amp;lt;/term&amp;gt;
 :             described in &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If the value of &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is a relative &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;, it is resolved
 :             against the value of the base-URI property from the static context. &amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;If &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is the empty sequence, the function behaves as if it had been
 :             called without an argument. See above.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;The single-argument form of the function returns the sequence of URIs corresponding to the 
 :             supplied URI in the &amp;lt;term&amp;gt;Available resource collections&amp;lt;/term&amp;gt; described in 
 :             &amp;lt;xspecref spec="XP30" ref="id-xp-evaluation-context-components"/&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; if no URI is supplied (that is, if the
 :             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the
 :             value of the default resource collection is &amp;lt;xtermref ref="dt-absent" spec="DM30"&amp;gt;absent&amp;lt;/xtermref&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" diff="chg" at="J"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0002"/&amp;gt; 
 :             if &amp;lt;term&amp;gt;available resource collections&amp;lt;/term&amp;gt; provides no mapping for the absolutized URI.&amp;lt;/p&amp;gt;&amp;lt;p xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"&amp;gt;A &amp;lt;phrase diff="add" at="L"&amp;gt;dynamic&amp;lt;/phrase&amp;gt; error is raised &amp;lt;errorref class="DC" code="0004"/&amp;gt; if &amp;lt;code&amp;gt;$arg&amp;lt;/code&amp;gt; is not a
 :             valid &amp;lt;code&amp;gt;xs:anyURI&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; 
 :
 : @see http://www.w3.org/TR/xpath-functions-30/#func-uri-collection
 :)
declare function fn:uri-collection($arg as xs:string?) as  xs:anyURI* external;
</programlisting></para></detaileddescription></compounddef></doxygen>