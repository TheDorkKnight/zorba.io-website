<doxygen><compounddef id="schema-tools-module" kind="module"><detaileddescription><para><h3>Content of schema-tools module</h3><programlisting type="module">xquery version "3.0";

(:
 : Copyright 2006-2009 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
 :)
(:~
 : This module provides funtionality to get sample XMLSchema from XML instances
 : and sample XML instances from XMLSchema.
 : &amp;lt;a href="http://xmlbeans.apache.org/"&amp;gt;Apache XMLBeans&amp;lt;/a&amp;gt; library is used to implement
 : inst2xsd and xsd2inst functions.
 : &amp;lt;br /&amp;gt;
 : &amp;lt;br /&amp;gt;
 : &amp;lt;b&amp;gt;Note:&amp;lt;/b&amp;gt; Since this module has a Java library dependency a JVM required
 : to be installed on the system. For Windows: jvm.dll is required on the system
 : path ( usually located in "C:\Program Files\Java\jre6\bin\client".
 :
 : @author Cezar Andrei
 : @see http://xmlbeans.apache.org/
 : @library &amp;lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html"&amp;gt;JDK - Java Development Kit&amp;lt;/a&amp;gt;
 : @library &amp;lt;a href="http://xmlbeans.apache.org/"&amp;gt;Apache XMLBeans&amp;lt;/a&amp;gt;
 : @see http://xmlbeans.apache.org
 : @project Zorba/Data Processing/Schema Tools
 :)
module namespace schema-tools = "http://www.zorba-xquery.com/modules/schema-tools";


import schema namespace st-options = "http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options";

(:~
 : Import module for checking if options element is validated.
 :)
import module namespace schema-options = "http://zorba.io/modules/schema";


declare namespace err = "http://www.w3.org/2005/xqt-errors";

declare namespace ver = "http://zorba.io/options/versioning";
declare option ver:module-version "1.0";


(:~
 : The inst2xsd function takes a set of sample XML instance elements as input and
 : generates a set of sample XMLSchema documents that define
 : the content of the given input.
 : &amp;lt;br /&amp;gt;
 : Please consult the 
 : &amp;lt;a href="http://xmlbeans.apache.org/"&amp;gt;official documentation for further
 : information&amp;lt;/a&amp;gt;.
 : &amp;lt;br /&amp;gt;
 : Example:&amp;lt;pre class="ace-static" ace-mode="xquery"&amp;gt;&amp;lt;![CDATA[
 :  import module namespace st = "http://www.zorba-xquery.com/modules/schema-tools";
 :  declare namespace sto =
 :      "http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options";
 :  let $instances := (&amp;lt;a&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;c/&amp;gt;&amp;lt;/a&amp;gt;, &amp;lt;b/&amp;gt;, &amp;lt;c&amp;gt;ccc&amp;lt;/c&amp;gt;)
 :  let $options  :=
 :     &amp;lt;sto:inst2xsd-options xmlns:sto=
 :       "http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options"&amp;gt;
 :       &amp;lt;sto:design&amp;gt;vbd&amp;lt;/sto:design&amp;gt;
 :       &amp;lt;sto:simple-content-types&amp;gt;smart&amp;lt;/sto:simple-content-types&amp;gt;
 :       &amp;lt;sto:use-enumeration&amp;gt;10&amp;lt;/sto:use-enumeration&amp;gt;
 :     &amp;lt;/sto:inst2xsd-options&amp;gt;
 :  return
 :      st:inst2xsd($instances, $options)
 :
 : ]]&amp;gt;&amp;lt;/pre&amp;gt;
 : &amp;lt;br /&amp;gt;
 : @param $instances The input XML instance elements
 : @param $options Options:&amp;lt;br /&amp;gt;
 :    &amp;lt;ul&amp;gt;
 :      &amp;lt;li&amp;gt;design: Choose the generated schema design&amp;lt;br /&amp;gt;
 :         - rdd: Russian Doll Design - local elements and local types&amp;lt;br /&amp;gt;
 :         - ssd: Salami Slice Design - global elements and local types&amp;lt;br /&amp;gt;
 :         - vbd (default): Venetian Blind Design - local elements and global
 :                          complex types&amp;lt;/li&amp;gt;
 :      &amp;lt;li&amp;gt;simple-content-types: type of leaf nodes&amp;lt;br /&amp;gt;
 :         - smart (default): try to find the right simple XMLSchema type&amp;lt;br /&amp;gt;
 :         - always-string: use xsd:string for all simple types&amp;lt;/li&amp;gt;
 :      &amp;lt;li&amp;gt;use-enumeration: - when there are multiple valid values in a list&amp;lt;br /&amp;gt;
 :         - 1: never use enumeration&amp;lt;br /&amp;gt;
 :         - 2 or more (default 10): use enumeration if less than this number of occurrences - number option&amp;lt;/li&amp;gt;
 :      &amp;lt;li&amp;gt;verbose: - stdout verbose info&amp;lt;br /&amp;gt;
 :         - true: - output type holder information&amp;lt;br /&amp;gt;
 :         - false (default): no output&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;
 :
 :
 : @return The generated XMLSchema documents.
 : @error schema-tools:VM001 If Zorba was unable to start the JVM.
 : @error schema-tools:JAVA-EXCEPTION If Apache XMLBeans throws an exception.
 : @example test/Queries/schema-tools/inst2xsd-opt1.xq
 : @example test/Queries/schema-tools/inst2xsd-opt2.xq
 : @example test/Queries/schema-tools/inst2xsd-opt3.xq
 : @example test/Queries/schema-tools/inst2xsd-simple.xq
 : @example test/Queries/schema-tools/inst2xsd-tns-default.xq
 : @example test/Queries/schema-tools/inst2xsd-tns.xq
 : @example test/Queries/schema-tools/inst2xsd-multiTns.xq
 : @example test/Queries/schema-tools/inst2xsd-err1-badOpt.xq
 :)
declare function
schema-tools:inst2xsd ($instances as element()+,
    $options as element(st-options:inst2xsd-options)?)
  as document-node()*
{
  let $validated-options :=
    if(empty($options))
    then
      $options
    else if(schema-options:is-validated($options))
    then
      $options
    else
      validate{$options}
  return
    schema-tools:inst2xsd-internal($instances, $validated-options)
};


declare %private function
schema-tools:inst2xsd-internal( $instances as element()+,
    $options as element(st-options:inst2xsd-options, st-options:inst2xsdOptionsType)? )
  as document-node()* external;



(:~
 : The xsd2inst function takes a set of XML Schema elements as input and the
 : local name of the root element and
 : generates a document that represents one sample XML instance of the given
 : input schemas. The local name is searched in schema global element definitions
 : in the order of schemas parameter.
 : &amp;lt;br /&amp;gt;
 : Please consult the
 : &amp;lt;a href="http://xmlbeans.apache.org/"&amp;gt;official documentation for further
 :   information&amp;lt;/a&amp;gt;.
 : &amp;lt;br /&amp;gt;
 : Example: &amp;lt;pre class="ace-static" ace-static="xquery"&amp;gt;&amp;lt;![CDATA[
 :  import module namespace st = "http://www.zorba-xquery.com/modules/schema-tools";
 :  declare namespace sto =
 :      "http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options";
 :  let $xsds  :=
 :     ( &amp;lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
 :           attributeFormDefault="unqualified"
 :           elementFormDefault="qualified"&amp;gt;
 :         &amp;lt;xs:element name="a" type="aType"/&amp;gt;
 :         &amp;lt;xs:complexType name="aType"&amp;gt;
 :           &amp;lt;xs:sequence&amp;gt;
 :             &amp;lt;xs:element type="xs:string" name="b"/&amp;gt;
 :             &amp;lt;xs:element type="xs:string" name="c"/&amp;gt;
 :           &amp;lt;/xs:sequence&amp;gt;
 :         &amp;lt;/xs:complexType&amp;gt;
 :       &amp;lt;/xs:schema&amp;gt; )
 :  let $options :=
 :    &amp;lt;sto:xsd2inst-options xmlns:sto=
 :      "http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options"&amp;gt;
 :      &amp;lt;sto:network-downloads&amp;gt;false&amp;lt;/sto:network-downloads&amp;gt;
 :      &amp;lt;sto:no-pvr&amp;gt;false&amp;lt;/sto:no-pvr&amp;gt;
 :      &amp;lt;sto:no-upa&amp;gt;false&amp;lt;/sto:no-upa&amp;gt;
 :    &amp;lt;/sto:xsd2inst-options&amp;gt;
 :  return
 :      st:xsd2inst($xsds, "a", $options)
 : ]]&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;br /&amp;gt;
 : @param $schemas elements representing XMLSchema definitions
 : @param $rootElementName The local name of the instance root element.
 :        If multiple target namespaces are used, first one found - using the
 :        sequence order - will be used.
 : @param $options Options:&amp;lt;br /&amp;gt;&amp;lt;ul&amp;gt;
 :       &amp;lt;li&amp;gt;network-downloads: boolean (default false)&amp;lt;br /&amp;gt;
 :             - true allows XMLBeans to use network when resolving schema
 :               imports and includes&amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt;no-pvr: boolean (default false)&amp;lt;br /&amp;gt;
 :             - true to disable particle valid (restriction) rule,
 :               false otherwise&amp;lt;/li&amp;gt;
 :       &amp;lt;li&amp;gt;no-upa: boolean (default false)&amp;lt;br /&amp;gt;
 :             - true to disable unique particle attribution rule,
 :               false otherwise&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;
 :
 : @return The generated output document, representing a sample XML instance.
 : @error schema-tools:VM001 If Zorba was unable to start the JVM.
 : @error schema-tools:JAVA-EXCEPTION If Apache XMLBeans throws an exception.
 : @example test/Queries/schema-tools/xsd2inst-opt1.xq
 : @example test/Queries/schema-tools/xsd2inst-simple.xq
 : @example test/Queries/schema-tools/xsd2inst-tns.xq
 : @example test/Queries/schema-tools/xsd2inst-err1-badOpt.xq
 :)
declare function
schema-tools:xsd2inst ($schemas as element()+, $rootElementName as xs:string,
    $options as element(st-options:xsd2inst-options)?)
  as document-node()
{
  let $validated-options :=
    if(empty($options))
    then
        $options
    else if(schema-options:is-validated($options))
    then
        $options
    else
        validate{$options}
  return
    schema-tools:xsd2inst-internal($schemas, $rootElementName, $validated-options)
};


declare %private function
schema-tools:xsd2inst-internal ($schemas as element()+,
    $rootElementName as xs:string,
    $options as element(st-options:xsd2inst-options, st-options:xsd2instOptionsType)?)
  as document-node() external;
</programlisting></para></detaileddescription></compounddef></doxygen>